Local aurelia-cli v1.0.0-beta.13
Starting 'configureEnvironment'...
Finished 'configureEnvironment'
Starting 'runWebpack'...
{ uid: 2,
  name: 'runWebpack',
  branch: false,
  error:
   { Error: listen EADDRINUSE: address already in use 127.0.0.1:8080
       at Server.setupListenHandle [as _listen2] (net.js:1294:14)
       at listenInCluster (net.js:1342:12)
       at GetAddrInfoReqWrap.doListen [as callback] (net.js:1480:7)
       at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:63:10)
     code: 'EADDRINUSE',
     errno: 'EADDRINUSE',
     syscall: 'listen',
     address: '127.0.0.1',
     port: 8080,
     domainEmitter:
      Server {
        domain:
         Domain {
           domain: null,
           _events:
            [Object: null prototype] {
              removeListener: [Function: updateExceptionCapture],
              newListener: [Function: updateExceptionCapture] },
           _eventsCount: 2,
           _maxListeners: undefined,
           members: [] },
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: 'C:\\temp\\au-ionic\\views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\temp\\au-ionic\\views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'acl' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'bind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'checkout' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'connect' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'copy' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'delete' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'head' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'link' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'lock' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'm-search' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'merge' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkactivity' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcalendar' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcol' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'move' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'notify' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'options' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'patch' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'propfind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'proppatch' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'purge' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'put' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'rebind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'report' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'search' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'source' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'subscribe' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'trace' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unbind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlink' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlock' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unsubscribe' } ],
                         methods:
                          { acl: true,
                            bind: true,
                            checkout: true,
                            connect: true,
                            copy: true,
                            delete: true,
                            get: true,
                            head: true,
                            link: true,
                            lock: true,
                            'm-search': true,
                            merge: true,
                            mkactivity: true,
                            mkcalendar: true,
                            mkcol: true,
                            move: true,
                            notify: true,
                            options: true,
                            patch: true,
                            post: true,
                            propfind: true,
                            proppatch: true,
                            purge: true,
                            put: true,
                            rebind: true,
                            report: true,
                            search: true,
                            source: true,
                            subscribe: true,
                            trace: true,
                            unbind: true,
                            unlink: true,
                            unlock: true,
                            unsubscribe: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/__webpack_dev_server__\/live\.bundle\.js\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/__webpack_dev_server__/live.bundle.js',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/__webpack_dev_server__\/sockjs\.bundle\.js\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/__webpack_dev_server__/sockjs.bundle.js',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/webpack-dev-server\.js\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/webpack-dev-server.js',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 23 } ],
                      regexp:
                       { /^\/webpack-dev-server\/(.*)\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/webpack-dev-server/*',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/webpack-dev-server\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/webpack-dev-server',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'acl' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'bind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'checkout' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'connect' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'copy' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'delete' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'head' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'link' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'lock' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'm-search' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'merge' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkactivity' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcalendar' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcol' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'move' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'notify' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'options' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'patch' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'propfind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'proppatch' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'purge' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'put' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'rebind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'report' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'search' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'source' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'subscribe' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'trace' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unbind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlink' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlock' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unsubscribe' } ],
                         methods:
                          { acl: true,
                            bind: true,
                            checkout: true,
                            connect: true,
                            copy: true,
                            delete: true,
                            get: true,
                            head: true,
                            link: true,
                            lock: true,
                            'm-search': true,
                            merge: true,
                            mkactivity: true,
                            mkcalendar: true,
                            mkcol: true,
                            move: true,
                            notify: true,
                            options: true,
                            patch: true,
                            post: true,
                            propfind: true,
                            proppatch: true,
                            purge: true,
                            put: true,
                            rebind: true,
                            report: true,
                            search: true,
                            source: true,
                            subscribe: true,
                            trace: true,
                            unbind: true,
                            unlink: true,
                            unlock: true,
                            unsubscribe: true } } },
                    Layer {
                      handle:
                       { [Function: middleware]
                         close: [Function: close],
                         context:
                          { state: false,
                            webpackStats: null,
                            callbacks: [],
                            options:
                             { logLevel: 'info',
                               logTime: false,
                               logger: null,
                               mimeTypes: null,
                               reporter: [Function: reporter],
                               stats:
                                { colors:
                                   { supportsColor: [Function: getSupportLevel],
                                     stdout: false,
                                     stderr: { level: 3, hasBasic: true, has256: true, has16m: true } } },
                               watchOptions: { aggregateTimeout: 200 },
                               writeToDisk: false,
                               host: 'localhost',
                               publicPath: '/',
                               filename: '[name].[hash].bundle.js',
                               hot: false,
                               port: 8080,
                               contentBase: 'C:\\temp\\au-ionic\\dist',
                               historyApiFallback: true,
                               open: false,
                               https: undefined },
                            compiler:
                             Compiler {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { shouldEmit:
                                   SyncBailHook {
                                     _args: [ 'compilation' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  done:
                                   AsyncSeriesHook {
                                     _args: [ 'stats' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: done],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  additionalPass:
                                   AsyncSeriesHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  beforeRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  run:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  emit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async',
                                          fn: [Function],
                                          name: 'DuplicatePackageCheckerPlugin' },
                                        { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterEmit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  thisCompilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FetchCompileWasmTemplatePlugin' },
                                        { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  compilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Aurelia:PreserveModuleName' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                        { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                        { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EvalSourceMapDevToolPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WebAssemblyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                        { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EnsureChunkConditionsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'RemoveParentModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'MergeDuplicateChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FlagDependencyExportsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'OccurrenceOrderChunkIdsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WarnCaseSensitiveModulesPlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  normalModuleFactory:
                                   SyncHook {
                                     _args: [ 'normalModuleFactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  contextModuleFactory:
                                   SyncHook {
                                     _args: [ 'contextModulefactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  beforeCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' },
                                        { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  compile:
                                   SyncHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  make:
                                   AsyncParallelHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  failed:
                                   SyncHook {
                                     _args: [ 'error' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  invalid:
                                   SyncHook {
                                     _args: [ 'filename', 'changeTime' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchClose:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  environment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterEnvironment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterPlugins:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterResolvers:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function], [Function] ] },
                                  entryOption:
                                   SyncBailHook {
                                     _args: [ 'context', 'entry' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function] ] } },
                               name: undefined,
                               parentCompilation: undefined,
                               outputPath: 'C:\\temp\\au-ionic\\dist',
                               outputFileSystem: MemoryFileSystem { data: {} },
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               recordsInputPath: undefined,
                               recordsOutputPath: undefined,
                               records: {},
                               removedFiles: Set {},
                               fileTimestamps: Map {},
                               contextTimestamps: Map {},
                               resolverFactory:
                                ResolverFactory {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { resolveOptions:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [ [Function] ] },
                                           'context' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                           'loader' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined } },
                                        _factory: [Function],
                                        _interceptors: [] },
                                     resolver:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncHook {
                                             _args: [ 'resolver', 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ] } },
                                        _factory: [Function],
                                        _interceptors: [] } },
                                  cache1: WeakMap { <items unknown> },
                                  cache2:
                                   Map {
                                     'normal|{}' => Resolver {
                                       _pluginCompat:
                                        SyncBailHook {
                                          _args: [ 'options' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                             { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable camelCase',
                                               stage: 100 },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable this.hooks',
                                               stage: 200 } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       fileSystem:
                                        CachedInputFileSystem {
                                          fileSystem: NodeJsInputFileSystem {},
                                          _statStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readdirStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readFileStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [Timeout],
                                                _idleNext: [TimersList],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 128,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readJsonStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map {
                                                'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  { name: 'au-ionic',
                                                    description: 'An Aurelia client application.',
                                                    version: '0.1.0',
                                                    repository: { type: '???', url: '???' },
                                                    scripts: {},
                                                    license: 'MIT',
                                                    dependencies:
                                                     { '@ionic/core': '^4.1.1',
                                                       'aurelia-animator-css': '^1.0.4',
                                                       'aurelia-bootstrapper': '^2.3.0',
                                                       'aurelia-polyfills': '^1.3.0',
                                                       bluebird: '^3.5.2' },
                                                    peerDependencies: {},
                                                    devDependencies:
                                                     { '@stencil/webpack': '0.0.6',
                                                       '@types/bluebird': '^3.5.24',
                                                       '@types/lodash': '^4.14.117',
                                                       '@types/node': '^10.11.6',
                                                       '@types/webpack': '^4.4.15',
                                                       'aurelia-cli': '^1.0.0-beta.13',
                                                       'aurelia-testing': '^1.0.0',
                                                       'aurelia-tools': '^2.0.0',
                                                       'aurelia-webpack-plugin': '^3.0.0',
                                                       'copy-webpack-plugin': '^4.5.2',
                                                       'css-loader': '^1.0.0',
                                                       del: '^3.0.0',
                                                       'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                       'expose-loader': '^0.7.5',
                                                       'file-loader': '^2.0.0',
                                                       gulp: '^4.0.0',
                                                       'gulp-rename': '^1.4.0',
                                                       'html-loader': '^0.5.5',
                                                       'html-webpack-plugin': '^3.2.0',
                                                       'istanbul-instrumenter-loader': '^3.0.1',
                                                       'json-loader': '^0.5.7',
                                                       less: 'latest',
                                                       'less-loader': 'latest',
                                                       'mini-css-extract-plugin': '^0.4.3',
                                                       minimatch: '^3.0.4',
                                                       opn: '^5.4.0',
                                                       'style-loader': '^0.23.1',
                                                       through2: '^2.0.3',
                                                       'ts-loader': '^5.2.1',
                                                       'ts-node': '^7.0.1',
                                                       typescript: '^3.1.2',
                                                       'url-loader': '^1.1.1',
                                                       'vinyl-fs': '^3.0.3',
                                                       webpack: '^4.27.0',
                                                       'webpack-bundle-analyzer': 'latest',
                                                       'webpack-cli': '^3.1.2',
                                                       'webpack-dev-server': '^3.1.9' },
                                                    engines: { node: '>= 6.0.0' },
                                                    main: 'dist/app.bundle.js' } ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [TimersList],
                                                _idleNext: [Timeout],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 129,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readlinkStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _stat: [Function: bound bound ],
                                          _statSync: [Function: bound bound ],
                                          _readdir: [Function: bound readdir],
                                          _readdirSync: [Function: bound readdirSync],
                                          _readFile: [Function: bound bound readFile],
                                          _readFileSync: [Function: bound bound readFileSync],
                                          _readJson: [Function],
                                          _readJsonSync: [Function],
                                          _readlink: [Function: bound bound readlink],
                                          _readlinkSync: [Function: bound bound readlinkSync] },
                                       hooks:
                                        { resolveStep:
                                           SyncHook {
                                             _args: [ 'hook', 'request' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [],
                                             name: 'resolveStep' },
                                          noResolve:
                                           SyncHook {
                                             _args: [ 'request', 'error' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'noResolve' },
                                          resolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'Aurelia:SubFolder' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'resolve' },
                                          result:
                                           AsyncSeriesHook {
                                             _args: [ 'result', 'resolveContext' ],
                                             taps: [],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          parsedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'parsedResolve' },
                                          describedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async',
                                                  fn: [Function],
                                                  stage: -10,
                                                  name: 'Aurelia:Dist' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'ModuleKindPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'JoinRequestPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ],
                                             name: 'describedResolve' },
                                          rawModule:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'rawModule' },
                                          module:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'module' },
                                          relative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'relative' },
                                          describedRelative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'describedRelative' },
                                          directory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'directory' },
                                          existingDirectory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingDirectory' },
                                          undescribedRawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'undescribedRawFile' },
                                          rawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'rawFile' },
                                          file:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'file' },
                                          existingFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingFile' },
                                          resolved:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'resolved' },
                                          newResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'newResolve' } },
                                       withOptions: [Function] } } },
                               resolvers:
                                { normal:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  loader:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  context:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] } },
                               options:
                                { resolve:
                                   { extensions: [ '.ts', '.js' ],
                                     modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                     alias:
                                      { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                     unsafeCache: true,
                                     mainFiles: [ 'index' ],
                                     aliasFields: [ 'browser' ],
                                     mainFields: [ 'browser', 'module', 'main' ],
                                     cacheWithContext: false,
                                     plugins:
                                      [ DistPlugin { dist: '/dist/native-modules/' },
                                        SubFolderPlugin {} ] },
                                  entry:
                                   { app:
                                      [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'webpack-dev-server/client',
                                        'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'aurelia-bootstrapper' ] },
                                  mode: 'development',
                                  output:
                                   { path: 'C:\\temp\\au-ionic\\dist',
                                     publicPath: '/',
                                     filename: '[name].[hash].bundle.js',
                                     sourceMapFilename: '[name].[hash].bundle.map',
                                     chunkFilename: '[name].[hash].chunk.js',
                                     webassemblyModuleFilename: '[modulehash].module.wasm',
                                     library: '',
                                     hotUpdateFunction: 'webpackHotUpdate',
                                     jsonpFunction: 'webpackJsonp',
                                     chunkCallbackName: 'webpackChunk',
                                     globalObject: 'window',
                                     devtoolNamespace: '',
                                     libraryTarget: 'var',
                                     pathinfo: true,
                                     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                     hotUpdateMainFilename: '[hash].hot-update.json',
                                     crossOriginLoading: false,
                                     jsonpScriptType: false,
                                     chunkLoadTimeout: 120000,
                                     hashFunction: 'md4',
                                     hashDigest: 'hex',
                                     hashDigestLength: 20,
                                     devtoolLineToLine: false,
                                     strictModuleExceptionHandling: false },
                                  optimization:
                                   { runtimeChunk: { name: [Function: name] },
                                     moduleIds: 'hashed',
                                     splitChunks:
                                      { hidePathInfo: true,
                                        chunks: 'initial',
                                        maxSize: 200000,
                                        cacheGroups:
                                         { default: false,
                                           vendors:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors',
                                              priority: 19,
                                              enforce: true,
                                              minSize: 30000 },
                                           vendorsAsync:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors.async',
                                              chunks: 'async',
                                              priority: 9,
                                              reuseExistingChunk: true,
                                              minSize: 10000 },
                                           commonsAsync:
                                            { name: 'commons.async',
                                              minChunks: 2,
                                              chunks: 'async',
                                              priority: 0,
                                              reuseExistingChunk: true,
                                              minSize: 10000 } },
                                        minSize: 10000,
                                        minChunks: 1,
                                        maxAsyncRequests: Infinity,
                                        automaticNameDelimiter: '~',
                                        maxInitialRequests: Infinity,
                                        name: true },
                                     removeAvailableModules: true,
                                     removeEmptyChunks: true,
                                     mergeDuplicateChunks: true,
                                     flagIncludedChunks: false,
                                     occurrenceOrder: false,
                                     sideEffects: false,
                                     providedExports: true,
                                     usedExports: false,
                                     concatenateModules: false,
                                     noEmitOnErrors: false,
                                     checkWasmTypes: false,
                                     mangleWasmImports: false,
                                     namedModules: true,
                                     hashedModuleIds: false,
                                     namedChunks: true,
                                     portableRecords: false,
                                     minimize: false,
                                     minimizer: [ { apply: [Function: apply] } ],
                                     nodeEnv: 'development' },
                                  performance:
                                   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                  devServer:
                                   { contentBase: 'C:\\temp\\au-ionic\\dist',
                                     historyApiFallback: true },
                                  devtool: 'cheap-module-eval-source-map',
                                  module:
                                   { rules:
                                      [ { test: /\.css$/i,
                                          issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                          use: [ 'style-loader', { loader: 'css-loader' } ] },
                                        { test: /\.css$/i,
                                          issuer: [ { test: /\.html$/i } ],
                                          use: [ { loader: 'css-loader' } ] },
                                        { test: /\.less$/i,
                                          use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                          issuer: /\.[tj]s$/i },
                                        { test: /\.less$/i,
                                          use: [ 'css-loader', 'less-loader' ],
                                          issuer: /\.html?$/i },
                                        { test: /\.html$/i, loader: 'html-loader' },
                                        { test: /\.ts$/, loader: 'ts-loader' },
                                        { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                          loader: 'expose-loader?Promise' },
                                        { test: /\.(png|gif|jpg|cur)$/i,
                                          loader: 'url-loader',
                                          options: { limit: 8192 } },
                                        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff' } },
                                        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'file-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                     unknownContextRequest: '.',
                                     unknownContextRegExp: false,
                                     unknownContextRecursive: true,
                                     unknownContextCritical: true,
                                     exprContextRequest: '.',
                                     exprContextRegExp: false,
                                     exprContextRecursive: true,
                                     exprContextCritical: true,
                                     wrappedContextRegExp: /.*/,
                                     wrappedContextRecursive: true,
                                     wrappedContextCritical: false,
                                     strictExportPresence: false,
                                     strictThisContextOnImports: false,
                                     unsafeCache: true,
                                     defaultRules:
                                      [ { type: 'javascript/auto', resolve: {} },
                                        { test: /\.mjs$/i,
                                          type: 'javascript/esm',
                                          resolve: { mainFields: [ 'browser', 'main' ] } },
                                        { test: /\.json$/i, type: 'json' },
                                        { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                  plugins:
                                   [ DuplicatePackageCheckerPlugin {
                                       options:
                                        { verbose: false,
                                          showHelp: true,
                                          emitError: false,
                                          exclude: null,
                                          strict: true } },
                                     AureliaPlugin {
                                       options:
                                        { includeAll: false,
                                          aureliaConfig:
                                           [ 'defaultBindingLanguage',
                                             'defaultResources',
                                             'eventAggregator',
                                             'history',
                                             'router',
                                             'developmentLogging' ],
                                          dist: 'native-modules',
                                          features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                          moduleMethods: [],
                                          noHtmlLoader: false,
                                          noInlineView: false,
                                          noModulePathResolve: false,
                                          noWebpackLoader: false,
                                          viewsFor: '**/!(tslib)*.{ts,js}',
                                          viewsExtensions: '.html',
                                          aureliaApp: 'main' } },
                                     ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                     ModuleDependenciesPlugin {
                                       root: 'C:\\temp\\au-ionic',
                                       hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                     HtmlWebpackPlugin {
                                       options:
                                        { template:
                                           'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                          templateParameters: [Function: templateParametersGenerator],
                                          filename: 'index.html',
                                          hash: false,
                                          inject: true,
                                          compile: true,
                                          favicon: false,
                                          minify: undefined,
                                          cache: true,
                                          showErrors: true,
                                          chunks: 'all',
                                          excludeChunks: [],
                                          chunksSortMode: 'auto',
                                          meta: {},
                                          title: 'Webpack App',
                                          xhtml: false,
                                          metadata:
                                           { title: 'Aurelia Navigation Skeleton',
                                             server: true,
                                             baseUrl: '/' } } },
                                     { apply: [Function: apply] } ],
                                  cache: true,
                                  context: 'C:\\temp\\au-ionic',
                                  target: 'web',
                                  node:
                                   { console: false,
                                     process: true,
                                     global: true,
                                     Buffer: true,
                                     setImmediate: true,
                                     __filename: 'mock',
                                     __dirname: 'mock' },
                                  resolveLoader:
                                   { unsafeCache: true,
                                     mainFields: [ 'loader', 'main' ],
                                     extensions: [ '.js', '.json' ],
                                     mainFiles: [ 'index' ],
                                     cacheWithContext: false,
                                     alias:
                                      { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                        async: 'bundle-loader' } } },
                               context: 'C:\\temp\\au-ionic',
                               requestShortener:
                                RequestShortener {
                                  currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                  parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                  buildinsAsModule: true,
                                  buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                  cache: Map {} },
                               running: true,
                               watchMode: true,
                               _assetEmittingSourceCache: WeakMap { <items unknown> },
                               _assetEmittingWrittenFiles: Map {},
                               watchFileSystem:
                                NodeWatchFileSystem {
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  watcherOptions: { aggregateTimeout: 200 },
                                  watcher:
                                   EventEmitter {
                                     domain:
                                      Domain {
                                        domain: null,
                                        _events:
                                         [Object: null prototype] {
                                           removeListener: [Function: updateExceptionCapture],
                                           newListener: [Function: updateExceptionCapture] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        members: [] },
                                     _events: [Object: null prototype] {},
                                     _eventsCount: 0,
                                     _maxListeners: undefined,
                                     options: { aggregateTimeout: 200 },
                                     watcherOptions: { ignored: undefined, poll: undefined },
                                     fileWatchers: [],
                                     dirWatchers: [],
                                     mtimes: [Object: null prototype] {},
                                     paused: false,
                                     aggregatedChanges: [],
                                     aggregatedRemovals: [],
                                     aggregateTimeout: 0,
                                     _onTimeout: [Function: bound _onTimeout] } },
                               dependencies: undefined },
                            watching:
                             Watching {
                               startTime: 1552894199049,
                               invalid: false,
                               handler: [Function],
                               callbacks: [],
                               closed: false,
                               watchOptions: { aggregateTimeout: 200 },
                               compiler:
                                Compiler {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { shouldEmit:
                                      SyncBailHook {
                                        _args: [ 'compilation' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     done:
                                      AsyncSeriesHook {
                                        _args: [ 'stats' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: done],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     additionalPass:
                                      AsyncSeriesHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     beforeRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     run:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     emit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async',
                                             fn: [Function],
                                             name: 'DuplicatePackageCheckerPlugin' },
                                           { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterEmit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     thisCompilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FetchCompileWasmTemplatePlugin' },
                                           { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     compilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Aurelia:PreserveModuleName' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                           { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                           { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EvalSourceMapDevToolPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WebAssemblyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                           { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EnsureChunkConditionsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'RemoveParentModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'MergeDuplicateChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FlagDependencyExportsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'OccurrenceOrderChunkIdsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WarnCaseSensitiveModulesPlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     normalModuleFactory:
                                      SyncHook {
                                        _args: [ 'normalModuleFactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     contextModuleFactory:
                                      SyncHook {
                                        _args: [ 'contextModulefactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     beforeCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' },
                                           { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     compile:
                                      SyncHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     make:
                                      AsyncParallelHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     failed:
                                      SyncHook {
                                        _args: [ 'error' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     invalid:
                                      SyncHook {
                                        _args: [ 'filename', 'changeTime' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchClose:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     environment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterEnvironment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterPlugins:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterResolvers:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function], [Function] ] },
                                     entryOption:
                                      SyncBailHook {
                                        _args: [ 'context', 'entry' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function] ] } },
                                  name: undefined,
                                  parentCompilation: undefined,
                                  outputPath: 'C:\\temp\\au-ionic\\dist',
                                  outputFileSystem: MemoryFileSystem { data: {} },
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  recordsInputPath: undefined,
                                  recordsOutputPath: undefined,
                                  records: {},
                                  removedFiles: Set {},
                                  fileTimestamps: Map {},
                                  contextTimestamps: Map {},
                                  resolverFactory:
                                   ResolverFactory {
                                     _pluginCompat:
                                      SyncBailHook {
                                        _args: [ 'options' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable camelCase',
                                             stage: 100 },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable this.hooks',
                                             stage: 200 } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     hooks:
                                      { resolveOptions:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [ [Function] ] },
                                              'context' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                              'loader' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined } },
                                           _factory: [Function],
                                           _interceptors: [] },
                                        resolver:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncHook {
                                                _args: [ 'resolver', 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ] } },
                                           _factory: [Function],
                                           _interceptors: [] } },
                                     cache1: WeakMap { <items unknown> },
                                     cache2:
                                      Map {
                                        'normal|{}' => Resolver {
                                          _pluginCompat:
                                           SyncBailHook {
                                             _args: [ 'options' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                                { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable camelCase',
                                                  stage: 100 },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable this.hooks',
                                                  stage: 200 } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          fileSystem:
                                           CachedInputFileSystem {
                                             fileSystem: NodeJsInputFileSystem {},
                                             _statStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readdirStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readFileStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [Timeout],
                                                   _idleNext: [TimersList],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 128,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readJsonStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     { name: 'au-ionic',
                                                       description: 'An Aurelia client application.',
                                                       version: '0.1.0',
                                                       repository: { type: '???', url: '???' },
                                                       scripts: {},
                                                       license: 'MIT',
                                                       dependencies:
                                                        { '@ionic/core': '^4.1.1',
                                                          'aurelia-animator-css': '^1.0.4',
                                                          'aurelia-bootstrapper': '^2.3.0',
                                                          'aurelia-polyfills': '^1.3.0',
                                                          bluebird: '^3.5.2' },
                                                       peerDependencies: {},
                                                       devDependencies:
                                                        { '@stencil/webpack': '0.0.6',
                                                          '@types/bluebird': '^3.5.24',
                                                          '@types/lodash': '^4.14.117',
                                                          '@types/node': '^10.11.6',
                                                          '@types/webpack': '^4.4.15',
                                                          'aurelia-cli': '^1.0.0-beta.13',
                                                          'aurelia-testing': '^1.0.0',
                                                          'aurelia-tools': '^2.0.0',
                                                          'aurelia-webpack-plugin': '^3.0.0',
                                                          'copy-webpack-plugin': '^4.5.2',
                                                          'css-loader': '^1.0.0',
                                                          del: '^3.0.0',
                                                          'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                          'expose-loader': '^0.7.5',
                                                          'file-loader': '^2.0.0',
                                                          gulp: '^4.0.0',
                                                          'gulp-rename': '^1.4.0',
                                                          'html-loader': '^0.5.5',
                                                          'html-webpack-plugin': '^3.2.0',
                                                          'istanbul-instrumenter-loader': '^3.0.1',
                                                          'json-loader': '^0.5.7',
                                                          less: 'latest',
                                                          'less-loader': 'latest',
                                                          'mini-css-extract-plugin': '^0.4.3',
                                                          minimatch: '^3.0.4',
                                                          opn: '^5.4.0',
                                                          'style-loader': '^0.23.1',
                                                          through2: '^2.0.3',
                                                          'ts-loader': '^5.2.1',
                                                          'ts-node': '^7.0.1',
                                                          typescript: '^3.1.2',
                                                          'url-loader': '^1.1.1',
                                                          'vinyl-fs': '^3.0.3',
                                                          webpack: '^4.27.0',
                                                          'webpack-bundle-analyzer': 'latest',
                                                          'webpack-cli': '^3.1.2',
                                                          'webpack-dev-server': '^3.1.9' },
                                                       engines: { node: '>= 6.0.0' },
                                                       main: 'dist/app.bundle.js' } ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [TimersList],
                                                   _idleNext: [Timeout],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 129,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readlinkStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _stat: [Function: bound bound ],
                                             _statSync: [Function: bound bound ],
                                             _readdir: [Function: bound readdir],
                                             _readdirSync: [Function: bound readdirSync],
                                             _readFile: [Function: bound bound readFile],
                                             _readFileSync: [Function: bound bound readFileSync],
                                             _readJson: [Function],
                                             _readJsonSync: [Function],
                                             _readlink: [Function: bound bound readlink],
                                             _readlinkSync: [Function: bound bound readlinkSync] },
                                          hooks:
                                           { resolveStep:
                                              SyncHook {
                                                _args: [ 'hook', 'request' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [],
                                                name: 'resolveStep' },
                                             noResolve:
                                              SyncHook {
                                                _args: [ 'request', 'error' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'noResolve' },
                                             resolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'Aurelia:SubFolder' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'resolve' },
                                             result:
                                              AsyncSeriesHook {
                                                _args: [ 'result', 'resolveContext' ],
                                                taps: [],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                             parsedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'parsedResolve' },
                                             describedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async',
                                                     fn: [Function],
                                                     stage: -10,
                                                     name: 'Aurelia:Dist' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'ModuleKindPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'JoinRequestPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ],
                                                name: 'describedResolve' },
                                             rawModule:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'rawModule' },
                                             module:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'module' },
                                             relative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'relative' },
                                             describedRelative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                   { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'describedRelative' },
                                             directory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'directory' },
                                             existingDirectory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingDirectory' },
                                             undescribedRawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'undescribedRawFile' },
                                             rawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'rawFile' },
                                             file:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                   { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'file' },
                                             existingFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingFile' },
                                             resolved:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'resolved' },
                                             newResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'newResolve' } },
                                          withOptions: [Function] } } },
                                  resolvers:
                                   { normal:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     loader:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     context:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] } },
                                  options:
                                   { resolve:
                                      { extensions: [ '.ts', '.js' ],
                                        modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                        alias:
                                         { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                        unsafeCache: true,
                                        mainFiles: [ 'index' ],
                                        aliasFields: [ 'browser' ],
                                        mainFields: [ 'browser', 'module', 'main' ],
                                        cacheWithContext: false,
                                        plugins:
                                         [ DistPlugin { dist: '/dist/native-modules/' },
                                           SubFolderPlugin {} ] },
                                     entry:
                                      { app:
                                         [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'webpack-dev-server/client',
                                           'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'aurelia-bootstrapper' ] },
                                     mode: 'development',
                                     output:
                                      { path: 'C:\\temp\\au-ionic\\dist',
                                        publicPath: '/',
                                        filename: '[name].[hash].bundle.js',
                                        sourceMapFilename: '[name].[hash].bundle.map',
                                        chunkFilename: '[name].[hash].chunk.js',
                                        webassemblyModuleFilename: '[modulehash].module.wasm',
                                        library: '',
                                        hotUpdateFunction: 'webpackHotUpdate',
                                        jsonpFunction: 'webpackJsonp',
                                        chunkCallbackName: 'webpackChunk',
                                        globalObject: 'window',
                                        devtoolNamespace: '',
                                        libraryTarget: 'var',
                                        pathinfo: true,
                                        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                        hotUpdateMainFilename: '[hash].hot-update.json',
                                        crossOriginLoading: false,
                                        jsonpScriptType: false,
                                        chunkLoadTimeout: 120000,
                                        hashFunction: 'md4',
                                        hashDigest: 'hex',
                                        hashDigestLength: 20,
                                        devtoolLineToLine: false,
                                        strictModuleExceptionHandling: false },
                                     optimization:
                                      { runtimeChunk: { name: [Function: name] },
                                        moduleIds: 'hashed',
                                        splitChunks:
                                         { hidePathInfo: true,
                                           chunks: 'initial',
                                           maxSize: 200000,
                                           cacheGroups:
                                            { default: false,
                                              vendors:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors',
                                                 priority: 19,
                                                 enforce: true,
                                                 minSize: 30000 },
                                              vendorsAsync:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors.async',
                                                 chunks: 'async',
                                                 priority: 9,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 },
                                              commonsAsync:
                                               { name: 'commons.async',
                                                 minChunks: 2,
                                                 chunks: 'async',
                                                 priority: 0,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 } },
                                           minSize: 10000,
                                           minChunks: 1,
                                           maxAsyncRequests: Infinity,
                                           automaticNameDelimiter: '~',
                                           maxInitialRequests: Infinity,
                                           name: true },
                                        removeAvailableModules: true,
                                        removeEmptyChunks: true,
                                        mergeDuplicateChunks: true,
                                        flagIncludedChunks: false,
                                        occurrenceOrder: false,
                                        sideEffects: false,
                                        providedExports: true,
                                        usedExports: false,
                                        concatenateModules: false,
                                        noEmitOnErrors: false,
                                        checkWasmTypes: false,
                                        mangleWasmImports: false,
                                        namedModules: true,
                                        hashedModuleIds: false,
                                        namedChunks: true,
                                        portableRecords: false,
                                        minimize: false,
                                        minimizer: [ { apply: [Function: apply] } ],
                                        nodeEnv: 'development' },
                                     performance:
                                      { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                     devServer:
                                      { contentBase: 'C:\\temp\\au-ionic\\dist',
                                        historyApiFallback: true },
                                     devtool: 'cheap-module-eval-source-map',
                                     module:
                                      { rules:
                                         [ { test: /\.css$/i,
                                             issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                             use: [ 'style-loader', { loader: 'css-loader' } ] },
                                           { test: /\.css$/i,
                                             issuer: [ { test: /\.html$/i } ],
                                             use: [ { loader: 'css-loader' } ] },
                                           { test: /\.less$/i,
                                             use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                             issuer: /\.[tj]s$/i },
                                           { test: /\.less$/i,
                                             use: [ 'css-loader', 'less-loader' ],
                                             issuer: /\.html?$/i },
                                           { test: /\.html$/i, loader: 'html-loader' },
                                           { test: /\.ts$/, loader: 'ts-loader' },
                                           { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                             loader: 'expose-loader?Promise' },
                                           { test: /\.(png|gif|jpg|cur)$/i,
                                             loader: 'url-loader',
                                             options: { limit: 8192 } },
                                           { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                           { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff' } },
                                           { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'file-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                        unknownContextRequest: '.',
                                        unknownContextRegExp: false,
                                        unknownContextRecursive: true,
                                        unknownContextCritical: true,
                                        exprContextRequest: '.',
                                        exprContextRegExp: false,
                                        exprContextRecursive: true,
                                        exprContextCritical: true,
                                        wrappedContextRegExp: /.*/,
                                        wrappedContextRecursive: true,
                                        wrappedContextCritical: false,
                                        strictExportPresence: false,
                                        strictThisContextOnImports: false,
                                        unsafeCache: true,
                                        defaultRules:
                                         [ { type: 'javascript/auto', resolve: {} },
                                           { test: /\.mjs$/i,
                                             type: 'javascript/esm',
                                             resolve: { mainFields: [ 'browser', 'main' ] } },
                                           { test: /\.json$/i, type: 'json' },
                                           { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                     plugins:
                                      [ DuplicatePackageCheckerPlugin {
                                          options:
                                           { verbose: false,
                                             showHelp: true,
                                             emitError: false,
                                             exclude: null,
                                             strict: true } },
                                        AureliaPlugin {
                                          options:
                                           { includeAll: false,
                                             aureliaConfig:
                                              [ 'defaultBindingLanguage',
                                                'defaultResources',
                                                'eventAggregator',
                                                'history',
                                                'router',
                                                'developmentLogging' ],
                                             dist: 'native-modules',
                                             features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                             moduleMethods: [],
                                             noHtmlLoader: false,
                                             noInlineView: false,
                                             noModulePathResolve: false,
                                             noWebpackLoader: false,
                                             viewsFor: '**/!(tslib)*.{ts,js}',
                                             viewsExtensions: '.html',
                                             aureliaApp: 'main' } },
                                        ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                        ModuleDependenciesPlugin {
                                          root: 'C:\\temp\\au-ionic',
                                          hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                        HtmlWebpackPlugin {
                                          options:
                                           { template:
                                              'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                             templateParameters: [Function: templateParametersGenerator],
                                             filename: 'index.html',
                                             hash: false,
                                             inject: true,
                                             compile: true,
                                             favicon: false,
                                             minify: undefined,
                                             cache: true,
                                             showErrors: true,
                                             chunks: 'all',
                                             excludeChunks: [],
                                             chunksSortMode: 'auto',
                                             meta: {},
                                             title: 'Webpack App',
                                             xhtml: false,
                                             metadata:
                                              { title: 'Aurelia Navigation Skeleton',
                                                server: true,
                                                baseUrl: '/' } } },
                                        { apply: [Function: apply] } ],
                                     cache: true,
                                     context: 'C:\\temp\\au-ionic',
                                     target: 'web',
                                     node:
                                      { console: false,
                                        process: true,
                                        global: true,
                                        Buffer: true,
                                        setImmediate: true,
                                        __filename: 'mock',
                                        __dirname: 'mock' },
                                     resolveLoader:
                                      { unsafeCache: true,
                                        mainFields: [ 'loader', 'main' ],
                                        extensions: [ '.js', '.json' ],
                                        mainFiles: [ 'index' ],
                                        cacheWithContext: false,
                                        alias:
                                         { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                           async: 'bundle-loader' } } },
                                  context: 'C:\\temp\\au-ionic',
                                  requestShortener:
                                   RequestShortener {
                                     currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                     parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                     buildinsAsModule: true,
                                     buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                     cache: Map {} },
                                  running: true,
                                  watchMode: true,
                                  _assetEmittingSourceCache: WeakMap { <items unknown> },
                                  _assetEmittingWrittenFiles: Map {},
                                  watchFileSystem:
                                   NodeWatchFileSystem {
                                     inputFileSystem:
                                      CachedInputFileSystem {
                                        fileSystem: NodeJsInputFileSystem {},
                                        _statStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readdirStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readFileStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [Timeout],
                                              _idleNext: [TimersList],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 128,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readJsonStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map {
                                              'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                { name: 'au-ionic',
                                                  description: 'An Aurelia client application.',
                                                  version: '0.1.0',
                                                  repository: { type: '???', url: '???' },
                                                  scripts: {},
                                                  license: 'MIT',
                                                  dependencies:
                                                   { '@ionic/core': '^4.1.1',
                                                     'aurelia-animator-css': '^1.0.4',
                                                     'aurelia-bootstrapper': '^2.3.0',
                                                     'aurelia-polyfills': '^1.3.0',
                                                     bluebird: '^3.5.2' },
                                                  peerDependencies: {},
                                                  devDependencies:
                                                   { '@stencil/webpack': '0.0.6',
                                                     '@types/bluebird': '^3.5.24',
                                                     '@types/lodash': '^4.14.117',
                                                     '@types/node': '^10.11.6',
                                                     '@types/webpack': '^4.4.15',
                                                     'aurelia-cli': '^1.0.0-beta.13',
                                                     'aurelia-testing': '^1.0.0',
                                                     'aurelia-tools': '^2.0.0',
                                                     'aurelia-webpack-plugin': '^3.0.0',
                                                     'copy-webpack-plugin': '^4.5.2',
                                                     'css-loader': '^1.0.0',
                                                     del: '^3.0.0',
                                                     'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                     'expose-loader': '^0.7.5',
                                                     'file-loader': '^2.0.0',
                                                     gulp: '^4.0.0',
                                                     'gulp-rename': '^1.4.0',
                                                     'html-loader': '^0.5.5',
                                                     'html-webpack-plugin': '^3.2.0',
                                                     'istanbul-instrumenter-loader': '^3.0.1',
                                                     'json-loader': '^0.5.7',
                                                     less: 'latest',
                                                     'less-loader': 'latest',
                                                     'mini-css-extract-plugin': '^0.4.3',
                                                     minimatch: '^3.0.4',
                                                     opn: '^5.4.0',
                                                     'style-loader': '^0.23.1',
                                                     through2: '^2.0.3',
                                                     'ts-loader': '^5.2.1',
                                                     'ts-node': '^7.0.1',
                                                     typescript: '^3.1.2',
                                                     'url-loader': '^1.1.1',
                                                     'vinyl-fs': '^3.0.3',
                                                     webpack: '^4.27.0',
                                                     'webpack-bundle-analyzer': 'latest',
                                                     'webpack-cli': '^3.1.2',
                                                     'webpack-dev-server': '^3.1.9' },
                                                  engines: { node: '>= 6.0.0' },
                                                  main: 'dist/app.bundle.js' } ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [TimersList],
                                              _idleNext: [Timeout],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 129,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readlinkStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _stat: [Function: bound bound ],
                                        _statSync: [Function: bound bound ],
                                        _readdir: [Function: bound readdir],
                                        _readdirSync: [Function: bound readdirSync],
                                        _readFile: [Function: bound bound readFile],
                                        _readFileSync: [Function: bound bound readFileSync],
                                        _readJson: [Function],
                                        _readJsonSync: [Function],
                                        _readlink: [Function: bound bound readlink],
                                        _readlinkSync: [Function: bound bound readlinkSync] },
                                     watcherOptions: { aggregateTimeout: 200 },
                                     watcher:
                                      EventEmitter {
                                        domain:
                                         Domain {
                                           domain: null,
                                           _events:
                                            [Object: null prototype] {
                                              removeListener: [Function: updateExceptionCapture],
                                              newListener: [Function: updateExceptionCapture] },
                                           _eventsCount: 2,
                                           _maxListeners: undefined,
                                           members: [] },
                                        _events: [Object: null prototype] {},
                                        _eventsCount: 0,
                                        _maxListeners: undefined,
                                        options: { aggregateTimeout: 200 },
                                        watcherOptions: { ignored: undefined, poll: undefined },
                                        fileWatchers: [],
                                        dirWatchers: [],
                                        mtimes: [Object: null prototype] {},
                                        paused: false,
                                        aggregatedChanges: [],
                                        aggregatedRemovals: [],
                                        aggregateTimeout: 0,
                                        _onTimeout: [Function: bound _onTimeout] } },
                                  dependencies: undefined },
                               running: true },
                            forceRebuild: false,
                            log:
                             LogLevel {
                               type: 'LogLevel',
                               options:
                                { name: 'wdm',
                                  level: 'info',
                                  prefix:
                                   { level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  factory: null,
                                  unique: true,
                                  timestamp: false },
                               methodFactory:
                                PrefixFactory {
                                  options:
                                   { name: [Function: name],
                                     time: [Function: time],
                                     level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  [Symbol(levels)]:
                                   { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
                                  [Symbol(instance)]: [Circular] },
                               name: 'wdm',
                               currentLevel: 2,
                               trace: [Function: noop],
                               debug: [Function: noop],
                               info: [Function],
                               warn: [Function],
                               error: [Function],
                               log: [Function: noop] },
                            rebuild: [Function: rebuild],
                            fs: MemoryFileSystem { data: {} } },
                         fileSystem: MemoryFileSystem { data: {} },
                         getFilenameFromUrl: [Function: bound getFilenameFromUrl],
                         invalidate: [Function: invalidate],
                         waitUntilValid: [Function: waitUntilValid] },
                      name: 'middleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: serveStatic],
                              name: 'serveStatic',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle:
                       { [Function: middleware]
                         close: [Function: close],
                         context:
                          { state: false,
                            webpackStats: null,
                            callbacks: [],
                            options:
                             { logLevel: 'info',
                               logTime: false,
                               logger: null,
                               mimeTypes: null,
                               reporter: [Function: reporter],
                               stats:
                                { colors:
                                   { supportsColor: [Function: getSupportLevel],
                                     stdout: false,
                                     stderr: { level: 3, hasBasic: true, has256: true, has16m: true } } },
                               watchOptions: { aggregateTimeout: 200 },
                               writeToDisk: false,
                               host: 'localhost',
                               publicPath: '/',
                               filename: '[name].[hash].bundle.js',
                               hot: false,
                               port: 8080,
                               contentBase: 'C:\\temp\\au-ionic\\dist',
                               historyApiFallback: true,
                               open: false,
                               https: undefined },
                            compiler:
                             Compiler {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { shouldEmit:
                                   SyncBailHook {
                                     _args: [ 'compilation' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  done:
                                   AsyncSeriesHook {
                                     _args: [ 'stats' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: done],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  additionalPass:
                                   AsyncSeriesHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  beforeRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  run:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  emit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async',
                                          fn: [Function],
                                          name: 'DuplicatePackageCheckerPlugin' },
                                        { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterEmit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  thisCompilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FetchCompileWasmTemplatePlugin' },
                                        { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  compilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Aurelia:PreserveModuleName' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                        { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                        { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EvalSourceMapDevToolPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WebAssemblyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                        { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EnsureChunkConditionsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'RemoveParentModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'MergeDuplicateChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FlagDependencyExportsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'OccurrenceOrderChunkIdsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WarnCaseSensitiveModulesPlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  normalModuleFactory:
                                   SyncHook {
                                     _args: [ 'normalModuleFactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  contextModuleFactory:
                                   SyncHook {
                                     _args: [ 'contextModulefactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  beforeCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' },
                                        { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  compile:
                                   SyncHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  make:
                                   AsyncParallelHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  failed:
                                   SyncHook {
                                     _args: [ 'error' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  invalid:
                                   SyncHook {
                                     _args: [ 'filename', 'changeTime' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchClose:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  environment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterEnvironment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterPlugins:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterResolvers:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function], [Function] ] },
                                  entryOption:
                                   SyncBailHook {
                                     _args: [ 'context', 'entry' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function] ] } },
                               name: undefined,
                               parentCompilation: undefined,
                               outputPath: 'C:\\temp\\au-ionic\\dist',
                               outputFileSystem: MemoryFileSystem { data: {} },
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               recordsInputPath: undefined,
                               recordsOutputPath: undefined,
                               records: {},
                               removedFiles: Set {},
                               fileTimestamps: Map {},
                               contextTimestamps: Map {},
                               resolverFactory:
                                ResolverFactory {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { resolveOptions:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [ [Function] ] },
                                           'context' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                           'loader' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined } },
                                        _factory: [Function],
                                        _interceptors: [] },
                                     resolver:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncHook {
                                             _args: [ 'resolver', 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ] } },
                                        _factory: [Function],
                                        _interceptors: [] } },
                                  cache1: WeakMap { <items unknown> },
                                  cache2:
                                   Map {
                                     'normal|{}' => Resolver {
                                       _pluginCompat:
                                        SyncBailHook {
                                          _args: [ 'options' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                             { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable camelCase',
                                               stage: 100 },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable this.hooks',
                                               stage: 200 } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       fileSystem:
                                        CachedInputFileSystem {
                                          fileSystem: NodeJsInputFileSystem {},
                                          _statStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readdirStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readFileStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [Timeout],
                                                _idleNext: [TimersList],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 128,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readJsonStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map {
                                                'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  { name: 'au-ionic',
                                                    description: 'An Aurelia client application.',
                                                    version: '0.1.0',
                                                    repository: { type: '???', url: '???' },
                                                    scripts: {},
                                                    license: 'MIT',
                                                    dependencies:
                                                     { '@ionic/core': '^4.1.1',
                                                       'aurelia-animator-css': '^1.0.4',
                                                       'aurelia-bootstrapper': '^2.3.0',
                                                       'aurelia-polyfills': '^1.3.0',
                                                       bluebird: '^3.5.2' },
                                                    peerDependencies: {},
                                                    devDependencies:
                                                     { '@stencil/webpack': '0.0.6',
                                                       '@types/bluebird': '^3.5.24',
                                                       '@types/lodash': '^4.14.117',
                                                       '@types/node': '^10.11.6',
                                                       '@types/webpack': '^4.4.15',
                                                       'aurelia-cli': '^1.0.0-beta.13',
                                                       'aurelia-testing': '^1.0.0',
                                                       'aurelia-tools': '^2.0.0',
                                                       'aurelia-webpack-plugin': '^3.0.0',
                                                       'copy-webpack-plugin': '^4.5.2',
                                                       'css-loader': '^1.0.0',
                                                       del: '^3.0.0',
                                                       'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                       'expose-loader': '^0.7.5',
                                                       'file-loader': '^2.0.0',
                                                       gulp: '^4.0.0',
                                                       'gulp-rename': '^1.4.0',
                                                       'html-loader': '^0.5.5',
                                                       'html-webpack-plugin': '^3.2.0',
                                                       'istanbul-instrumenter-loader': '^3.0.1',
                                                       'json-loader': '^0.5.7',
                                                       less: 'latest',
                                                       'less-loader': 'latest',
                                                       'mini-css-extract-plugin': '^0.4.3',
                                                       minimatch: '^3.0.4',
                                                       opn: '^5.4.0',
                                                       'style-loader': '^0.23.1',
                                                       through2: '^2.0.3',
                                                       'ts-loader': '^5.2.1',
                                                       'ts-node': '^7.0.1',
                                                       typescript: '^3.1.2',
                                                       'url-loader': '^1.1.1',
                                                       'vinyl-fs': '^3.0.3',
                                                       webpack: '^4.27.0',
                                                       'webpack-bundle-analyzer': 'latest',
                                                       'webpack-cli': '^3.1.2',
                                                       'webpack-dev-server': '^3.1.9' },
                                                    engines: { node: '>= 6.0.0' },
                                                    main: 'dist/app.bundle.js' } ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [TimersList],
                                                _idleNext: [Timeout],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 129,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readlinkStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _stat: [Function: bound bound ],
                                          _statSync: [Function: bound bound ],
                                          _readdir: [Function: bound readdir],
                                          _readdirSync: [Function: bound readdirSync],
                                          _readFile: [Function: bound bound readFile],
                                          _readFileSync: [Function: bound bound readFileSync],
                                          _readJson: [Function],
                                          _readJsonSync: [Function],
                                          _readlink: [Function: bound bound readlink],
                                          _readlinkSync: [Function: bound bound readlinkSync] },
                                       hooks:
                                        { resolveStep:
                                           SyncHook {
                                             _args: [ 'hook', 'request' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [],
                                             name: 'resolveStep' },
                                          noResolve:
                                           SyncHook {
                                             _args: [ 'request', 'error' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'noResolve' },
                                          resolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'Aurelia:SubFolder' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'resolve' },
                                          result:
                                           AsyncSeriesHook {
                                             _args: [ 'result', 'resolveContext' ],
                                             taps: [],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          parsedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'parsedResolve' },
                                          describedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async',
                                                  fn: [Function],
                                                  stage: -10,
                                                  name: 'Aurelia:Dist' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'ModuleKindPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'JoinRequestPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ],
                                             name: 'describedResolve' },
                                          rawModule:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'rawModule' },
                                          module:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'module' },
                                          relative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'relative' },
                                          describedRelative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'describedRelative' },
                                          directory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'directory' },
                                          existingDirectory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingDirectory' },
                                          undescribedRawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'undescribedRawFile' },
                                          rawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'rawFile' },
                                          file:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'file' },
                                          existingFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingFile' },
                                          resolved:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'resolved' },
                                          newResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'newResolve' } },
                                       withOptions: [Function] } } },
                               resolvers:
                                { normal:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  loader:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  context:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] } },
                               options:
                                { resolve:
                                   { extensions: [ '.ts', '.js' ],
                                     modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                     alias:
                                      { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                     unsafeCache: true,
                                     mainFiles: [ 'index' ],
                                     aliasFields: [ 'browser' ],
                                     mainFields: [ 'browser', 'module', 'main' ],
                                     cacheWithContext: false,
                                     plugins:
                                      [ DistPlugin { dist: '/dist/native-modules/' },
                                        SubFolderPlugin {} ] },
                                  entry:
                                   { app:
                                      [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'webpack-dev-server/client',
                                        'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'aurelia-bootstrapper' ] },
                                  mode: 'development',
                                  output:
                                   { path: 'C:\\temp\\au-ionic\\dist',
                                     publicPath: '/',
                                     filename: '[name].[hash].bundle.js',
                                     sourceMapFilename: '[name].[hash].bundle.map',
                                     chunkFilename: '[name].[hash].chunk.js',
                                     webassemblyModuleFilename: '[modulehash].module.wasm',
                                     library: '',
                                     hotUpdateFunction: 'webpackHotUpdate',
                                     jsonpFunction: 'webpackJsonp',
                                     chunkCallbackName: 'webpackChunk',
                                     globalObject: 'window',
                                     devtoolNamespace: '',
                                     libraryTarget: 'var',
                                     pathinfo: true,
                                     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                     hotUpdateMainFilename: '[hash].hot-update.json',
                                     crossOriginLoading: false,
                                     jsonpScriptType: false,
                                     chunkLoadTimeout: 120000,
                                     hashFunction: 'md4',
                                     hashDigest: 'hex',
                                     hashDigestLength: 20,
                                     devtoolLineToLine: false,
                                     strictModuleExceptionHandling: false },
                                  optimization:
                                   { runtimeChunk: { name: [Function: name] },
                                     moduleIds: 'hashed',
                                     splitChunks:
                                      { hidePathInfo: true,
                                        chunks: 'initial',
                                        maxSize: 200000,
                                        cacheGroups:
                                         { default: false,
                                           vendors:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors',
                                              priority: 19,
                                              enforce: true,
                                              minSize: 30000 },
                                           vendorsAsync:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors.async',
                                              chunks: 'async',
                                              priority: 9,
                                              reuseExistingChunk: true,
                                              minSize: 10000 },
                                           commonsAsync:
                                            { name: 'commons.async',
                                              minChunks: 2,
                                              chunks: 'async',
                                              priority: 0,
                                              reuseExistingChunk: true,
                                              minSize: 10000 } },
                                        minSize: 10000,
                                        minChunks: 1,
                                        maxAsyncRequests: Infinity,
                                        automaticNameDelimiter: '~',
                                        maxInitialRequests: Infinity,
                                        name: true },
                                     removeAvailableModules: true,
                                     removeEmptyChunks: true,
                                     mergeDuplicateChunks: true,
                                     flagIncludedChunks: false,
                                     occurrenceOrder: false,
                                     sideEffects: false,
                                     providedExports: true,
                                     usedExports: false,
                                     concatenateModules: false,
                                     noEmitOnErrors: false,
                                     checkWasmTypes: false,
                                     mangleWasmImports: false,
                                     namedModules: true,
                                     hashedModuleIds: false,
                                     namedChunks: true,
                                     portableRecords: false,
                                     minimize: false,
                                     minimizer: [ { apply: [Function: apply] } ],
                                     nodeEnv: 'development' },
                                  performance:
                                   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                  devServer:
                                   { contentBase: 'C:\\temp\\au-ionic\\dist',
                                     historyApiFallback: true },
                                  devtool: 'cheap-module-eval-source-map',
                                  module:
                                   { rules:
                                      [ { test: /\.css$/i,
                                          issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                          use: [ 'style-loader', { loader: 'css-loader' } ] },
                                        { test: /\.css$/i,
                                          issuer: [ { test: /\.html$/i } ],
                                          use: [ { loader: 'css-loader' } ] },
                                        { test: /\.less$/i,
                                          use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                          issuer: /\.[tj]s$/i },
                                        { test: /\.less$/i,
                                          use: [ 'css-loader', 'less-loader' ],
                                          issuer: /\.html?$/i },
                                        { test: /\.html$/i, loader: 'html-loader' },
                                        { test: /\.ts$/, loader: 'ts-loader' },
                                        { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                          loader: 'expose-loader?Promise' },
                                        { test: /\.(png|gif|jpg|cur)$/i,
                                          loader: 'url-loader',
                                          options: { limit: 8192 } },
                                        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff' } },
                                        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'file-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                     unknownContextRequest: '.',
                                     unknownContextRegExp: false,
                                     unknownContextRecursive: true,
                                     unknownContextCritical: true,
                                     exprContextRequest: '.',
                                     exprContextRegExp: false,
                                     exprContextRecursive: true,
                                     exprContextCritical: true,
                                     wrappedContextRegExp: /.*/,
                                     wrappedContextRecursive: true,
                                     wrappedContextCritical: false,
                                     strictExportPresence: false,
                                     strictThisContextOnImports: false,
                                     unsafeCache: true,
                                     defaultRules:
                                      [ { type: 'javascript/auto', resolve: {} },
                                        { test: /\.mjs$/i,
                                          type: 'javascript/esm',
                                          resolve: { mainFields: [ 'browser', 'main' ] } },
                                        { test: /\.json$/i, type: 'json' },
                                        { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                  plugins:
                                   [ DuplicatePackageCheckerPlugin {
                                       options:
                                        { verbose: false,
                                          showHelp: true,
                                          emitError: false,
                                          exclude: null,
                                          strict: true } },
                                     AureliaPlugin {
                                       options:
                                        { includeAll: false,
                                          aureliaConfig:
                                           [ 'defaultBindingLanguage',
                                             'defaultResources',
                                             'eventAggregator',
                                             'history',
                                             'router',
                                             'developmentLogging' ],
                                          dist: 'native-modules',
                                          features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                          moduleMethods: [],
                                          noHtmlLoader: false,
                                          noInlineView: false,
                                          noModulePathResolve: false,
                                          noWebpackLoader: false,
                                          viewsFor: '**/!(tslib)*.{ts,js}',
                                          viewsExtensions: '.html',
                                          aureliaApp: 'main' } },
                                     ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                     ModuleDependenciesPlugin {
                                       root: 'C:\\temp\\au-ionic',
                                       hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                     HtmlWebpackPlugin {
                                       options:
                                        { template:
                                           'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                          templateParameters: [Function: templateParametersGenerator],
                                          filename: 'index.html',
                                          hash: false,
                                          inject: true,
                                          compile: true,
                                          favicon: false,
                                          minify: undefined,
                                          cache: true,
                                          showErrors: true,
                                          chunks: 'all',
                                          excludeChunks: [],
                                          chunksSortMode: 'auto',
                                          meta: {},
                                          title: 'Webpack App',
                                          xhtml: false,
                                          metadata:
                                           { title: 'Aurelia Navigation Skeleton',
                                             server: true,
                                             baseUrl: '/' } } },
                                     { apply: [Function: apply] } ],
                                  cache: true,
                                  context: 'C:\\temp\\au-ionic',
                                  target: 'web',
                                  node:
                                   { console: false,
                                     process: true,
                                     global: true,
                                     Buffer: true,
                                     setImmediate: true,
                                     __filename: 'mock',
                                     __dirname: 'mock' },
                                  resolveLoader:
                                   { unsafeCache: true,
                                     mainFields: [ 'loader', 'main' ],
                                     extensions: [ '.js', '.json' ],
                                     mainFiles: [ 'index' ],
                                     cacheWithContext: false,
                                     alias:
                                      { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                        async: 'bundle-loader' } } },
                               context: 'C:\\temp\\au-ionic',
                               requestShortener:
                                RequestShortener {
                                  currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                  parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                  buildinsAsModule: true,
                                  buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                  cache: Map {} },
                               running: true,
                               watchMode: true,
                               _assetEmittingSourceCache: WeakMap { <items unknown> },
                               _assetEmittingWrittenFiles: Map {},
                               watchFileSystem:
                                NodeWatchFileSystem {
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  watcherOptions: { aggregateTimeout: 200 },
                                  watcher:
                                   EventEmitter {
                                     domain:
                                      Domain {
                                        domain: null,
                                        _events:
                                         [Object: null prototype] {
                                           removeListener: [Function: updateExceptionCapture],
                                           newListener: [Function: updateExceptionCapture] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        members: [] },
                                     _events: [Object: null prototype] {},
                                     _eventsCount: 0,
                                     _maxListeners: undefined,
                                     options: { aggregateTimeout: 200 },
                                     watcherOptions: { ignored: undefined, poll: undefined },
                                     fileWatchers: [],
                                     dirWatchers: [],
                                     mtimes: [Object: null prototype] {},
                                     paused: false,
                                     aggregatedChanges: [],
                                     aggregatedRemovals: [],
                                     aggregateTimeout: 0,
                                     _onTimeout: [Function: bound _onTimeout] } },
                               dependencies: undefined },
                            watching:
                             Watching {
                               startTime: 1552894199049,
                               invalid: false,
                               handler: [Function],
                               callbacks: [],
                               closed: false,
                               watchOptions: { aggregateTimeout: 200 },
                               compiler:
                                Compiler {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { shouldEmit:
                                      SyncBailHook {
                                        _args: [ 'compilation' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     done:
                                      AsyncSeriesHook {
                                        _args: [ 'stats' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: done],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     additionalPass:
                                      AsyncSeriesHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     beforeRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     run:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     emit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async',
                                             fn: [Function],
                                             name: 'DuplicatePackageCheckerPlugin' },
                                           { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterEmit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     thisCompilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FetchCompileWasmTemplatePlugin' },
                                           { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     compilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Aurelia:PreserveModuleName' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                           { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                           { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EvalSourceMapDevToolPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WebAssemblyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                           { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EnsureChunkConditionsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'RemoveParentModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'MergeDuplicateChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FlagDependencyExportsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'OccurrenceOrderChunkIdsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WarnCaseSensitiveModulesPlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     normalModuleFactory:
                                      SyncHook {
                                        _args: [ 'normalModuleFactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     contextModuleFactory:
                                      SyncHook {
                                        _args: [ 'contextModulefactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     beforeCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' },
                                           { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     compile:
                                      SyncHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     make:
                                      AsyncParallelHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     failed:
                                      SyncHook {
                                        _args: [ 'error' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     invalid:
                                      SyncHook {
                                        _args: [ 'filename', 'changeTime' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchClose:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     environment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterEnvironment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterPlugins:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterResolvers:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function], [Function] ] },
                                     entryOption:
                                      SyncBailHook {
                                        _args: [ 'context', 'entry' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function] ] } },
                                  name: undefined,
                                  parentCompilation: undefined,
                                  outputPath: 'C:\\temp\\au-ionic\\dist',
                                  outputFileSystem: MemoryFileSystem { data: {} },
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  recordsInputPath: undefined,
                                  recordsOutputPath: undefined,
                                  records: {},
                                  removedFiles: Set {},
                                  fileTimestamps: Map {},
                                  contextTimestamps: Map {},
                                  resolverFactory:
                                   ResolverFactory {
                                     _pluginCompat:
                                      SyncBailHook {
                                        _args: [ 'options' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable camelCase',
                                             stage: 100 },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable this.hooks',
                                             stage: 200 } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     hooks:
                                      { resolveOptions:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [ [Function] ] },
                                              'context' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                              'loader' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined } },
                                           _factory: [Function],
                                           _interceptors: [] },
                                        resolver:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncHook {
                                                _args: [ 'resolver', 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ] } },
                                           _factory: [Function],
                                           _interceptors: [] } },
                                     cache1: WeakMap { <items unknown> },
                                     cache2:
                                      Map {
                                        'normal|{}' => Resolver {
                                          _pluginCompat:
                                           SyncBailHook {
                                             _args: [ 'options' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                                { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable camelCase',
                                                  stage: 100 },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable this.hooks',
                                                  stage: 200 } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          fileSystem:
                                           CachedInputFileSystem {
                                             fileSystem: NodeJsInputFileSystem {},
                                             _statStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readdirStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readFileStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [Timeout],
                                                   _idleNext: [TimersList],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 128,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readJsonStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     { name: 'au-ionic',
                                                       description: 'An Aurelia client application.',
                                                       version: '0.1.0',
                                                       repository: { type: '???', url: '???' },
                                                       scripts: {},
                                                       license: 'MIT',
                                                       dependencies:
                                                        { '@ionic/core': '^4.1.1',
                                                          'aurelia-animator-css': '^1.0.4',
                                                          'aurelia-bootstrapper': '^2.3.0',
                                                          'aurelia-polyfills': '^1.3.0',
                                                          bluebird: '^3.5.2' },
                                                       peerDependencies: {},
                                                       devDependencies:
                                                        { '@stencil/webpack': '0.0.6',
                                                          '@types/bluebird': '^3.5.24',
                                                          '@types/lodash': '^4.14.117',
                                                          '@types/node': '^10.11.6',
                                                          '@types/webpack': '^4.4.15',
                                                          'aurelia-cli': '^1.0.0-beta.13',
                                                          'aurelia-testing': '^1.0.0',
                                                          'aurelia-tools': '^2.0.0',
                                                          'aurelia-webpack-plugin': '^3.0.0',
                                                          'copy-webpack-plugin': '^4.5.2',
                                                          'css-loader': '^1.0.0',
                                                          del: '^3.0.0',
                                                          'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                          'expose-loader': '^0.7.5',
                                                          'file-loader': '^2.0.0',
                                                          gulp: '^4.0.0',
                                                          'gulp-rename': '^1.4.0',
                                                          'html-loader': '^0.5.5',
                                                          'html-webpack-plugin': '^3.2.0',
                                                          'istanbul-instrumenter-loader': '^3.0.1',
                                                          'json-loader': '^0.5.7',
                                                          less: 'latest',
                                                          'less-loader': 'latest',
                                                          'mini-css-extract-plugin': '^0.4.3',
                                                          minimatch: '^3.0.4',
                                                          opn: '^5.4.0',
                                                          'style-loader': '^0.23.1',
                                                          through2: '^2.0.3',
                                                          'ts-loader': '^5.2.1',
                                                          'ts-node': '^7.0.1',
                                                          typescript: '^3.1.2',
                                                          'url-loader': '^1.1.1',
                                                          'vinyl-fs': '^3.0.3',
                                                          webpack: '^4.27.0',
                                                          'webpack-bundle-analyzer': 'latest',
                                                          'webpack-cli': '^3.1.2',
                                                          'webpack-dev-server': '^3.1.9' },
                                                       engines: { node: '>= 6.0.0' },
                                                       main: 'dist/app.bundle.js' } ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [TimersList],
                                                   _idleNext: [Timeout],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 129,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readlinkStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _stat: [Function: bound bound ],
                                             _statSync: [Function: bound bound ],
                                             _readdir: [Function: bound readdir],
                                             _readdirSync: [Function: bound readdirSync],
                                             _readFile: [Function: bound bound readFile],
                                             _readFileSync: [Function: bound bound readFileSync],
                                             _readJson: [Function],
                                             _readJsonSync: [Function],
                                             _readlink: [Function: bound bound readlink],
                                             _readlinkSync: [Function: bound bound readlinkSync] },
                                          hooks:
                                           { resolveStep:
                                              SyncHook {
                                                _args: [ 'hook', 'request' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [],
                                                name: 'resolveStep' },
                                             noResolve:
                                              SyncHook {
                                                _args: [ 'request', 'error' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'noResolve' },
                                             resolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'Aurelia:SubFolder' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'resolve' },
                                             result:
                                              AsyncSeriesHook {
                                                _args: [ 'result', 'resolveContext' ],
                                                taps: [],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                             parsedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'parsedResolve' },
                                             describedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async',
                                                     fn: [Function],
                                                     stage: -10,
                                                     name: 'Aurelia:Dist' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'ModuleKindPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'JoinRequestPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ],
                                                name: 'describedResolve' },
                                             rawModule:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'rawModule' },
                                             module:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'module' },
                                             relative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'relative' },
                                             describedRelative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                   { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'describedRelative' },
                                             directory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'directory' },
                                             existingDirectory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingDirectory' },
                                             undescribedRawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'undescribedRawFile' },
                                             rawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'rawFile' },
                                             file:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                   { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'file' },
                                             existingFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingFile' },
                                             resolved:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'resolved' },
                                             newResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'newResolve' } },
                                          withOptions: [Function] } } },
                                  resolvers:
                                   { normal:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     loader:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     context:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] } },
                                  options:
                                   { resolve:
                                      { extensions: [ '.ts', '.js' ],
                                        modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                        alias:
                                         { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                        unsafeCache: true,
                                        mainFiles: [ 'index' ],
                                        aliasFields: [ 'browser' ],
                                        mainFields: [ 'browser', 'module', 'main' ],
                                        cacheWithContext: false,
                                        plugins:
                                         [ DistPlugin { dist: '/dist/native-modules/' },
                                           SubFolderPlugin {} ] },
                                     entry:
                                      { app:
                                         [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'webpack-dev-server/client',
                                           'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'aurelia-bootstrapper' ] },
                                     mode: 'development',
                                     output:
                                      { path: 'C:\\temp\\au-ionic\\dist',
                                        publicPath: '/',
                                        filename: '[name].[hash].bundle.js',
                                        sourceMapFilename: '[name].[hash].bundle.map',
                                        chunkFilename: '[name].[hash].chunk.js',
                                        webassemblyModuleFilename: '[modulehash].module.wasm',
                                        library: '',
                                        hotUpdateFunction: 'webpackHotUpdate',
                                        jsonpFunction: 'webpackJsonp',
                                        chunkCallbackName: 'webpackChunk',
                                        globalObject: 'window',
                                        devtoolNamespace: '',
                                        libraryTarget: 'var',
                                        pathinfo: true,
                                        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                        hotUpdateMainFilename: '[hash].hot-update.json',
                                        crossOriginLoading: false,
                                        jsonpScriptType: false,
                                        chunkLoadTimeout: 120000,
                                        hashFunction: 'md4',
                                        hashDigest: 'hex',
                                        hashDigestLength: 20,
                                        devtoolLineToLine: false,
                                        strictModuleExceptionHandling: false },
                                     optimization:
                                      { runtimeChunk: { name: [Function: name] },
                                        moduleIds: 'hashed',
                                        splitChunks:
                                         { hidePathInfo: true,
                                           chunks: 'initial',
                                           maxSize: 200000,
                                           cacheGroups:
                                            { default: false,
                                              vendors:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors',
                                                 priority: 19,
                                                 enforce: true,
                                                 minSize: 30000 },
                                              vendorsAsync:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors.async',
                                                 chunks: 'async',
                                                 priority: 9,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 },
                                              commonsAsync:
                                               { name: 'commons.async',
                                                 minChunks: 2,
                                                 chunks: 'async',
                                                 priority: 0,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 } },
                                           minSize: 10000,
                                           minChunks: 1,
                                           maxAsyncRequests: Infinity,
                                           automaticNameDelimiter: '~',
                                           maxInitialRequests: Infinity,
                                           name: true },
                                        removeAvailableModules: true,
                                        removeEmptyChunks: true,
                                        mergeDuplicateChunks: true,
                                        flagIncludedChunks: false,
                                        occurrenceOrder: false,
                                        sideEffects: false,
                                        providedExports: true,
                                        usedExports: false,
                                        concatenateModules: false,
                                        noEmitOnErrors: false,
                                        checkWasmTypes: false,
                                        mangleWasmImports: false,
                                        namedModules: true,
                                        hashedModuleIds: false,
                                        namedChunks: true,
                                        portableRecords: false,
                                        minimize: false,
                                        minimizer: [ { apply: [Function: apply] } ],
                                        nodeEnv: 'development' },
                                     performance:
                                      { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                     devServer:
                                      { contentBase: 'C:\\temp\\au-ionic\\dist',
                                        historyApiFallback: true },
                                     devtool: 'cheap-module-eval-source-map',
                                     module:
                                      { rules:
                                         [ { test: /\.css$/i,
                                             issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                             use: [ 'style-loader', { loader: 'css-loader' } ] },
                                           { test: /\.css$/i,
                                             issuer: [ { test: /\.html$/i } ],
                                             use: [ { loader: 'css-loader' } ] },
                                           { test: /\.less$/i,
                                             use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                             issuer: /\.[tj]s$/i },
                                           { test: /\.less$/i,
                                             use: [ 'css-loader', 'less-loader' ],
                                             issuer: /\.html?$/i },
                                           { test: /\.html$/i, loader: 'html-loader' },
                                           { test: /\.ts$/, loader: 'ts-loader' },
                                           { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                             loader: 'expose-loader?Promise' },
                                           { test: /\.(png|gif|jpg|cur)$/i,
                                             loader: 'url-loader',
                                             options: { limit: 8192 } },
                                           { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                           { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff' } },
                                           { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'file-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                        unknownContextRequest: '.',
                                        unknownContextRegExp: false,
                                        unknownContextRecursive: true,
                                        unknownContextCritical: true,
                                        exprContextRequest: '.',
                                        exprContextRegExp: false,
                                        exprContextRecursive: true,
                                        exprContextCritical: true,
                                        wrappedContextRegExp: /.*/,
                                        wrappedContextRecursive: true,
                                        wrappedContextCritical: false,
                                        strictExportPresence: false,
                                        strictThisContextOnImports: false,
                                        unsafeCache: true,
                                        defaultRules:
                                         [ { type: 'javascript/auto', resolve: {} },
                                           { test: /\.mjs$/i,
                                             type: 'javascript/esm',
                                             resolve: { mainFields: [ 'browser', 'main' ] } },
                                           { test: /\.json$/i, type: 'json' },
                                           { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                     plugins:
                                      [ DuplicatePackageCheckerPlugin {
                                          options:
                                           { verbose: false,
                                             showHelp: true,
                                             emitError: false,
                                             exclude: null,
                                             strict: true } },
                                        AureliaPlugin {
                                          options:
                                           { includeAll: false,
                                             aureliaConfig:
                                              [ 'defaultBindingLanguage',
                                                'defaultResources',
                                                'eventAggregator',
                                                'history',
                                                'router',
                                                'developmentLogging' ],
                                             dist: 'native-modules',
                                             features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                             moduleMethods: [],
                                             noHtmlLoader: false,
                                             noInlineView: false,
                                             noModulePathResolve: false,
                                             noWebpackLoader: false,
                                             viewsFor: '**/!(tslib)*.{ts,js}',
                                             viewsExtensions: '.html',
                                             aureliaApp: 'main' } },
                                        ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                        ModuleDependenciesPlugin {
                                          root: 'C:\\temp\\au-ionic',
                                          hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                        HtmlWebpackPlugin {
                                          options:
                                           { template:
                                              'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                             templateParameters: [Function: templateParametersGenerator],
                                             filename: 'index.html',
                                             hash: false,
                                             inject: true,
                                             compile: true,
                                             favicon: false,
                                             minify: undefined,
                                             cache: true,
                                             showErrors: true,
                                             chunks: 'all',
                                             excludeChunks: [],
                                             chunksSortMode: 'auto',
                                             meta: {},
                                             title: 'Webpack App',
                                             xhtml: false,
                                             metadata:
                                              { title: 'Aurelia Navigation Skeleton',
                                                server: true,
                                                baseUrl: '/' } } },
                                        { apply: [Function: apply] } ],
                                     cache: true,
                                     context: 'C:\\temp\\au-ionic',
                                     target: 'web',
                                     node:
                                      { console: false,
                                        process: true,
                                        global: true,
                                        Buffer: true,
                                        setImmediate: true,
                                        __filename: 'mock',
                                        __dirname: 'mock' },
                                     resolveLoader:
                                      { unsafeCache: true,
                                        mainFields: [ 'loader', 'main' ],
                                        extensions: [ '.js', '.json' ],
                                        mainFiles: [ 'index' ],
                                        cacheWithContext: false,
                                        alias:
                                         { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                           async: 'bundle-loader' } } },
                                  context: 'C:\\temp\\au-ionic',
                                  requestShortener:
                                   RequestShortener {
                                     currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                     parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                     buildinsAsModule: true,
                                     buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                     cache: Map {} },
                                  running: true,
                                  watchMode: true,
                                  _assetEmittingSourceCache: WeakMap { <items unknown> },
                                  _assetEmittingWrittenFiles: Map {},
                                  watchFileSystem:
                                   NodeWatchFileSystem {
                                     inputFileSystem:
                                      CachedInputFileSystem {
                                        fileSystem: NodeJsInputFileSystem {},
                                        _statStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readdirStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readFileStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [Timeout],
                                              _idleNext: [TimersList],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 128,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readJsonStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map {
                                              'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                { name: 'au-ionic',
                                                  description: 'An Aurelia client application.',
                                                  version: '0.1.0',
                                                  repository: { type: '???', url: '???' },
                                                  scripts: {},
                                                  license: 'MIT',
                                                  dependencies:
                                                   { '@ionic/core': '^4.1.1',
                                                     'aurelia-animator-css': '^1.0.4',
                                                     'aurelia-bootstrapper': '^2.3.0',
                                                     'aurelia-polyfills': '^1.3.0',
                                                     bluebird: '^3.5.2' },
                                                  peerDependencies: {},
                                                  devDependencies:
                                                   { '@stencil/webpack': '0.0.6',
                                                     '@types/bluebird': '^3.5.24',
                                                     '@types/lodash': '^4.14.117',
                                                     '@types/node': '^10.11.6',
                                                     '@types/webpack': '^4.4.15',
                                                     'aurelia-cli': '^1.0.0-beta.13',
                                                     'aurelia-testing': '^1.0.0',
                                                     'aurelia-tools': '^2.0.0',
                                                     'aurelia-webpack-plugin': '^3.0.0',
                                                     'copy-webpack-plugin': '^4.5.2',
                                                     'css-loader': '^1.0.0',
                                                     del: '^3.0.0',
                                                     'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                     'expose-loader': '^0.7.5',
                                                     'file-loader': '^2.0.0',
                                                     gulp: '^4.0.0',
                                                     'gulp-rename': '^1.4.0',
                                                     'html-loader': '^0.5.5',
                                                     'html-webpack-plugin': '^3.2.0',
                                                     'istanbul-instrumenter-loader': '^3.0.1',
                                                     'json-loader': '^0.5.7',
                                                     less: 'latest',
                                                     'less-loader': 'latest',
                                                     'mini-css-extract-plugin': '^0.4.3',
                                                     minimatch: '^3.0.4',
                                                     opn: '^5.4.0',
                                                     'style-loader': '^0.23.1',
                                                     through2: '^2.0.3',
                                                     'ts-loader': '^5.2.1',
                                                     'ts-node': '^7.0.1',
                                                     typescript: '^3.1.2',
                                                     'url-loader': '^1.1.1',
                                                     'vinyl-fs': '^3.0.3',
                                                     webpack: '^4.27.0',
                                                     'webpack-bundle-analyzer': 'latest',
                                                     'webpack-cli': '^3.1.2',
                                                     'webpack-dev-server': '^3.1.9' },
                                                  engines: { node: '>= 6.0.0' },
                                                  main: 'dist/app.bundle.js' } ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [TimersList],
                                              _idleNext: [Timeout],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 129,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readlinkStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _stat: [Function: bound bound ],
                                        _statSync: [Function: bound bound ],
                                        _readdir: [Function: bound readdir],
                                        _readdirSync: [Function: bound readdirSync],
                                        _readFile: [Function: bound bound readFile],
                                        _readFileSync: [Function: bound bound readFileSync],
                                        _readJson: [Function],
                                        _readJsonSync: [Function],
                                        _readlink: [Function: bound bound readlink],
                                        _readlinkSync: [Function: bound bound readlinkSync] },
                                     watcherOptions: { aggregateTimeout: 200 },
                                     watcher:
                                      EventEmitter {
                                        domain:
                                         Domain {
                                           domain: null,
                                           _events:
                                            [Object: null prototype] {
                                              removeListener: [Function: updateExceptionCapture],
                                              newListener: [Function: updateExceptionCapture] },
                                           _eventsCount: 2,
                                           _maxListeners: undefined,
                                           members: [] },
                                        _events: [Object: null prototype] {},
                                        _eventsCount: 0,
                                        _maxListeners: undefined,
                                        options: { aggregateTimeout: 200 },
                                        watcherOptions: { ignored: undefined, poll: undefined },
                                        fileWatchers: [],
                                        dirWatchers: [],
                                        mtimes: [Object: null prototype] {},
                                        paused: false,
                                        aggregatedChanges: [],
                                        aggregatedRemovals: [],
                                        aggregateTimeout: 0,
                                        _onTimeout: [Function: bound _onTimeout] } },
                                  dependencies: undefined },
                               running: true },
                            forceRebuild: false,
                            log:
                             LogLevel {
                               type: 'LogLevel',
                               options:
                                { name: 'wdm',
                                  level: 'info',
                                  prefix:
                                   { level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  factory: null,
                                  unique: true,
                                  timestamp: false },
                               methodFactory:
                                PrefixFactory {
                                  options:
                                   { name: [Function: name],
                                     time: [Function: time],
                                     level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  [Symbol(levels)]:
                                   { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
                                  [Symbol(instance)]: [Circular] },
                               name: 'wdm',
                               currentLevel: 2,
                               trace: [Function: noop],
                               debug: [Function: noop],
                               info: [Function],
                               warn: [Function],
                               error: [Function],
                               log: [Function: noop] },
                            rebuild: [Function: rebuild],
                            fs: MemoryFileSystem { data: {} } },
                         fileSystem: MemoryFileSystem { data: {} },
                         getFilenameFromUrl: [Function: bound getFilenameFromUrl],
                         invalidate: [Function: invalidate],
                         waitUntilValid: [Function: waitUntilValid] },
                      name: 'middleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: serveStatic],
                              name: 'serveStatic',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: bound serveMagicHtml],
                              name: 'bound serveMagicHtml',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } } ] } },
           connection: [ [Function: connectionListener], [Function] ],
           listening: { [Function: bound onceWrapper] listener: [Function] } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 0,
        _handle: null,
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        kill: [Function],
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 131 },
     domain:
      Domain {
        domain: null,
        _events:
         [Object: null prototype] {
           removeListener: [Function: updateExceptionCapture],
           newListener: [Function: updateExceptionCapture] },
        _eventsCount: 2,
        _maxListeners: undefined,
        members: [] },
     domainThrown: false },
  duration: [ 0, 49947600 ],
  time: 1552894199080 }
{ uid: 0,
  name: '<series>',
  branch: true,
  error:
   { Error: listen EADDRINUSE: address already in use 127.0.0.1:8080
       at Server.setupListenHandle [as _listen2] (net.js:1294:14)
       at listenInCluster (net.js:1342:12)
       at GetAddrInfoReqWrap.doListen [as callback] (net.js:1480:7)
       at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:63:10)
     code: 'EADDRINUSE',
     errno: 'EADDRINUSE',
     syscall: 'listen',
     address: '127.0.0.1',
     port: 8080,
     domainEmitter:
      Server {
        domain:
         Domain {
           domain: null,
           _events:
            [Object: null prototype] {
              removeListener: [Function: updateExceptionCapture],
              newListener: [Function: updateExceptionCapture] },
           _eventsCount: 2,
           _maxListeners: undefined,
           members: [] },
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: 'C:\\temp\\au-ionic\\views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\temp\\au-ionic\\views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'acl' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'bind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'checkout' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'connect' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'copy' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'delete' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'head' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'link' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'lock' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'm-search' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'merge' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkactivity' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcalendar' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcol' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'move' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'notify' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'options' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'patch' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'propfind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'proppatch' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'purge' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'put' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'rebind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'report' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'search' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'source' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'subscribe' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'trace' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unbind' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlink' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlock' },
                            Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unsubscribe' } ],
                         methods:
                          { acl: true,
                            bind: true,
                            checkout: true,
                            connect: true,
                            copy: true,
                            delete: true,
                            get: true,
                            head: true,
                            link: true,
                            lock: true,
                            'm-search': true,
                            merge: true,
                            mkactivity: true,
                            mkcalendar: true,
                            mkcol: true,
                            move: true,
                            notify: true,
                            options: true,
                            patch: true,
                            post: true,
                            propfind: true,
                            proppatch: true,
                            purge: true,
                            put: true,
                            rebind: true,
                            report: true,
                            search: true,
                            source: true,
                            subscribe: true,
                            trace: true,
                            unbind: true,
                            unlink: true,
                            unlock: true,
                            unsubscribe: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/__webpack_dev_server__\/live\.bundle\.js\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/__webpack_dev_server__/live.bundle.js',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/__webpack_dev_server__\/sockjs\.bundle\.js\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/__webpack_dev_server__/sockjs.bundle.js',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/webpack-dev-server\.js\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/webpack-dev-server.js',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 23 } ],
                      regexp:
                       { /^\/webpack-dev-server\/(.*)\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/webpack-dev-server/*',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/webpack-dev-server\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/webpack-dev-server',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'acl' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'bind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'checkout' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'connect' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'copy' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'delete' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'head' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'link' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'lock' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'm-search' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'merge' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkactivity' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcalendar' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'mkcol' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'move' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'notify' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'options' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'patch' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'propfind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'proppatch' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'purge' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'put' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'rebind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'report' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'search' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'source' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'subscribe' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'trace' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unbind' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlink' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unlock' },
                            Layer {
                              handle: [Function: bound setContentHeaders],
                              name: 'bound setContentHeaders',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'unsubscribe' } ],
                         methods:
                          { acl: true,
                            bind: true,
                            checkout: true,
                            connect: true,
                            copy: true,
                            delete: true,
                            get: true,
                            head: true,
                            link: true,
                            lock: true,
                            'm-search': true,
                            merge: true,
                            mkactivity: true,
                            mkcalendar: true,
                            mkcol: true,
                            move: true,
                            notify: true,
                            options: true,
                            patch: true,
                            post: true,
                            propfind: true,
                            proppatch: true,
                            purge: true,
                            put: true,
                            rebind: true,
                            report: true,
                            search: true,
                            source: true,
                            subscribe: true,
                            trace: true,
                            unbind: true,
                            unlink: true,
                            unlock: true,
                            unsubscribe: true } } },
                    Layer {
                      handle:
                       { [Function: middleware]
                         close: [Function: close],
                         context:
                          { state: false,
                            webpackStats: null,
                            callbacks: [],
                            options:
                             { logLevel: 'info',
                               logTime: false,
                               logger: null,
                               mimeTypes: null,
                               reporter: [Function: reporter],
                               stats:
                                { colors:
                                   { supportsColor: [Function: getSupportLevel],
                                     stdout: false,
                                     stderr: { level: 3, hasBasic: true, has256: true, has16m: true } } },
                               watchOptions: { aggregateTimeout: 200 },
                               writeToDisk: false,
                               host: 'localhost',
                               publicPath: '/',
                               filename: '[name].[hash].bundle.js',
                               hot: false,
                               port: 8080,
                               contentBase: 'C:\\temp\\au-ionic\\dist',
                               historyApiFallback: true,
                               open: false,
                               https: undefined },
                            compiler:
                             Compiler {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { shouldEmit:
                                   SyncBailHook {
                                     _args: [ 'compilation' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  done:
                                   AsyncSeriesHook {
                                     _args: [ 'stats' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: done],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  additionalPass:
                                   AsyncSeriesHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  beforeRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  run:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  emit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async',
                                          fn: [Function],
                                          name: 'DuplicatePackageCheckerPlugin' },
                                        { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterEmit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  thisCompilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FetchCompileWasmTemplatePlugin' },
                                        { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  compilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Aurelia:PreserveModuleName' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                        { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                        { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EvalSourceMapDevToolPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WebAssemblyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                        { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EnsureChunkConditionsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'RemoveParentModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'MergeDuplicateChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FlagDependencyExportsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'OccurrenceOrderChunkIdsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WarnCaseSensitiveModulesPlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  normalModuleFactory:
                                   SyncHook {
                                     _args: [ 'normalModuleFactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  contextModuleFactory:
                                   SyncHook {
                                     _args: [ 'contextModulefactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  beforeCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' },
                                        { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  compile:
                                   SyncHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  make:
                                   AsyncParallelHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  failed:
                                   SyncHook {
                                     _args: [ 'error' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  invalid:
                                   SyncHook {
                                     _args: [ 'filename', 'changeTime' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchClose:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  environment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterEnvironment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterPlugins:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterResolvers:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function], [Function] ] },
                                  entryOption:
                                   SyncBailHook {
                                     _args: [ 'context', 'entry' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function] ] } },
                               name: undefined,
                               parentCompilation: undefined,
                               outputPath: 'C:\\temp\\au-ionic\\dist',
                               outputFileSystem: MemoryFileSystem { data: {} },
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               recordsInputPath: undefined,
                               recordsOutputPath: undefined,
                               records: {},
                               removedFiles: Set {},
                               fileTimestamps: Map {},
                               contextTimestamps: Map {},
                               resolverFactory:
                                ResolverFactory {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { resolveOptions:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [ [Function] ] },
                                           'context' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                           'loader' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined } },
                                        _factory: [Function],
                                        _interceptors: [] },
                                     resolver:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncHook {
                                             _args: [ 'resolver', 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ] } },
                                        _factory: [Function],
                                        _interceptors: [] } },
                                  cache1: WeakMap { <items unknown> },
                                  cache2:
                                   Map {
                                     'normal|{}' => Resolver {
                                       _pluginCompat:
                                        SyncBailHook {
                                          _args: [ 'options' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                             { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable camelCase',
                                               stage: 100 },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable this.hooks',
                                               stage: 200 } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       fileSystem:
                                        CachedInputFileSystem {
                                          fileSystem: NodeJsInputFileSystem {},
                                          _statStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readdirStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readFileStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [Timeout],
                                                _idleNext: [TimersList],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 128,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readJsonStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map {
                                                'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  { name: 'au-ionic',
                                                    description: 'An Aurelia client application.',
                                                    version: '0.1.0',
                                                    repository: { type: '???', url: '???' },
                                                    scripts: {},
                                                    license: 'MIT',
                                                    dependencies:
                                                     { '@ionic/core': '^4.1.1',
                                                       'aurelia-animator-css': '^1.0.4',
                                                       'aurelia-bootstrapper': '^2.3.0',
                                                       'aurelia-polyfills': '^1.3.0',
                                                       bluebird: '^3.5.2' },
                                                    peerDependencies: {},
                                                    devDependencies:
                                                     { '@stencil/webpack': '0.0.6',
                                                       '@types/bluebird': '^3.5.24',
                                                       '@types/lodash': '^4.14.117',
                                                       '@types/node': '^10.11.6',
                                                       '@types/webpack': '^4.4.15',
                                                       'aurelia-cli': '^1.0.0-beta.13',
                                                       'aurelia-testing': '^1.0.0',
                                                       'aurelia-tools': '^2.0.0',
                                                       'aurelia-webpack-plugin': '^3.0.0',
                                                       'copy-webpack-plugin': '^4.5.2',
                                                       'css-loader': '^1.0.0',
                                                       del: '^3.0.0',
                                                       'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                       'expose-loader': '^0.7.5',
                                                       'file-loader': '^2.0.0',
                                                       gulp: '^4.0.0',
                                                       'gulp-rename': '^1.4.0',
                                                       'html-loader': '^0.5.5',
                                                       'html-webpack-plugin': '^3.2.0',
                                                       'istanbul-instrumenter-loader': '^3.0.1',
                                                       'json-loader': '^0.5.7',
                                                       less: 'latest',
                                                       'less-loader': 'latest',
                                                       'mini-css-extract-plugin': '^0.4.3',
                                                       minimatch: '^3.0.4',
                                                       opn: '^5.4.0',
                                                       'style-loader': '^0.23.1',
                                                       through2: '^2.0.3',
                                                       'ts-loader': '^5.2.1',
                                                       'ts-node': '^7.0.1',
                                                       typescript: '^3.1.2',
                                                       'url-loader': '^1.1.1',
                                                       'vinyl-fs': '^3.0.3',
                                                       webpack: '^4.27.0',
                                                       'webpack-bundle-analyzer': 'latest',
                                                       'webpack-cli': '^3.1.2',
                                                       'webpack-dev-server': '^3.1.9' },
                                                    engines: { node: '>= 6.0.0' },
                                                    main: 'dist/app.bundle.js' } ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [TimersList],
                                                _idleNext: [Timeout],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 129,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readlinkStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _stat: [Function: bound bound ],
                                          _statSync: [Function: bound bound ],
                                          _readdir: [Function: bound readdir],
                                          _readdirSync: [Function: bound readdirSync],
                                          _readFile: [Function: bound bound readFile],
                                          _readFileSync: [Function: bound bound readFileSync],
                                          _readJson: [Function],
                                          _readJsonSync: [Function],
                                          _readlink: [Function: bound bound readlink],
                                          _readlinkSync: [Function: bound bound readlinkSync] },
                                       hooks:
                                        { resolveStep:
                                           SyncHook {
                                             _args: [ 'hook', 'request' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [],
                                             name: 'resolveStep' },
                                          noResolve:
                                           SyncHook {
                                             _args: [ 'request', 'error' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'noResolve' },
                                          resolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'Aurelia:SubFolder' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'resolve' },
                                          result:
                                           AsyncSeriesHook {
                                             _args: [ 'result', 'resolveContext' ],
                                             taps: [],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          parsedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'parsedResolve' },
                                          describedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async',
                                                  fn: [Function],
                                                  stage: -10,
                                                  name: 'Aurelia:Dist' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'ModuleKindPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'JoinRequestPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ],
                                             name: 'describedResolve' },
                                          rawModule:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'rawModule' },
                                          module:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'module' },
                                          relative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'relative' },
                                          describedRelative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'describedRelative' },
                                          directory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'directory' },
                                          existingDirectory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingDirectory' },
                                          undescribedRawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'undescribedRawFile' },
                                          rawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'rawFile' },
                                          file:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'file' },
                                          existingFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingFile' },
                                          resolved:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'resolved' },
                                          newResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'newResolve' } },
                                       withOptions: [Function] } } },
                               resolvers:
                                { normal:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  loader:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  context:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] } },
                               options:
                                { resolve:
                                   { extensions: [ '.ts', '.js' ],
                                     modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                     alias:
                                      { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                     unsafeCache: true,
                                     mainFiles: [ 'index' ],
                                     aliasFields: [ 'browser' ],
                                     mainFields: [ 'browser', 'module', 'main' ],
                                     cacheWithContext: false,
                                     plugins:
                                      [ DistPlugin { dist: '/dist/native-modules/' },
                                        SubFolderPlugin {} ] },
                                  entry:
                                   { app:
                                      [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'webpack-dev-server/client',
                                        'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'aurelia-bootstrapper' ] },
                                  mode: 'development',
                                  output:
                                   { path: 'C:\\temp\\au-ionic\\dist',
                                     publicPath: '/',
                                     filename: '[name].[hash].bundle.js',
                                     sourceMapFilename: '[name].[hash].bundle.map',
                                     chunkFilename: '[name].[hash].chunk.js',
                                     webassemblyModuleFilename: '[modulehash].module.wasm',
                                     library: '',
                                     hotUpdateFunction: 'webpackHotUpdate',
                                     jsonpFunction: 'webpackJsonp',
                                     chunkCallbackName: 'webpackChunk',
                                     globalObject: 'window',
                                     devtoolNamespace: '',
                                     libraryTarget: 'var',
                                     pathinfo: true,
                                     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                     hotUpdateMainFilename: '[hash].hot-update.json',
                                     crossOriginLoading: false,
                                     jsonpScriptType: false,
                                     chunkLoadTimeout: 120000,
                                     hashFunction: 'md4',
                                     hashDigest: 'hex',
                                     hashDigestLength: 20,
                                     devtoolLineToLine: false,
                                     strictModuleExceptionHandling: false },
                                  optimization:
                                   { runtimeChunk: { name: [Function: name] },
                                     moduleIds: 'hashed',
                                     splitChunks:
                                      { hidePathInfo: true,
                                        chunks: 'initial',
                                        maxSize: 200000,
                                        cacheGroups:
                                         { default: false,
                                           vendors:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors',
                                              priority: 19,
                                              enforce: true,
                                              minSize: 30000 },
                                           vendorsAsync:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors.async',
                                              chunks: 'async',
                                              priority: 9,
                                              reuseExistingChunk: true,
                                              minSize: 10000 },
                                           commonsAsync:
                                            { name: 'commons.async',
                                              minChunks: 2,
                                              chunks: 'async',
                                              priority: 0,
                                              reuseExistingChunk: true,
                                              minSize: 10000 } },
                                        minSize: 10000,
                                        minChunks: 1,
                                        maxAsyncRequests: Infinity,
                                        automaticNameDelimiter: '~',
                                        maxInitialRequests: Infinity,
                                        name: true },
                                     removeAvailableModules: true,
                                     removeEmptyChunks: true,
                                     mergeDuplicateChunks: true,
                                     flagIncludedChunks: false,
                                     occurrenceOrder: false,
                                     sideEffects: false,
                                     providedExports: true,
                                     usedExports: false,
                                     concatenateModules: false,
                                     noEmitOnErrors: false,
                                     checkWasmTypes: false,
                                     mangleWasmImports: false,
                                     namedModules: true,
                                     hashedModuleIds: false,
                                     namedChunks: true,
                                     portableRecords: false,
                                     minimize: false,
                                     minimizer: [ { apply: [Function: apply] } ],
                                     nodeEnv: 'development' },
                                  performance:
                                   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                  devServer:
                                   { contentBase: 'C:\\temp\\au-ionic\\dist',
                                     historyApiFallback: true },
                                  devtool: 'cheap-module-eval-source-map',
                                  module:
                                   { rules:
                                      [ { test: /\.css$/i,
                                          issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                          use: [ 'style-loader', { loader: 'css-loader' } ] },
                                        { test: /\.css$/i,
                                          issuer: [ { test: /\.html$/i } ],
                                          use: [ { loader: 'css-loader' } ] },
                                        { test: /\.less$/i,
                                          use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                          issuer: /\.[tj]s$/i },
                                        { test: /\.less$/i,
                                          use: [ 'css-loader', 'less-loader' ],
                                          issuer: /\.html?$/i },
                                        { test: /\.html$/i, loader: 'html-loader' },
                                        { test: /\.ts$/, loader: 'ts-loader' },
                                        { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                          loader: 'expose-loader?Promise' },
                                        { test: /\.(png|gif|jpg|cur)$/i,
                                          loader: 'url-loader',
                                          options: { limit: 8192 } },
                                        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff' } },
                                        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'file-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                     unknownContextRequest: '.',
                                     unknownContextRegExp: false,
                                     unknownContextRecursive: true,
                                     unknownContextCritical: true,
                                     exprContextRequest: '.',
                                     exprContextRegExp: false,
                                     exprContextRecursive: true,
                                     exprContextCritical: true,
                                     wrappedContextRegExp: /.*/,
                                     wrappedContextRecursive: true,
                                     wrappedContextCritical: false,
                                     strictExportPresence: false,
                                     strictThisContextOnImports: false,
                                     unsafeCache: true,
                                     defaultRules:
                                      [ { type: 'javascript/auto', resolve: {} },
                                        { test: /\.mjs$/i,
                                          type: 'javascript/esm',
                                          resolve: { mainFields: [ 'browser', 'main' ] } },
                                        { test: /\.json$/i, type: 'json' },
                                        { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                  plugins:
                                   [ DuplicatePackageCheckerPlugin {
                                       options:
                                        { verbose: false,
                                          showHelp: true,
                                          emitError: false,
                                          exclude: null,
                                          strict: true } },
                                     AureliaPlugin {
                                       options:
                                        { includeAll: false,
                                          aureliaConfig:
                                           [ 'defaultBindingLanguage',
                                             'defaultResources',
                                             'eventAggregator',
                                             'history',
                                             'router',
                                             'developmentLogging' ],
                                          dist: 'native-modules',
                                          features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                          moduleMethods: [],
                                          noHtmlLoader: false,
                                          noInlineView: false,
                                          noModulePathResolve: false,
                                          noWebpackLoader: false,
                                          viewsFor: '**/!(tslib)*.{ts,js}',
                                          viewsExtensions: '.html',
                                          aureliaApp: 'main' } },
                                     ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                     ModuleDependenciesPlugin {
                                       root: 'C:\\temp\\au-ionic',
                                       hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                     HtmlWebpackPlugin {
                                       options:
                                        { template:
                                           'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                          templateParameters: [Function: templateParametersGenerator],
                                          filename: 'index.html',
                                          hash: false,
                                          inject: true,
                                          compile: true,
                                          favicon: false,
                                          minify: undefined,
                                          cache: true,
                                          showErrors: true,
                                          chunks: 'all',
                                          excludeChunks: [],
                                          chunksSortMode: 'auto',
                                          meta: {},
                                          title: 'Webpack App',
                                          xhtml: false,
                                          metadata:
                                           { title: 'Aurelia Navigation Skeleton',
                                             server: true,
                                             baseUrl: '/' } } },
                                     { apply: [Function: apply] } ],
                                  cache: true,
                                  context: 'C:\\temp\\au-ionic',
                                  target: 'web',
                                  node:
                                   { console: false,
                                     process: true,
                                     global: true,
                                     Buffer: true,
                                     setImmediate: true,
                                     __filename: 'mock',
                                     __dirname: 'mock' },
                                  resolveLoader:
                                   { unsafeCache: true,
                                     mainFields: [ 'loader', 'main' ],
                                     extensions: [ '.js', '.json' ],
                                     mainFiles: [ 'index' ],
                                     cacheWithContext: false,
                                     alias:
                                      { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                        async: 'bundle-loader' } } },
                               context: 'C:\\temp\\au-ionic',
                               requestShortener:
                                RequestShortener {
                                  currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                  parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                  buildinsAsModule: true,
                                  buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                  cache: Map {} },
                               running: true,
                               watchMode: true,
                               _assetEmittingSourceCache: WeakMap { <items unknown> },
                               _assetEmittingWrittenFiles: Map {},
                               watchFileSystem:
                                NodeWatchFileSystem {
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  watcherOptions: { aggregateTimeout: 200 },
                                  watcher:
                                   EventEmitter {
                                     domain:
                                      Domain {
                                        domain: null,
                                        _events:
                                         [Object: null prototype] {
                                           removeListener: [Function: updateExceptionCapture],
                                           newListener: [Function: updateExceptionCapture] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        members: [] },
                                     _events: [Object: null prototype] {},
                                     _eventsCount: 0,
                                     _maxListeners: undefined,
                                     options: { aggregateTimeout: 200 },
                                     watcherOptions: { ignored: undefined, poll: undefined },
                                     fileWatchers: [],
                                     dirWatchers: [],
                                     mtimes: [Object: null prototype] {},
                                     paused: false,
                                     aggregatedChanges: [],
                                     aggregatedRemovals: [],
                                     aggregateTimeout: 0,
                                     _onTimeout: [Function: bound _onTimeout] } },
                               dependencies: undefined },
                            watching:
                             Watching {
                               startTime: 1552894199049,
                               invalid: false,
                               handler: [Function],
                               callbacks: [],
                               closed: false,
                               watchOptions: { aggregateTimeout: 200 },
                               compiler:
                                Compiler {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { shouldEmit:
                                      SyncBailHook {
                                        _args: [ 'compilation' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     done:
                                      AsyncSeriesHook {
                                        _args: [ 'stats' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: done],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     additionalPass:
                                      AsyncSeriesHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     beforeRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     run:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     emit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async',
                                             fn: [Function],
                                             name: 'DuplicatePackageCheckerPlugin' },
                                           { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterEmit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     thisCompilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FetchCompileWasmTemplatePlugin' },
                                           { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     compilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Aurelia:PreserveModuleName' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                           { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                           { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EvalSourceMapDevToolPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WebAssemblyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                           { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EnsureChunkConditionsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'RemoveParentModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'MergeDuplicateChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FlagDependencyExportsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'OccurrenceOrderChunkIdsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WarnCaseSensitiveModulesPlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     normalModuleFactory:
                                      SyncHook {
                                        _args: [ 'normalModuleFactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     contextModuleFactory:
                                      SyncHook {
                                        _args: [ 'contextModulefactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     beforeCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' },
                                           { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     compile:
                                      SyncHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     make:
                                      AsyncParallelHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     failed:
                                      SyncHook {
                                        _args: [ 'error' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     invalid:
                                      SyncHook {
                                        _args: [ 'filename', 'changeTime' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchClose:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     environment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterEnvironment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterPlugins:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterResolvers:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function], [Function] ] },
                                     entryOption:
                                      SyncBailHook {
                                        _args: [ 'context', 'entry' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function] ] } },
                                  name: undefined,
                                  parentCompilation: undefined,
                                  outputPath: 'C:\\temp\\au-ionic\\dist',
                                  outputFileSystem: MemoryFileSystem { data: {} },
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  recordsInputPath: undefined,
                                  recordsOutputPath: undefined,
                                  records: {},
                                  removedFiles: Set {},
                                  fileTimestamps: Map {},
                                  contextTimestamps: Map {},
                                  resolverFactory:
                                   ResolverFactory {
                                     _pluginCompat:
                                      SyncBailHook {
                                        _args: [ 'options' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable camelCase',
                                             stage: 100 },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable this.hooks',
                                             stage: 200 } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     hooks:
                                      { resolveOptions:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [ [Function] ] },
                                              'context' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                              'loader' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined } },
                                           _factory: [Function],
                                           _interceptors: [] },
                                        resolver:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncHook {
                                                _args: [ 'resolver', 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ] } },
                                           _factory: [Function],
                                           _interceptors: [] } },
                                     cache1: WeakMap { <items unknown> },
                                     cache2:
                                      Map {
                                        'normal|{}' => Resolver {
                                          _pluginCompat:
                                           SyncBailHook {
                                             _args: [ 'options' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                                { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable camelCase',
                                                  stage: 100 },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable this.hooks',
                                                  stage: 200 } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          fileSystem:
                                           CachedInputFileSystem {
                                             fileSystem: NodeJsInputFileSystem {},
                                             _statStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readdirStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readFileStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [Timeout],
                                                   _idleNext: [TimersList],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 128,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readJsonStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     { name: 'au-ionic',
                                                       description: 'An Aurelia client application.',
                                                       version: '0.1.0',
                                                       repository: { type: '???', url: '???' },
                                                       scripts: {},
                                                       license: 'MIT',
                                                       dependencies:
                                                        { '@ionic/core': '^4.1.1',
                                                          'aurelia-animator-css': '^1.0.4',
                                                          'aurelia-bootstrapper': '^2.3.0',
                                                          'aurelia-polyfills': '^1.3.0',
                                                          bluebird: '^3.5.2' },
                                                       peerDependencies: {},
                                                       devDependencies:
                                                        { '@stencil/webpack': '0.0.6',
                                                          '@types/bluebird': '^3.5.24',
                                                          '@types/lodash': '^4.14.117',
                                                          '@types/node': '^10.11.6',
                                                          '@types/webpack': '^4.4.15',
                                                          'aurelia-cli': '^1.0.0-beta.13',
                                                          'aurelia-testing': '^1.0.0',
                                                          'aurelia-tools': '^2.0.0',
                                                          'aurelia-webpack-plugin': '^3.0.0',
                                                          'copy-webpack-plugin': '^4.5.2',
                                                          'css-loader': '^1.0.0',
                                                          del: '^3.0.0',
                                                          'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                          'expose-loader': '^0.7.5',
                                                          'file-loader': '^2.0.0',
                                                          gulp: '^4.0.0',
                                                          'gulp-rename': '^1.4.0',
                                                          'html-loader': '^0.5.5',
                                                          'html-webpack-plugin': '^3.2.0',
                                                          'istanbul-instrumenter-loader': '^3.0.1',
                                                          'json-loader': '^0.5.7',
                                                          less: 'latest',
                                                          'less-loader': 'latest',
                                                          'mini-css-extract-plugin': '^0.4.3',
                                                          minimatch: '^3.0.4',
                                                          opn: '^5.4.0',
                                                          'style-loader': '^0.23.1',
                                                          through2: '^2.0.3',
                                                          'ts-loader': '^5.2.1',
                                                          'ts-node': '^7.0.1',
                                                          typescript: '^3.1.2',
                                                          'url-loader': '^1.1.1',
                                                          'vinyl-fs': '^3.0.3',
                                                          webpack: '^4.27.0',
                                                          'webpack-bundle-analyzer': 'latest',
                                                          'webpack-cli': '^3.1.2',
                                                          'webpack-dev-server': '^3.1.9' },
                                                       engines: { node: '>= 6.0.0' },
                                                       main: 'dist/app.bundle.js' } ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [TimersList],
                                                   _idleNext: [Timeout],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 129,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readlinkStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _stat: [Function: bound bound ],
                                             _statSync: [Function: bound bound ],
                                             _readdir: [Function: bound readdir],
                                             _readdirSync: [Function: bound readdirSync],
                                             _readFile: [Function: bound bound readFile],
                                             _readFileSync: [Function: bound bound readFileSync],
                                             _readJson: [Function],
                                             _readJsonSync: [Function],
                                             _readlink: [Function: bound bound readlink],
                                             _readlinkSync: [Function: bound bound readlinkSync] },
                                          hooks:
                                           { resolveStep:
                                              SyncHook {
                                                _args: [ 'hook', 'request' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [],
                                                name: 'resolveStep' },
                                             noResolve:
                                              SyncHook {
                                                _args: [ 'request', 'error' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'noResolve' },
                                             resolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'Aurelia:SubFolder' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'resolve' },
                                             result:
                                              AsyncSeriesHook {
                                                _args: [ 'result', 'resolveContext' ],
                                                taps: [],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                             parsedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'parsedResolve' },
                                             describedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async',
                                                     fn: [Function],
                                                     stage: -10,
                                                     name: 'Aurelia:Dist' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'ModuleKindPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'JoinRequestPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ],
                                                name: 'describedResolve' },
                                             rawModule:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'rawModule' },
                                             module:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'module' },
                                             relative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'relative' },
                                             describedRelative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                   { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'describedRelative' },
                                             directory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'directory' },
                                             existingDirectory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingDirectory' },
                                             undescribedRawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'undescribedRawFile' },
                                             rawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'rawFile' },
                                             file:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                   { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'file' },
                                             existingFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingFile' },
                                             resolved:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'resolved' },
                                             newResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'newResolve' } },
                                          withOptions: [Function] } } },
                                  resolvers:
                                   { normal:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     loader:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     context:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] } },
                                  options:
                                   { resolve:
                                      { extensions: [ '.ts', '.js' ],
                                        modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                        alias:
                                         { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                        unsafeCache: true,
                                        mainFiles: [ 'index' ],
                                        aliasFields: [ 'browser' ],
                                        mainFields: [ 'browser', 'module', 'main' ],
                                        cacheWithContext: false,
                                        plugins:
                                         [ DistPlugin { dist: '/dist/native-modules/' },
                                           SubFolderPlugin {} ] },
                                     entry:
                                      { app:
                                         [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'webpack-dev-server/client',
                                           'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'aurelia-bootstrapper' ] },
                                     mode: 'development',
                                     output:
                                      { path: 'C:\\temp\\au-ionic\\dist',
                                        publicPath: '/',
                                        filename: '[name].[hash].bundle.js',
                                        sourceMapFilename: '[name].[hash].bundle.map',
                                        chunkFilename: '[name].[hash].chunk.js',
                                        webassemblyModuleFilename: '[modulehash].module.wasm',
                                        library: '',
                                        hotUpdateFunction: 'webpackHotUpdate',
                                        jsonpFunction: 'webpackJsonp',
                                        chunkCallbackName: 'webpackChunk',
                                        globalObject: 'window',
                                        devtoolNamespace: '',
                                        libraryTarget: 'var',
                                        pathinfo: true,
                                        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                        hotUpdateMainFilename: '[hash].hot-update.json',
                                        crossOriginLoading: false,
                                        jsonpScriptType: false,
                                        chunkLoadTimeout: 120000,
                                        hashFunction: 'md4',
                                        hashDigest: 'hex',
                                        hashDigestLength: 20,
                                        devtoolLineToLine: false,
                                        strictModuleExceptionHandling: false },
                                     optimization:
                                      { runtimeChunk: { name: [Function: name] },
                                        moduleIds: 'hashed',
                                        splitChunks:
                                         { hidePathInfo: true,
                                           chunks: 'initial',
                                           maxSize: 200000,
                                           cacheGroups:
                                            { default: false,
                                              vendors:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors',
                                                 priority: 19,
                                                 enforce: true,
                                                 minSize: 30000 },
                                              vendorsAsync:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors.async',
                                                 chunks: 'async',
                                                 priority: 9,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 },
                                              commonsAsync:
                                               { name: 'commons.async',
                                                 minChunks: 2,
                                                 chunks: 'async',
                                                 priority: 0,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 } },
                                           minSize: 10000,
                                           minChunks: 1,
                                           maxAsyncRequests: Infinity,
                                           automaticNameDelimiter: '~',
                                           maxInitialRequests: Infinity,
                                           name: true },
                                        removeAvailableModules: true,
                                        removeEmptyChunks: true,
                                        mergeDuplicateChunks: true,
                                        flagIncludedChunks: false,
                                        occurrenceOrder: false,
                                        sideEffects: false,
                                        providedExports: true,
                                        usedExports: false,
                                        concatenateModules: false,
                                        noEmitOnErrors: false,
                                        checkWasmTypes: false,
                                        mangleWasmImports: false,
                                        namedModules: true,
                                        hashedModuleIds: false,
                                        namedChunks: true,
                                        portableRecords: false,
                                        minimize: false,
                                        minimizer: [ { apply: [Function: apply] } ],
                                        nodeEnv: 'development' },
                                     performance:
                                      { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                     devServer:
                                      { contentBase: 'C:\\temp\\au-ionic\\dist',
                                        historyApiFallback: true },
                                     devtool: 'cheap-module-eval-source-map',
                                     module:
                                      { rules:
                                         [ { test: /\.css$/i,
                                             issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                             use: [ 'style-loader', { loader: 'css-loader' } ] },
                                           { test: /\.css$/i,
                                             issuer: [ { test: /\.html$/i } ],
                                             use: [ { loader: 'css-loader' } ] },
                                           { test: /\.less$/i,
                                             use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                             issuer: /\.[tj]s$/i },
                                           { test: /\.less$/i,
                                             use: [ 'css-loader', 'less-loader' ],
                                             issuer: /\.html?$/i },
                                           { test: /\.html$/i, loader: 'html-loader' },
                                           { test: /\.ts$/, loader: 'ts-loader' },
                                           { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                             loader: 'expose-loader?Promise' },
                                           { test: /\.(png|gif|jpg|cur)$/i,
                                             loader: 'url-loader',
                                             options: { limit: 8192 } },
                                           { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                           { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff' } },
                                           { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'file-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                        unknownContextRequest: '.',
                                        unknownContextRegExp: false,
                                        unknownContextRecursive: true,
                                        unknownContextCritical: true,
                                        exprContextRequest: '.',
                                        exprContextRegExp: false,
                                        exprContextRecursive: true,
                                        exprContextCritical: true,
                                        wrappedContextRegExp: /.*/,
                                        wrappedContextRecursive: true,
                                        wrappedContextCritical: false,
                                        strictExportPresence: false,
                                        strictThisContextOnImports: false,
                                        unsafeCache: true,
                                        defaultRules:
                                         [ { type: 'javascript/auto', resolve: {} },
                                           { test: /\.mjs$/i,
                                             type: 'javascript/esm',
                                             resolve: { mainFields: [ 'browser', 'main' ] } },
                                           { test: /\.json$/i, type: 'json' },
                                           { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                     plugins:
                                      [ DuplicatePackageCheckerPlugin {
                                          options:
                                           { verbose: false,
                                             showHelp: true,
                                             emitError: false,
                                             exclude: null,
                                             strict: true } },
                                        AureliaPlugin {
                                          options:
                                           { includeAll: false,
                                             aureliaConfig:
                                              [ 'defaultBindingLanguage',
                                                'defaultResources',
                                                'eventAggregator',
                                                'history',
                                                'router',
                                                'developmentLogging' ],
                                             dist: 'native-modules',
                                             features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                             moduleMethods: [],
                                             noHtmlLoader: false,
                                             noInlineView: false,
                                             noModulePathResolve: false,
                                             noWebpackLoader: false,
                                             viewsFor: '**/!(tslib)*.{ts,js}',
                                             viewsExtensions: '.html',
                                             aureliaApp: 'main' } },
                                        ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                        ModuleDependenciesPlugin {
                                          root: 'C:\\temp\\au-ionic',
                                          hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                        HtmlWebpackPlugin {
                                          options:
                                           { template:
                                              'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                             templateParameters: [Function: templateParametersGenerator],
                                             filename: 'index.html',
                                             hash: false,
                                             inject: true,
                                             compile: true,
                                             favicon: false,
                                             minify: undefined,
                                             cache: true,
                                             showErrors: true,
                                             chunks: 'all',
                                             excludeChunks: [],
                                             chunksSortMode: 'auto',
                                             meta: {},
                                             title: 'Webpack App',
                                             xhtml: false,
                                             metadata:
                                              { title: 'Aurelia Navigation Skeleton',
                                                server: true,
                                                baseUrl: '/' } } },
                                        { apply: [Function: apply] } ],
                                     cache: true,
                                     context: 'C:\\temp\\au-ionic',
                                     target: 'web',
                                     node:
                                      { console: false,
                                        process: true,
                                        global: true,
                                        Buffer: true,
                                        setImmediate: true,
                                        __filename: 'mock',
                                        __dirname: 'mock' },
                                     resolveLoader:
                                      { unsafeCache: true,
                                        mainFields: [ 'loader', 'main' ],
                                        extensions: [ '.js', '.json' ],
                                        mainFiles: [ 'index' ],
                                        cacheWithContext: false,
                                        alias:
                                         { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                           async: 'bundle-loader' } } },
                                  context: 'C:\\temp\\au-ionic',
                                  requestShortener:
                                   RequestShortener {
                                     currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                     parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                     buildinsAsModule: true,
                                     buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                     cache: Map {} },
                                  running: true,
                                  watchMode: true,
                                  _assetEmittingSourceCache: WeakMap { <items unknown> },
                                  _assetEmittingWrittenFiles: Map {},
                                  watchFileSystem:
                                   NodeWatchFileSystem {
                                     inputFileSystem:
                                      CachedInputFileSystem {
                                        fileSystem: NodeJsInputFileSystem {},
                                        _statStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readdirStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readFileStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [Timeout],
                                              _idleNext: [TimersList],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 128,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readJsonStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map {
                                              'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                { name: 'au-ionic',
                                                  description: 'An Aurelia client application.',
                                                  version: '0.1.0',
                                                  repository: { type: '???', url: '???' },
                                                  scripts: {},
                                                  license: 'MIT',
                                                  dependencies:
                                                   { '@ionic/core': '^4.1.1',
                                                     'aurelia-animator-css': '^1.0.4',
                                                     'aurelia-bootstrapper': '^2.3.0',
                                                     'aurelia-polyfills': '^1.3.0',
                                                     bluebird: '^3.5.2' },
                                                  peerDependencies: {},
                                                  devDependencies:
                                                   { '@stencil/webpack': '0.0.6',
                                                     '@types/bluebird': '^3.5.24',
                                                     '@types/lodash': '^4.14.117',
                                                     '@types/node': '^10.11.6',
                                                     '@types/webpack': '^4.4.15',
                                                     'aurelia-cli': '^1.0.0-beta.13',
                                                     'aurelia-testing': '^1.0.0',
                                                     'aurelia-tools': '^2.0.0',
                                                     'aurelia-webpack-plugin': '^3.0.0',
                                                     'copy-webpack-plugin': '^4.5.2',
                                                     'css-loader': '^1.0.0',
                                                     del: '^3.0.0',
                                                     'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                     'expose-loader': '^0.7.5',
                                                     'file-loader': '^2.0.0',
                                                     gulp: '^4.0.0',
                                                     'gulp-rename': '^1.4.0',
                                                     'html-loader': '^0.5.5',
                                                     'html-webpack-plugin': '^3.2.0',
                                                     'istanbul-instrumenter-loader': '^3.0.1',
                                                     'json-loader': '^0.5.7',
                                                     less: 'latest',
                                                     'less-loader': 'latest',
                                                     'mini-css-extract-plugin': '^0.4.3',
                                                     minimatch: '^3.0.4',
                                                     opn: '^5.4.0',
                                                     'style-loader': '^0.23.1',
                                                     through2: '^2.0.3',
                                                     'ts-loader': '^5.2.1',
                                                     'ts-node': '^7.0.1',
                                                     typescript: '^3.1.2',
                                                     'url-loader': '^1.1.1',
                                                     'vinyl-fs': '^3.0.3',
                                                     webpack: '^4.27.0',
                                                     'webpack-bundle-analyzer': 'latest',
                                                     'webpack-cli': '^3.1.2',
                                                     'webpack-dev-server': '^3.1.9' },
                                                  engines: { node: '>= 6.0.0' },
                                                  main: 'dist/app.bundle.js' } ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [TimersList],
                                              _idleNext: [Timeout],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 129,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readlinkStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _stat: [Function: bound bound ],
                                        _statSync: [Function: bound bound ],
                                        _readdir: [Function: bound readdir],
                                        _readdirSync: [Function: bound readdirSync],
                                        _readFile: [Function: bound bound readFile],
                                        _readFileSync: [Function: bound bound readFileSync],
                                        _readJson: [Function],
                                        _readJsonSync: [Function],
                                        _readlink: [Function: bound bound readlink],
                                        _readlinkSync: [Function: bound bound readlinkSync] },
                                     watcherOptions: { aggregateTimeout: 200 },
                                     watcher:
                                      EventEmitter {
                                        domain:
                                         Domain {
                                           domain: null,
                                           _events:
                                            [Object: null prototype] {
                                              removeListener: [Function: updateExceptionCapture],
                                              newListener: [Function: updateExceptionCapture] },
                                           _eventsCount: 2,
                                           _maxListeners: undefined,
                                           members: [] },
                                        _events: [Object: null prototype] {},
                                        _eventsCount: 0,
                                        _maxListeners: undefined,
                                        options: { aggregateTimeout: 200 },
                                        watcherOptions: { ignored: undefined, poll: undefined },
                                        fileWatchers: [],
                                        dirWatchers: [],
                                        mtimes: [Object: null prototype] {},
                                        paused: false,
                                        aggregatedChanges: [],
                                        aggregatedRemovals: [],
                                        aggregateTimeout: 0,
                                        _onTimeout: [Function: bound _onTimeout] } },
                                  dependencies: undefined },
                               running: true },
                            forceRebuild: false,
                            log:
                             LogLevel {
                               type: 'LogLevel',
                               options:
                                { name: 'wdm',
                                  level: 'info',
                                  prefix:
                                   { level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  factory: null,
                                  unique: true,
                                  timestamp: false },
                               methodFactory:
                                PrefixFactory {
                                  options:
                                   { name: [Function: name],
                                     time: [Function: time],
                                     level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  [Symbol(levels)]:
                                   { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
                                  [Symbol(instance)]: [Circular] },
                               name: 'wdm',
                               currentLevel: 2,
                               trace: [Function: noop],
                               debug: [Function: noop],
                               info: [Function],
                               warn: [Function],
                               error: [Function],
                               log: [Function: noop] },
                            rebuild: [Function: rebuild],
                            fs: MemoryFileSystem { data: {} } },
                         fileSystem: MemoryFileSystem { data: {} },
                         getFilenameFromUrl: [Function: bound getFilenameFromUrl],
                         invalidate: [Function: invalidate],
                         waitUntilValid: [Function: waitUntilValid] },
                      name: 'middleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: serveStatic],
                              name: 'serveStatic',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle:
                       { [Function: middleware]
                         close: [Function: close],
                         context:
                          { state: false,
                            webpackStats: null,
                            callbacks: [],
                            options:
                             { logLevel: 'info',
                               logTime: false,
                               logger: null,
                               mimeTypes: null,
                               reporter: [Function: reporter],
                               stats:
                                { colors:
                                   { supportsColor: [Function: getSupportLevel],
                                     stdout: false,
                                     stderr: { level: 3, hasBasic: true, has256: true, has16m: true } } },
                               watchOptions: { aggregateTimeout: 200 },
                               writeToDisk: false,
                               host: 'localhost',
                               publicPath: '/',
                               filename: '[name].[hash].bundle.js',
                               hot: false,
                               port: 8080,
                               contentBase: 'C:\\temp\\au-ionic\\dist',
                               historyApiFallback: true,
                               open: false,
                               https: undefined },
                            compiler:
                             Compiler {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { shouldEmit:
                                   SyncBailHook {
                                     _args: [ 'compilation' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  done:
                                   AsyncSeriesHook {
                                     _args: [ 'stats' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: done],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  additionalPass:
                                   AsyncSeriesHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  beforeRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  run:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  emit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async',
                                          fn: [Function],
                                          name: 'DuplicatePackageCheckerPlugin' },
                                        { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterEmit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  thisCompilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FetchCompileWasmTemplatePlugin' },
                                        { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  compilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Aurelia:PreserveModuleName' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                        { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                        { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EvalSourceMapDevToolPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WebAssemblyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                        { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EnsureChunkConditionsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'RemoveParentModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'MergeDuplicateChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FlagDependencyExportsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'OccurrenceOrderChunkIdsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WarnCaseSensitiveModulesPlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  normalModuleFactory:
                                   SyncHook {
                                     _args: [ 'normalModuleFactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  contextModuleFactory:
                                   SyncHook {
                                     _args: [ 'contextModulefactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  beforeCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' },
                                        { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  compile:
                                   SyncHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  make:
                                   AsyncParallelHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  failed:
                                   SyncHook {
                                     _args: [ 'error' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  invalid:
                                   SyncHook {
                                     _args: [ 'filename', 'changeTime' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchClose:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  environment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterEnvironment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterPlugins:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterResolvers:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function], [Function] ] },
                                  entryOption:
                                   SyncBailHook {
                                     _args: [ 'context', 'entry' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function] ] } },
                               name: undefined,
                               parentCompilation: undefined,
                               outputPath: 'C:\\temp\\au-ionic\\dist',
                               outputFileSystem: MemoryFileSystem { data: {} },
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               recordsInputPath: undefined,
                               recordsOutputPath: undefined,
                               records: {},
                               removedFiles: Set {},
                               fileTimestamps: Map {},
                               contextTimestamps: Map {},
                               resolverFactory:
                                ResolverFactory {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { resolveOptions:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [ [Function] ] },
                                           'context' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                           'loader' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined } },
                                        _factory: [Function],
                                        _interceptors: [] },
                                     resolver:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncHook {
                                             _args: [ 'resolver', 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ] } },
                                        _factory: [Function],
                                        _interceptors: [] } },
                                  cache1: WeakMap { <items unknown> },
                                  cache2:
                                   Map {
                                     'normal|{}' => Resolver {
                                       _pluginCompat:
                                        SyncBailHook {
                                          _args: [ 'options' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                             { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable camelCase',
                                               stage: 100 },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable this.hooks',
                                               stage: 200 } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       fileSystem:
                                        CachedInputFileSystem {
                                          fileSystem: NodeJsInputFileSystem {},
                                          _statStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readdirStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readFileStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [Timeout],
                                                _idleNext: [TimersList],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 128,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readJsonStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map {
                                                'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  { name: 'au-ionic',
                                                    description: 'An Aurelia client application.',
                                                    version: '0.1.0',
                                                    repository: { type: '???', url: '???' },
                                                    scripts: {},
                                                    license: 'MIT',
                                                    dependencies:
                                                     { '@ionic/core': '^4.1.1',
                                                       'aurelia-animator-css': '^1.0.4',
                                                       'aurelia-bootstrapper': '^2.3.0',
                                                       'aurelia-polyfills': '^1.3.0',
                                                       bluebird: '^3.5.2' },
                                                    peerDependencies: {},
                                                    devDependencies:
                                                     { '@stencil/webpack': '0.0.6',
                                                       '@types/bluebird': '^3.5.24',
                                                       '@types/lodash': '^4.14.117',
                                                       '@types/node': '^10.11.6',
                                                       '@types/webpack': '^4.4.15',
                                                       'aurelia-cli': '^1.0.0-beta.13',
                                                       'aurelia-testing': '^1.0.0',
                                                       'aurelia-tools': '^2.0.0',
                                                       'aurelia-webpack-plugin': '^3.0.0',
                                                       'copy-webpack-plugin': '^4.5.2',
                                                       'css-loader': '^1.0.0',
                                                       del: '^3.0.0',
                                                       'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                       'expose-loader': '^0.7.5',
                                                       'file-loader': '^2.0.0',
                                                       gulp: '^4.0.0',
                                                       'gulp-rename': '^1.4.0',
                                                       'html-loader': '^0.5.5',
                                                       'html-webpack-plugin': '^3.2.0',
                                                       'istanbul-instrumenter-loader': '^3.0.1',
                                                       'json-loader': '^0.5.7',
                                                       less: 'latest',
                                                       'less-loader': 'latest',
                                                       'mini-css-extract-plugin': '^0.4.3',
                                                       minimatch: '^3.0.4',
                                                       opn: '^5.4.0',
                                                       'style-loader': '^0.23.1',
                                                       through2: '^2.0.3',
                                                       'ts-loader': '^5.2.1',
                                                       'ts-node': '^7.0.1',
                                                       typescript: '^3.1.2',
                                                       'url-loader': '^1.1.1',
                                                       'vinyl-fs': '^3.0.3',
                                                       webpack: '^4.27.0',
                                                       'webpack-bundle-analyzer': 'latest',
                                                       'webpack-cli': '^3.1.2',
                                                       'webpack-dev-server': '^3.1.9' },
                                                    engines: { node: '>= 6.0.0' },
                                                    main: 'dist/app.bundle.js' } ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [TimersList],
                                                _idleNext: [Timeout],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 129,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readlinkStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _stat: [Function: bound bound ],
                                          _statSync: [Function: bound bound ],
                                          _readdir: [Function: bound readdir],
                                          _readdirSync: [Function: bound readdirSync],
                                          _readFile: [Function: bound bound readFile],
                                          _readFileSync: [Function: bound bound readFileSync],
                                          _readJson: [Function],
                                          _readJsonSync: [Function],
                                          _readlink: [Function: bound bound readlink],
                                          _readlinkSync: [Function: bound bound readlinkSync] },
                                       hooks:
                                        { resolveStep:
                                           SyncHook {
                                             _args: [ 'hook', 'request' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [],
                                             name: 'resolveStep' },
                                          noResolve:
                                           SyncHook {
                                             _args: [ 'request', 'error' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'noResolve' },
                                          resolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'Aurelia:SubFolder' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'resolve' },
                                          result:
                                           AsyncSeriesHook {
                                             _args: [ 'result', 'resolveContext' ],
                                             taps: [],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          parsedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'parsedResolve' },
                                          describedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async',
                                                  fn: [Function],
                                                  stage: -10,
                                                  name: 'Aurelia:Dist' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'ModuleKindPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'JoinRequestPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ],
                                             name: 'describedResolve' },
                                          rawModule:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'rawModule' },
                                          module:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'module' },
                                          relative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'relative' },
                                          describedRelative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'describedRelative' },
                                          directory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'directory' },
                                          existingDirectory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingDirectory' },
                                          undescribedRawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'undescribedRawFile' },
                                          rawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'rawFile' },
                                          file:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'file' },
                                          existingFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingFile' },
                                          resolved:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'resolved' },
                                          newResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'newResolve' } },
                                       withOptions: [Function] } } },
                               resolvers:
                                { normal:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  loader:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  context:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] } },
                               options:
                                { resolve:
                                   { extensions: [ '.ts', '.js' ],
                                     modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                     alias:
                                      { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                     unsafeCache: true,
                                     mainFiles: [ 'index' ],
                                     aliasFields: [ 'browser' ],
                                     mainFields: [ 'browser', 'module', 'main' ],
                                     cacheWithContext: false,
                                     plugins:
                                      [ DistPlugin { dist: '/dist/native-modules/' },
                                        SubFolderPlugin {} ] },
                                  entry:
                                   { app:
                                      [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'webpack-dev-server/client',
                                        'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'aurelia-bootstrapper' ] },
                                  mode: 'development',
                                  output:
                                   { path: 'C:\\temp\\au-ionic\\dist',
                                     publicPath: '/',
                                     filename: '[name].[hash].bundle.js',
                                     sourceMapFilename: '[name].[hash].bundle.map',
                                     chunkFilename: '[name].[hash].chunk.js',
                                     webassemblyModuleFilename: '[modulehash].module.wasm',
                                     library: '',
                                     hotUpdateFunction: 'webpackHotUpdate',
                                     jsonpFunction: 'webpackJsonp',
                                     chunkCallbackName: 'webpackChunk',
                                     globalObject: 'window',
                                     devtoolNamespace: '',
                                     libraryTarget: 'var',
                                     pathinfo: true,
                                     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                     hotUpdateMainFilename: '[hash].hot-update.json',
                                     crossOriginLoading: false,
                                     jsonpScriptType: false,
                                     chunkLoadTimeout: 120000,
                                     hashFunction: 'md4',
                                     hashDigest: 'hex',
                                     hashDigestLength: 20,
                                     devtoolLineToLine: false,
                                     strictModuleExceptionHandling: false },
                                  optimization:
                                   { runtimeChunk: { name: [Function: name] },
                                     moduleIds: 'hashed',
                                     splitChunks:
                                      { hidePathInfo: true,
                                        chunks: 'initial',
                                        maxSize: 200000,
                                        cacheGroups:
                                         { default: false,
                                           vendors:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors',
                                              priority: 19,
                                              enforce: true,
                                              minSize: 30000 },
                                           vendorsAsync:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors.async',
                                              chunks: 'async',
                                              priority: 9,
                                              reuseExistingChunk: true,
                                              minSize: 10000 },
                                           commonsAsync:
                                            { name: 'commons.async',
                                              minChunks: 2,
                                              chunks: 'async',
                                              priority: 0,
                                              reuseExistingChunk: true,
                                              minSize: 10000 } },
                                        minSize: 10000,
                                        minChunks: 1,
                                        maxAsyncRequests: Infinity,
                                        automaticNameDelimiter: '~',
                                        maxInitialRequests: Infinity,
                                        name: true },
                                     removeAvailableModules: true,
                                     removeEmptyChunks: true,
                                     mergeDuplicateChunks: true,
                                     flagIncludedChunks: false,
                                     occurrenceOrder: false,
                                     sideEffects: false,
                                     providedExports: true,
                                     usedExports: false,
                                     concatenateModules: false,
                                     noEmitOnErrors: false,
                                     checkWasmTypes: false,
                                     mangleWasmImports: false,
                                     namedModules: true,
                                     hashedModuleIds: false,
                                     namedChunks: true,
                                     portableRecords: false,
                                     minimize: false,
                                     minimizer: [ { apply: [Function: apply] } ],
                                     nodeEnv: 'development' },
                                  performance:
                                   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                  devServer:
                                   { contentBase: 'C:\\temp\\au-ionic\\dist',
                                     historyApiFallback: true },
                                  devtool: 'cheap-module-eval-source-map',
                                  module:
                                   { rules:
                                      [ { test: /\.css$/i,
                                          issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                          use: [ 'style-loader', { loader: 'css-loader' } ] },
                                        { test: /\.css$/i,
                                          issuer: [ { test: /\.html$/i } ],
                                          use: [ { loader: 'css-loader' } ] },
                                        { test: /\.less$/i,
                                          use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                          issuer: /\.[tj]s$/i },
                                        { test: /\.less$/i,
                                          use: [ 'css-loader', 'less-loader' ],
                                          issuer: /\.html?$/i },
                                        { test: /\.html$/i, loader: 'html-loader' },
                                        { test: /\.ts$/, loader: 'ts-loader' },
                                        { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                          loader: 'expose-loader?Promise' },
                                        { test: /\.(png|gif|jpg|cur)$/i,
                                          loader: 'url-loader',
                                          options: { limit: 8192 } },
                                        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff' } },
                                        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'file-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                     unknownContextRequest: '.',
                                     unknownContextRegExp: false,
                                     unknownContextRecursive: true,
                                     unknownContextCritical: true,
                                     exprContextRequest: '.',
                                     exprContextRegExp: false,
                                     exprContextRecursive: true,
                                     exprContextCritical: true,
                                     wrappedContextRegExp: /.*/,
                                     wrappedContextRecursive: true,
                                     wrappedContextCritical: false,
                                     strictExportPresence: false,
                                     strictThisContextOnImports: false,
                                     unsafeCache: true,
                                     defaultRules:
                                      [ { type: 'javascript/auto', resolve: {} },
                                        { test: /\.mjs$/i,
                                          type: 'javascript/esm',
                                          resolve: { mainFields: [ 'browser', 'main' ] } },
                                        { test: /\.json$/i, type: 'json' },
                                        { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                  plugins:
                                   [ DuplicatePackageCheckerPlugin {
                                       options:
                                        { verbose: false,
                                          showHelp: true,
                                          emitError: false,
                                          exclude: null,
                                          strict: true } },
                                     AureliaPlugin {
                                       options:
                                        { includeAll: false,
                                          aureliaConfig:
                                           [ 'defaultBindingLanguage',
                                             'defaultResources',
                                             'eventAggregator',
                                             'history',
                                             'router',
                                             'developmentLogging' ],
                                          dist: 'native-modules',
                                          features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                          moduleMethods: [],
                                          noHtmlLoader: false,
                                          noInlineView: false,
                                          noModulePathResolve: false,
                                          noWebpackLoader: false,
                                          viewsFor: '**/!(tslib)*.{ts,js}',
                                          viewsExtensions: '.html',
                                          aureliaApp: 'main' } },
                                     ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                     ModuleDependenciesPlugin {
                                       root: 'C:\\temp\\au-ionic',
                                       hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                     HtmlWebpackPlugin {
                                       options:
                                        { template:
                                           'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                          templateParameters: [Function: templateParametersGenerator],
                                          filename: 'index.html',
                                          hash: false,
                                          inject: true,
                                          compile: true,
                                          favicon: false,
                                          minify: undefined,
                                          cache: true,
                                          showErrors: true,
                                          chunks: 'all',
                                          excludeChunks: [],
                                          chunksSortMode: 'auto',
                                          meta: {},
                                          title: 'Webpack App',
                                          xhtml: false,
                                          metadata:
                                           { title: 'Aurelia Navigation Skeleton',
                                             server: true,
                                             baseUrl: '/' } } },
                                     { apply: [Function: apply] } ],
                                  cache: true,
                                  context: 'C:\\temp\\au-ionic',
                                  target: 'web',
                                  node:
                                   { console: false,
                                     process: true,
                                     global: true,
                                     Buffer: true,
                                     setImmediate: true,
                                     __filename: 'mock',
                                     __dirname: 'mock' },
                                  resolveLoader:
                                   { unsafeCache: true,
                                     mainFields: [ 'loader', 'main' ],
                                     extensions: [ '.js', '.json' ],
                                     mainFiles: [ 'index' ],
                                     cacheWithContext: false,
                                     alias:
                                      { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                        async: 'bundle-loader' } } },
                               context: 'C:\\temp\\au-ionic',
                               requestShortener:
                                RequestShortener {
                                  currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                  parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                  buildinsAsModule: true,
                                  buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                  cache: Map {} },
                               running: true,
                               watchMode: true,
                               _assetEmittingSourceCache: WeakMap { <items unknown> },
                               _assetEmittingWrittenFiles: Map {},
                               watchFileSystem:
                                NodeWatchFileSystem {
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  watcherOptions: { aggregateTimeout: 200 },
                                  watcher:
                                   EventEmitter {
                                     domain:
                                      Domain {
                                        domain: null,
                                        _events:
                                         [Object: null prototype] {
                                           removeListener: [Function: updateExceptionCapture],
                                           newListener: [Function: updateExceptionCapture] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        members: [] },
                                     _events: [Object: null prototype] {},
                                     _eventsCount: 0,
                                     _maxListeners: undefined,
                                     options: { aggregateTimeout: 200 },
                                     watcherOptions: { ignored: undefined, poll: undefined },
                                     fileWatchers: [],
                                     dirWatchers: [],
                                     mtimes: [Object: null prototype] {},
                                     paused: false,
                                     aggregatedChanges: [],
                                     aggregatedRemovals: [],
                                     aggregateTimeout: 0,
                                     _onTimeout: [Function: bound _onTimeout] } },
                               dependencies: undefined },
                            watching:
                             Watching {
                               startTime: 1552894199049,
                               invalid: false,
                               handler: [Function],
                               callbacks: [],
                               closed: false,
                               watchOptions: { aggregateTimeout: 200 },
                               compiler:
                                Compiler {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { shouldEmit:
                                      SyncBailHook {
                                        _args: [ 'compilation' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     done:
                                      AsyncSeriesHook {
                                        _args: [ 'stats' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: done],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     additionalPass:
                                      AsyncSeriesHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     beforeRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     run:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     emit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async',
                                             fn: [Function],
                                             name: 'DuplicatePackageCheckerPlugin' },
                                           { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterEmit:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     thisCompilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FetchCompileWasmTemplatePlugin' },
                                           { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     compilation:
                                      SyncHook {
                                        _args: [ 'compilation', 'params' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Aurelia:PreserveModuleName' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                           { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                           { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                           { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                           { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EvalSourceMapDevToolPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WebAssemblyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                           { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                           { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                           { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                           { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                           { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                           { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'EnsureChunkConditionsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'RemoveParentModulesPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'MergeDuplicateChunksPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'FlagDependencyExportsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'OccurrenceOrderChunkIdsPlugin' },
                                           { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                           { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                           { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                           { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'WarnCaseSensitiveModulesPlugin' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     normalModuleFactory:
                                      SyncHook {
                                        _args: [ 'normalModuleFactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     contextModuleFactory:
                                      SyncHook {
                                        _args: [ 'contextModulefactory' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     beforeCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' },
                                           { type: 'promise',
                                             fn: [Function],
                                             name: 'Aurelia:ModuleDependencies' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     compile:
                                      SyncHook {
                                        _args: [ 'params' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     make:
                                      AsyncParallelHook {
                                        _args: [ 'compilation' ],
                                        taps:
                                         [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                           { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     afterCompile:
                                      AsyncSeriesHook {
                                        _args: [ 'compilation' ],
                                        taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchRun:
                                      AsyncSeriesHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                           { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: undefined,
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: anonymous],
                                        _x: [ [Function], [Function] ] },
                                     failed:
                                      SyncHook {
                                        _args: [ 'error' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     invalid:
                                      SyncHook {
                                        _args: [ 'filename', 'changeTime' ],
                                        taps:
                                         [ { type: 'sync',
                                             fn: [Function: invalidPlugin],
                                             name: 'webpack-dev-server' },
                                           { type: 'sync',
                                             fn: [Function: invalid],
                                             name: 'WebpackDevMiddleware' } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     watchClose:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     environment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterEnvironment:
                                      SyncHook {
                                        _args: [],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterPlugins:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps: [],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [] },
                                     afterResolvers:
                                      SyncHook {
                                        _args: [ 'compiler' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                           { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function], [Function] ] },
                                     entryOption:
                                      SyncBailHook {
                                        _args: [ 'context', 'entry' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                        interceptors: [],
                                        call: [Function: anonymous],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: [ [Function] ] } },
                                  name: undefined,
                                  parentCompilation: undefined,
                                  outputPath: 'C:\\temp\\au-ionic\\dist',
                                  outputFileSystem: MemoryFileSystem { data: {} },
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  recordsInputPath: undefined,
                                  recordsOutputPath: undefined,
                                  records: {},
                                  removedFiles: Set {},
                                  fileTimestamps: Map {},
                                  contextTimestamps: Map {},
                                  resolverFactory:
                                   ResolverFactory {
                                     _pluginCompat:
                                      SyncBailHook {
                                        _args: [ 'options' ],
                                        taps:
                                         [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable camelCase',
                                             stage: 100 },
                                           { type: 'sync',
                                             fn: [Function],
                                             name: 'Tapable this.hooks',
                                             stage: 200 } ],
                                        interceptors: [],
                                        call: [Function: lazyCompileHook],
                                        promise: [Function: lazyCompileHook],
                                        callAsync: [Function: lazyCompileHook],
                                        _x: undefined },
                                     hooks:
                                      { resolveOptions:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [ [Function] ] },
                                              'context' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                              'loader' => SyncWaterfallHook {
                                                _args: [ 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined } },
                                           _factory: [Function],
                                           _interceptors: [] },
                                        resolver:
                                         HookMap {
                                           _map:
                                            Map {
                                              'normal' => SyncHook {
                                                _args: [ 'resolver', 'resolveOptions' ],
                                                taps:
                                                 [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                   { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ] } },
                                           _factory: [Function],
                                           _interceptors: [] } },
                                     cache1: WeakMap { <items unknown> },
                                     cache2:
                                      Map {
                                        'normal|{}' => Resolver {
                                          _pluginCompat:
                                           SyncBailHook {
                                             _args: [ 'options' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                                { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable camelCase',
                                                  stage: 100 },
                                                { type: 'sync',
                                                  fn: [Function],
                                                  name: 'Tapable this.hooks',
                                                  stage: 200 } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          fileSystem:
                                           CachedInputFileSystem {
                                             fileSystem: NodeJsInputFileSystem {},
                                             _statStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readdirStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _readFileStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [Timeout],
                                                   _idleNext: [TimersList],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 128,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readJsonStorage:
                                              Storage {
                                                duration: 60000,
                                                running:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                                data:
                                                 Map {
                                                   'C:\\temp\\au-ionic\\package.json' => [ null,
                                                     { name: 'au-ionic',
                                                       description: 'An Aurelia client application.',
                                                       version: '0.1.0',
                                                       repository: { type: '???', url: '???' },
                                                       scripts: {},
                                                       license: 'MIT',
                                                       dependencies:
                                                        { '@ionic/core': '^4.1.1',
                                                          'aurelia-animator-css': '^1.0.4',
                                                          'aurelia-bootstrapper': '^2.3.0',
                                                          'aurelia-polyfills': '^1.3.0',
                                                          bluebird: '^3.5.2' },
                                                       peerDependencies: {},
                                                       devDependencies:
                                                        { '@stencil/webpack': '0.0.6',
                                                          '@types/bluebird': '^3.5.24',
                                                          '@types/lodash': '^4.14.117',
                                                          '@types/node': '^10.11.6',
                                                          '@types/webpack': '^4.4.15',
                                                          'aurelia-cli': '^1.0.0-beta.13',
                                                          'aurelia-testing': '^1.0.0',
                                                          'aurelia-tools': '^2.0.0',
                                                          'aurelia-webpack-plugin': '^3.0.0',
                                                          'copy-webpack-plugin': '^4.5.2',
                                                          'css-loader': '^1.0.0',
                                                          del: '^3.0.0',
                                                          'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                          'expose-loader': '^0.7.5',
                                                          'file-loader': '^2.0.0',
                                                          gulp: '^4.0.0',
                                                          'gulp-rename': '^1.4.0',
                                                          'html-loader': '^0.5.5',
                                                          'html-webpack-plugin': '^3.2.0',
                                                          'istanbul-instrumenter-loader': '^3.0.1',
                                                          'json-loader': '^0.5.7',
                                                          less: 'latest',
                                                          'less-loader': 'latest',
                                                          'mini-css-extract-plugin': '^0.4.3',
                                                          minimatch: '^3.0.4',
                                                          opn: '^5.4.0',
                                                          'style-loader': '^0.23.1',
                                                          through2: '^2.0.3',
                                                          'ts-loader': '^5.2.1',
                                                          'ts-node': '^7.0.1',
                                                          typescript: '^3.1.2',
                                                          'url-loader': '^1.1.1',
                                                          'vinyl-fs': '^3.0.3',
                                                          webpack: '^4.27.0',
                                                          'webpack-bundle-analyzer': 'latest',
                                                          'webpack-cli': '^3.1.2',
                                                          'webpack-dev-server': '^3.1.9' },
                                                       engines: { node: '>= 6.0.0' },
                                                       main: 'dist/app.bundle.js' } ] },
                                                levels:
                                                 [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 1,
                                                interval:
                                                 Timeout {
                                                   _idleTimeout: 530,
                                                   _idlePrev: [TimersList],
                                                   _idleNext: [Timeout],
                                                   _idleStart: 2545,
                                                   _onTimeout: [Function: bound tick],
                                                   _timerArgs: undefined,
                                                   _repeat: 530,
                                                   _destroyed: false,
                                                   domain: [Domain],
                                                   [Symbol(refed)]: true,
                                                   [Symbol(asyncId)]: 129,
                                                   [Symbol(triggerId)]: 127 },
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: false,
                                                tick: [Function: bound tick] },
                                             _readlinkStorage:
                                              Storage {
                                                duration: 60000,
                                                running: Map {},
                                                data: Map {},
                                                levels:
                                                 [ Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   Set {},
                                                   ... 13 more items ],
                                                count: 0,
                                                interval: null,
                                                needTickCheck: false,
                                                nextTick: null,
                                                passive: true,
                                                tick: [Function: bound tick] },
                                             _stat: [Function: bound bound ],
                                             _statSync: [Function: bound bound ],
                                             _readdir: [Function: bound readdir],
                                             _readdirSync: [Function: bound readdirSync],
                                             _readFile: [Function: bound bound readFile],
                                             _readFileSync: [Function: bound bound readFileSync],
                                             _readJson: [Function],
                                             _readJsonSync: [Function],
                                             _readlink: [Function: bound bound readlink],
                                             _readlinkSync: [Function: bound bound readlinkSync] },
                                          hooks:
                                           { resolveStep:
                                              SyncHook {
                                                _args: [ 'hook', 'request' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: anonymous],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: [],
                                                name: 'resolveStep' },
                                             noResolve:
                                              SyncHook {
                                                _args: [ 'request', 'error' ],
                                                taps: [],
                                                interceptors: [],
                                                call: [Function: lazyCompileHook],
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'noResolve' },
                                             resolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'Aurelia:SubFolder' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'resolve' },
                                             result:
                                              AsyncSeriesHook {
                                                _args: [ 'result', 'resolveContext' ],
                                                taps: [],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined },
                                             parsedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'parsedResolve' },
                                             describedResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async',
                                                     fn: [Function],
                                                     stage: -10,
                                                     name: 'Aurelia:Dist' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'ModuleKindPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     stage: 10,
                                                     name: 'JoinRequestPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x:
                                                 [ [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function],
                                                   [Function] ],
                                                name: 'describedResolve' },
                                             rawModule:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'rawModule' },
                                             module:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                   { type: 'async',
                                                     fn: [Function],
                                                     name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function], [Function] ],
                                                name: 'module' },
                                             relative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'relative' },
                                             describedRelative:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                   { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'describedRelative' },
                                             directory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'directory' },
                                             existingDirectory:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingDirectory' },
                                             undescribedRawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                   { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'undescribedRawFile' },
                                             rawFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'rawFile' },
                                             file:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps:
                                                 [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                   { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                   { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                   { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'file' },
                                             existingFile:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'existingFile' },
                                             resolved:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: lazyCompileHook],
                                                _x: undefined,
                                                name: 'resolved' },
                                             newResolve:
                                              AsyncSeriesBailHook {
                                                _args: [ 'request', 'resolveContext' ],
                                                taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                                interceptors: [],
                                                call: undefined,
                                                promise: [Function: lazyCompileHook],
                                                callAsync: [Function: anonymous],
                                                _x: [ [Function] ],
                                                name: 'newResolve' } },
                                          withOptions: [Function] } } },
                                  resolvers:
                                   { normal:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     loader:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] },
                                     context:
                                      { plugins: [Function: deprecated],
                                        apply: [Function: deprecated] } },
                                  options:
                                   { resolve:
                                      { extensions: [ '.ts', '.js' ],
                                        modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                        alias:
                                         { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                        unsafeCache: true,
                                        mainFiles: [ 'index' ],
                                        aliasFields: [ 'browser' ],
                                        mainFields: [ 'browser', 'module', 'main' ],
                                        cacheWithContext: false,
                                        plugins:
                                         [ DistPlugin { dist: '/dist/native-modules/' },
                                           SubFolderPlugin {} ] },
                                     entry:
                                      { app:
                                         [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'webpack-dev-server/client',
                                           'aurelia-webpack-plugin/runtime/empty-entry',
                                           'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                           'aurelia-bootstrapper' ] },
                                     mode: 'development',
                                     output:
                                      { path: 'C:\\temp\\au-ionic\\dist',
                                        publicPath: '/',
                                        filename: '[name].[hash].bundle.js',
                                        sourceMapFilename: '[name].[hash].bundle.map',
                                        chunkFilename: '[name].[hash].chunk.js',
                                        webassemblyModuleFilename: '[modulehash].module.wasm',
                                        library: '',
                                        hotUpdateFunction: 'webpackHotUpdate',
                                        jsonpFunction: 'webpackJsonp',
                                        chunkCallbackName: 'webpackChunk',
                                        globalObject: 'window',
                                        devtoolNamespace: '',
                                        libraryTarget: 'var',
                                        pathinfo: true,
                                        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                        hotUpdateMainFilename: '[hash].hot-update.json',
                                        crossOriginLoading: false,
                                        jsonpScriptType: false,
                                        chunkLoadTimeout: 120000,
                                        hashFunction: 'md4',
                                        hashDigest: 'hex',
                                        hashDigestLength: 20,
                                        devtoolLineToLine: false,
                                        strictModuleExceptionHandling: false },
                                     optimization:
                                      { runtimeChunk: { name: [Function: name] },
                                        moduleIds: 'hashed',
                                        splitChunks:
                                         { hidePathInfo: true,
                                           chunks: 'initial',
                                           maxSize: 200000,
                                           cacheGroups:
                                            { default: false,
                                              vendors:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors',
                                                 priority: 19,
                                                 enforce: true,
                                                 minSize: 30000 },
                                              vendorsAsync:
                                               { test: /[\\\/]node_modules[\\\/]/,
                                                 name: 'vendors.async',
                                                 chunks: 'async',
                                                 priority: 9,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 },
                                              commonsAsync:
                                               { name: 'commons.async',
                                                 minChunks: 2,
                                                 chunks: 'async',
                                                 priority: 0,
                                                 reuseExistingChunk: true,
                                                 minSize: 10000 } },
                                           minSize: 10000,
                                           minChunks: 1,
                                           maxAsyncRequests: Infinity,
                                           automaticNameDelimiter: '~',
                                           maxInitialRequests: Infinity,
                                           name: true },
                                        removeAvailableModules: true,
                                        removeEmptyChunks: true,
                                        mergeDuplicateChunks: true,
                                        flagIncludedChunks: false,
                                        occurrenceOrder: false,
                                        sideEffects: false,
                                        providedExports: true,
                                        usedExports: false,
                                        concatenateModules: false,
                                        noEmitOnErrors: false,
                                        checkWasmTypes: false,
                                        mangleWasmImports: false,
                                        namedModules: true,
                                        hashedModuleIds: false,
                                        namedChunks: true,
                                        portableRecords: false,
                                        minimize: false,
                                        minimizer: [ { apply: [Function: apply] } ],
                                        nodeEnv: 'development' },
                                     performance:
                                      { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                     devServer:
                                      { contentBase: 'C:\\temp\\au-ionic\\dist',
                                        historyApiFallback: true },
                                     devtool: 'cheap-module-eval-source-map',
                                     module:
                                      { rules:
                                         [ { test: /\.css$/i,
                                             issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                             use: [ 'style-loader', { loader: 'css-loader' } ] },
                                           { test: /\.css$/i,
                                             issuer: [ { test: /\.html$/i } ],
                                             use: [ { loader: 'css-loader' } ] },
                                           { test: /\.less$/i,
                                             use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                             issuer: /\.[tj]s$/i },
                                           { test: /\.less$/i,
                                             use: [ 'css-loader', 'less-loader' ],
                                             issuer: /\.html?$/i },
                                           { test: /\.html$/i, loader: 'html-loader' },
                                           { test: /\.ts$/, loader: 'ts-loader' },
                                           { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                             loader: 'expose-loader?Promise' },
                                           { test: /\.(png|gif|jpg|cur)$/i,
                                             loader: 'url-loader',
                                             options: { limit: 8192 } },
                                           { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                           { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'url-loader',
                                             options: { limit: 10000, mimetype: 'application/font-woff' } },
                                           { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                             loader: 'file-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' },
                                           { test: /\.html?$/i,
                                             use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                        unknownContextRequest: '.',
                                        unknownContextRegExp: false,
                                        unknownContextRecursive: true,
                                        unknownContextCritical: true,
                                        exprContextRequest: '.',
                                        exprContextRegExp: false,
                                        exprContextRecursive: true,
                                        exprContextCritical: true,
                                        wrappedContextRegExp: /.*/,
                                        wrappedContextRecursive: true,
                                        wrappedContextCritical: false,
                                        strictExportPresence: false,
                                        strictThisContextOnImports: false,
                                        unsafeCache: true,
                                        defaultRules:
                                         [ { type: 'javascript/auto', resolve: {} },
                                           { test: /\.mjs$/i,
                                             type: 'javascript/esm',
                                             resolve: { mainFields: [ 'browser', 'main' ] } },
                                           { test: /\.json$/i, type: 'json' },
                                           { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                     plugins:
                                      [ DuplicatePackageCheckerPlugin {
                                          options:
                                           { verbose: false,
                                             showHelp: true,
                                             emitError: false,
                                             exclude: null,
                                             strict: true } },
                                        AureliaPlugin {
                                          options:
                                           { includeAll: false,
                                             aureliaConfig:
                                              [ 'defaultBindingLanguage',
                                                'defaultResources',
                                                'eventAggregator',
                                                'history',
                                                'router',
                                                'developmentLogging' ],
                                             dist: 'native-modules',
                                             features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                             moduleMethods: [],
                                             noHtmlLoader: false,
                                             noInlineView: false,
                                             noModulePathResolve: false,
                                             noWebpackLoader: false,
                                             viewsFor: '**/!(tslib)*.{ts,js}',
                                             viewsExtensions: '.html',
                                             aureliaApp: 'main' } },
                                        ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                        ModuleDependenciesPlugin {
                                          root: 'C:\\temp\\au-ionic',
                                          hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                        HtmlWebpackPlugin {
                                          options:
                                           { template:
                                              'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                             templateParameters: [Function: templateParametersGenerator],
                                             filename: 'index.html',
                                             hash: false,
                                             inject: true,
                                             compile: true,
                                             favicon: false,
                                             minify: undefined,
                                             cache: true,
                                             showErrors: true,
                                             chunks: 'all',
                                             excludeChunks: [],
                                             chunksSortMode: 'auto',
                                             meta: {},
                                             title: 'Webpack App',
                                             xhtml: false,
                                             metadata:
                                              { title: 'Aurelia Navigation Skeleton',
                                                server: true,
                                                baseUrl: '/' } } },
                                        { apply: [Function: apply] } ],
                                     cache: true,
                                     context: 'C:\\temp\\au-ionic',
                                     target: 'web',
                                     node:
                                      { console: false,
                                        process: true,
                                        global: true,
                                        Buffer: true,
                                        setImmediate: true,
                                        __filename: 'mock',
                                        __dirname: 'mock' },
                                     resolveLoader:
                                      { unsafeCache: true,
                                        mainFields: [ 'loader', 'main' ],
                                        extensions: [ '.js', '.json' ],
                                        mainFiles: [ 'index' ],
                                        cacheWithContext: false,
                                        alias:
                                         { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                           async: 'bundle-loader' } } },
                                  context: 'C:\\temp\\au-ionic',
                                  requestShortener:
                                   RequestShortener {
                                     currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                     parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                     buildinsAsModule: true,
                                     buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                     cache: Map {} },
                                  running: true,
                                  watchMode: true,
                                  _assetEmittingSourceCache: WeakMap { <items unknown> },
                                  _assetEmittingWrittenFiles: Map {},
                                  watchFileSystem:
                                   NodeWatchFileSystem {
                                     inputFileSystem:
                                      CachedInputFileSystem {
                                        fileSystem: NodeJsInputFileSystem {},
                                        _statStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readdirStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _readFileStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [Timeout],
                                              _idleNext: [TimersList],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 128,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readJsonStorage:
                                         Storage {
                                           duration: 60000,
                                           running:
                                            Map {
                                              'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                           data:
                                            Map {
                                              'C:\\temp\\au-ionic\\package.json' => [ null,
                                                { name: 'au-ionic',
                                                  description: 'An Aurelia client application.',
                                                  version: '0.1.0',
                                                  repository: { type: '???', url: '???' },
                                                  scripts: {},
                                                  license: 'MIT',
                                                  dependencies:
                                                   { '@ionic/core': '^4.1.1',
                                                     'aurelia-animator-css': '^1.0.4',
                                                     'aurelia-bootstrapper': '^2.3.0',
                                                     'aurelia-polyfills': '^1.3.0',
                                                     bluebird: '^3.5.2' },
                                                  peerDependencies: {},
                                                  devDependencies:
                                                   { '@stencil/webpack': '0.0.6',
                                                     '@types/bluebird': '^3.5.24',
                                                     '@types/lodash': '^4.14.117',
                                                     '@types/node': '^10.11.6',
                                                     '@types/webpack': '^4.4.15',
                                                     'aurelia-cli': '^1.0.0-beta.13',
                                                     'aurelia-testing': '^1.0.0',
                                                     'aurelia-tools': '^2.0.0',
                                                     'aurelia-webpack-plugin': '^3.0.0',
                                                     'copy-webpack-plugin': '^4.5.2',
                                                     'css-loader': '^1.0.0',
                                                     del: '^3.0.0',
                                                     'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                     'expose-loader': '^0.7.5',
                                                     'file-loader': '^2.0.0',
                                                     gulp: '^4.0.0',
                                                     'gulp-rename': '^1.4.0',
                                                     'html-loader': '^0.5.5',
                                                     'html-webpack-plugin': '^3.2.0',
                                                     'istanbul-instrumenter-loader': '^3.0.1',
                                                     'json-loader': '^0.5.7',
                                                     less: 'latest',
                                                     'less-loader': 'latest',
                                                     'mini-css-extract-plugin': '^0.4.3',
                                                     minimatch: '^3.0.4',
                                                     opn: '^5.4.0',
                                                     'style-loader': '^0.23.1',
                                                     through2: '^2.0.3',
                                                     'ts-loader': '^5.2.1',
                                                     'ts-node': '^7.0.1',
                                                     typescript: '^3.1.2',
                                                     'url-loader': '^1.1.1',
                                                     'vinyl-fs': '^3.0.3',
                                                     webpack: '^4.27.0',
                                                     'webpack-bundle-analyzer': 'latest',
                                                     'webpack-cli': '^3.1.2',
                                                     'webpack-dev-server': '^3.1.9' },
                                                  engines: { node: '>= 6.0.0' },
                                                  main: 'dist/app.bundle.js' } ] },
                                           levels:
                                            [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 1,
                                           interval:
                                            Timeout {
                                              _idleTimeout: 530,
                                              _idlePrev: [TimersList],
                                              _idleNext: [Timeout],
                                              _idleStart: 2545,
                                              _onTimeout: [Function: bound tick],
                                              _timerArgs: undefined,
                                              _repeat: 530,
                                              _destroyed: false,
                                              domain: [Domain],
                                              [Symbol(refed)]: true,
                                              [Symbol(asyncId)]: 129,
                                              [Symbol(triggerId)]: 127 },
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: false,
                                           tick: [Function: bound tick] },
                                        _readlinkStorage:
                                         Storage {
                                           duration: 60000,
                                           running: Map {},
                                           data: Map {},
                                           levels:
                                            [ Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              Set {},
                                              ... 13 more items ],
                                           count: 0,
                                           interval: null,
                                           needTickCheck: false,
                                           nextTick: null,
                                           passive: true,
                                           tick: [Function: bound tick] },
                                        _stat: [Function: bound bound ],
                                        _statSync: [Function: bound bound ],
                                        _readdir: [Function: bound readdir],
                                        _readdirSync: [Function: bound readdirSync],
                                        _readFile: [Function: bound bound readFile],
                                        _readFileSync: [Function: bound bound readFileSync],
                                        _readJson: [Function],
                                        _readJsonSync: [Function],
                                        _readlink: [Function: bound bound readlink],
                                        _readlinkSync: [Function: bound bound readlinkSync] },
                                     watcherOptions: { aggregateTimeout: 200 },
                                     watcher:
                                      EventEmitter {
                                        domain:
                                         Domain {
                                           domain: null,
                                           _events:
                                            [Object: null prototype] {
                                              removeListener: [Function: updateExceptionCapture],
                                              newListener: [Function: updateExceptionCapture] },
                                           _eventsCount: 2,
                                           _maxListeners: undefined,
                                           members: [] },
                                        _events: [Object: null prototype] {},
                                        _eventsCount: 0,
                                        _maxListeners: undefined,
                                        options: { aggregateTimeout: 200 },
                                        watcherOptions: { ignored: undefined, poll: undefined },
                                        fileWatchers: [],
                                        dirWatchers: [],
                                        mtimes: [Object: null prototype] {},
                                        paused: false,
                                        aggregatedChanges: [],
                                        aggregatedRemovals: [],
                                        aggregateTimeout: 0,
                                        _onTimeout: [Function: bound _onTimeout] } },
                                  dependencies: undefined },
                               running: true },
                            forceRebuild: false,
                            log:
                             LogLevel {
                               type: 'LogLevel',
                               options:
                                { name: 'wdm',
                                  level: 'info',
                                  prefix:
                                   { level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  factory: null,
                                  unique: true,
                                  timestamp: false },
                               methodFactory:
                                PrefixFactory {
                                  options:
                                   { name: [Function: name],
                                     time: [Function: time],
                                     level: [Function: level],
                                     template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                                  [Symbol(levels)]:
                                   { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
                                  [Symbol(instance)]: [Circular] },
                               name: 'wdm',
                               currentLevel: 2,
                               trace: [Function: noop],
                               debug: [Function: noop],
                               info: [Function],
                               warn: [Function],
                               error: [Function],
                               log: [Function: noop] },
                            rebuild: [Function: rebuild],
                            fs: MemoryFileSystem { data: {} } },
                         fileSystem: MemoryFileSystem { data: {} },
                         getFilenameFromUrl: [Function: bound getFilenameFromUrl],
                         invalidate: [Function: invalidate],
                         waitUntilValid: [Function: waitUntilValid] },
                      name: 'middleware',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: serveStatic],
                              name: 'serveStatic',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function: bound serveMagicHtml],
                              name: 'bound serveMagicHtml',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [ { name: 0, optional: false, offset: 1 } ],
                      regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                      route:
                       Route {
                         path: '*',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } } ] } },
           connection: [ [Function: connectionListener], [Function] ],
           listening: { [Function: bound onceWrapper] listener: [Function] } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 0,
        _handle: null,
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        kill: [Function],
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 131 },
     domain:
      Domain {
        domain: null,
        _events:
         [Object: null prototype] {
           removeListener: [Function: updateExceptionCapture],
           newListener: [Function: updateExceptionCapture] },
        _eventsCount: 2,
        _maxListeners: undefined,
        members: [] },
     domainThrown: false },
  duration: [ 0, 128685900 ],
  time: 1552894199120 }
{ Error: listen EADDRINUSE: address already in use 127.0.0.1:8080
    at Server.setupListenHandle [as _listen2] (net.js:1294:14)
    at listenInCluster (net.js:1342:12)
    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1480:7)
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:63:10)
  code: 'EADDRINUSE',
  errno: 'EADDRINUSE',
  syscall: 'listen',
  address: '127.0.0.1',
  port: 8080,
  domainEmitter:
   Server {
     domain:
      Domain {
        domain: null,
        _events:
         [Object: null prototype] {
           removeListener: [Function: updateExceptionCapture],
           newListener: [Function: updateExceptionCapture] },
        _eventsCount: 2,
        _maxListeners: undefined,
        members: [] },
     _events:
      [Object: null prototype] {
        request:
         { [EventEmitter: app]
           _events: [Object: null prototype] { mount: [Function: onmount] },
           _eventsCount: 1,
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           off: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           rawListeners: [Function: rawListeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           source: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings:
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\temp\\au-ionic\\views',
              'jsonp callback name': 'callback' },
           locals:
            [Object: null prototype] {
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: 'C:\\temp\\au-ionic\\views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router:
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack:
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 1 } ],
                   regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                   route:
                    Route {
                      path: '*',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'acl' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'bind' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'checkout' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'connect' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'copy' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'delete' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'head' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'link' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'lock' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'm-search' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'merge' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'mkactivity' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'mkcalendar' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'mkcol' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'move' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'notify' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'options' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'patch' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'post' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'propfind' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'proppatch' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'purge' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'put' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'rebind' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'report' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'search' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'source' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'subscribe' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'trace' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unbind' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unlink' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unlock' },
                         Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unsubscribe' } ],
                      methods:
                       { acl: true,
                         bind: true,
                         checkout: true,
                         connect: true,
                         copy: true,
                         delete: true,
                         get: true,
                         head: true,
                         link: true,
                         lock: true,
                         'm-search': true,
                         merge: true,
                         mkactivity: true,
                         mkcalendar: true,
                         mkcol: true,
                         move: true,
                         notify: true,
                         options: true,
                         patch: true,
                         post: true,
                         propfind: true,
                         proppatch: true,
                         purge: true,
                         put: true,
                         rebind: true,
                         report: true,
                         search: true,
                         source: true,
                         subscribe: true,
                         trace: true,
                         unbind: true,
                         unlink: true,
                         unlock: true,
                         unsubscribe: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp:
                    { /^\/__webpack_dev_server__\/live\.bundle\.js\/?$/i fast_star: false, fast_slash: false },
                   route:
                    Route {
                      path: '/__webpack_dev_server__/live.bundle.js',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp:
                    { /^\/__webpack_dev_server__\/sockjs\.bundle\.js\/?$/i fast_star: false, fast_slash: false },
                   route:
                    Route {
                      path: '/__webpack_dev_server__/sockjs.bundle.js',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp:
                    { /^\/webpack-dev-server\.js\/?$/i fast_star: false, fast_slash: false },
                   route:
                    Route {
                      path: '/webpack-dev-server.js',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 23 } ],
                   regexp:
                    { /^\/webpack-dev-server\/(.*)\/?$/i fast_star: false, fast_slash: false },
                   route:
                    Route {
                      path: '/webpack-dev-server/*',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp:
                    { /^\/webpack-dev-server\/?$/i fast_star: false, fast_slash: false },
                   route:
                    Route {
                      path: '/webpack-dev-server',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 1 } ],
                   regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                   route:
                    Route {
                      path: '*',
                      stack:
                       [ Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'acl' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'bind' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'checkout' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'connect' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'copy' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'delete' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'head' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'link' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'lock' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'm-search' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'merge' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'mkactivity' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'mkcalendar' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'mkcol' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'move' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'notify' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'options' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'patch' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'post' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'propfind' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'proppatch' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'purge' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'put' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'rebind' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'report' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'search' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'source' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'subscribe' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'trace' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unbind' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unlink' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unlock' },
                         Layer {
                           handle: [Function: bound setContentHeaders],
                           name: 'bound setContentHeaders',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'unsubscribe' } ],
                      methods:
                       { acl: true,
                         bind: true,
                         checkout: true,
                         connect: true,
                         copy: true,
                         delete: true,
                         get: true,
                         head: true,
                         link: true,
                         lock: true,
                         'm-search': true,
                         merge: true,
                         mkactivity: true,
                         mkcalendar: true,
                         mkcol: true,
                         move: true,
                         notify: true,
                         options: true,
                         patch: true,
                         post: true,
                         propfind: true,
                         proppatch: true,
                         purge: true,
                         put: true,
                         rebind: true,
                         report: true,
                         search: true,
                         source: true,
                         subscribe: true,
                         trace: true,
                         unbind: true,
                         unlink: true,
                         unlock: true,
                         unsubscribe: true } } },
                 Layer {
                   handle:
                    { [Function: middleware]
                      close: [Function: close],
                      context:
                       { state: false,
                         webpackStats: null,
                         callbacks: [],
                         options:
                          { logLevel: 'info',
                            logTime: false,
                            logger: null,
                            mimeTypes: null,
                            reporter: [Function: reporter],
                            stats:
                             { colors:
                                { supportsColor: [Function: getSupportLevel],
                                  stdout: false,
                                  stderr: { level: 3, hasBasic: true, has256: true, has16m: true } } },
                            watchOptions: { aggregateTimeout: 200 },
                            writeToDisk: false,
                            host: 'localhost',
                            publicPath: '/',
                            filename: '[name].[hash].bundle.js',
                            hot: false,
                            port: 8080,
                            contentBase: 'C:\\temp\\au-ionic\\dist',
                            historyApiFallback: true,
                            open: false,
                            https: undefined },
                         compiler:
                          Compiler {
                            _pluginCompat:
                             SyncBailHook {
                               _args: [ 'options' ],
                               taps:
                                [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                  { type: 'sync',
                                    fn: [Function],
                                    name: 'Tapable camelCase',
                                    stage: 100 },
                                  { type: 'sync',
                                    fn: [Function],
                                    name: 'Tapable this.hooks',
                                    stage: 200 } ],
                               interceptors: [],
                               call: [Function: lazyCompileHook],
                               promise: [Function: lazyCompileHook],
                               callAsync: [Function: lazyCompileHook],
                               _x: undefined },
                            hooks:
                             { shouldEmit:
                                SyncBailHook {
                                  _args: [ 'compilation' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               done:
                                AsyncSeriesHook {
                                  _args: [ 'stats' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                     { type: 'sync',
                                       fn: [Function: done],
                                       name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               additionalPass:
                                AsyncSeriesHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               beforeRun:
                                AsyncSeriesHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               run:
                                AsyncSeriesHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                     { type: 'sync',
                                       fn: [Function: invalid],
                                       name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               emit:
                                AsyncSeriesHook {
                                  _args: [ 'compilation' ],
                                  taps:
                                   [ { type: 'async',
                                       fn: [Function],
                                       name: 'DuplicatePackageCheckerPlugin' },
                                     { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                     { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               afterEmit:
                                AsyncSeriesHook {
                                  _args: [ 'compilation' ],
                                  taps:
                                   [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                     { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               thisCompilation:
                                SyncHook {
                                  _args: [ 'compilation', 'params' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'FetchCompileWasmTemplatePlugin' },
                                     { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                     { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               compilation:
                                SyncHook {
                                  _args: [ 'compilation', 'params' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Aurelia:PreserveModuleName' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                     { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                     { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                     { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                     { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'EvalSourceMapDevToolPlugin' },
                                     { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'WebAssemblyModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                     { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                     { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                     { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                     { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                     { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                     { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                     { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                     { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                     { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                     { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                     { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'EnsureChunkConditionsPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'RemoveParentModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'MergeDuplicateChunksPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'FlagDependencyExportsPlugin' },
                                     { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'OccurrenceOrderChunkIdsPlugin' },
                                     { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                     { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                     { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'WarnCaseSensitiveModulesPlugin' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               normalModuleFactory:
                                SyncHook {
                                  _args: [ 'normalModuleFactory' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               contextModuleFactory:
                                SyncHook {
                                  _args: [ 'contextModulefactory' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               beforeCompile:
                                AsyncSeriesHook {
                                  _args: [ 'params' ],
                                  taps:
                                   [ { type: 'promise',
                                       fn: [Function],
                                       name: 'Aurelia:ModuleDependencies' },
                                     { type: 'promise',
                                       fn: [Function],
                                       name: 'Aurelia:ModuleDependencies' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: anonymous],
                                  _x: [ [Function], [Function] ] },
                               compile:
                                SyncHook {
                                  _args: [ 'params' ],
                                  taps:
                                   [ { type: 'sync',
                                       fn: [Function: invalidPlugin],
                                       name: 'webpack-dev-server' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               make:
                                AsyncParallelHook {
                                  _args: [ 'compilation' ],
                                  taps:
                                   [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                     { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               afterCompile:
                                AsyncSeriesHook {
                                  _args: [ 'compilation' ],
                                  taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               watchRun:
                                AsyncSeriesHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                     { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: anonymous],
                                  _x: [ [Function], [Function] ] },
                               failed:
                                SyncHook {
                                  _args: [ 'error' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               invalid:
                                SyncHook {
                                  _args: [ 'filename', 'changeTime' ],
                                  taps:
                                   [ { type: 'sync',
                                       fn: [Function: invalidPlugin],
                                       name: 'webpack-dev-server' },
                                     { type: 'sync',
                                       fn: [Function: invalid],
                                       name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               watchClose:
                                SyncHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               environment:
                                SyncHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               afterEnvironment:
                                SyncHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               afterPlugins:
                                SyncHook {
                                  _args: [ 'compiler' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               afterResolvers:
                                SyncHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                     { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [ [Function], [Function] ] },
                               entryOption:
                                SyncBailHook {
                                  _args: [ 'context', 'entry' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [ [Function] ] } },
                            name: undefined,
                            parentCompilation: undefined,
                            outputPath: 'C:\\temp\\au-ionic\\dist',
                            outputFileSystem: MemoryFileSystem { data: {} },
                            inputFileSystem:
                             CachedInputFileSystem {
                               fileSystem: NodeJsInputFileSystem {},
                               _statStorage:
                                Storage {
                                  duration: 60000,
                                  running: Map {},
                                  data: Map {},
                                  levels:
                                   [ Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 0,
                                  interval: null,
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: true,
                                  tick: [Function: bound tick] },
                               _readdirStorage:
                                Storage {
                                  duration: 60000,
                                  running: Map {},
                                  data: Map {},
                                  levels:
                                   [ Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 0,
                                  interval: null,
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: true,
                                  tick: [Function: bound tick] },
                               _readFileStorage:
                                Storage {
                                  duration: 60000,
                                  running:
                                   Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                  data:
                                   Map {
                                     'C:\\temp\\au-ionic\\package.json' => [ null,
                                       <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                  levels:
                                   [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 1,
                                  interval:
                                   Timeout {
                                     _idleTimeout: 530,
                                     _idlePrev: [Timeout],
                                     _idleNext: [TimersList],
                                     _idleStart: 2545,
                                     _onTimeout: [Function: bound tick],
                                     _timerArgs: undefined,
                                     _repeat: 530,
                                     _destroyed: false,
                                     domain: [Domain],
                                     [Symbol(refed)]: true,
                                     [Symbol(asyncId)]: 128,
                                     [Symbol(triggerId)]: 127 },
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: false,
                                  tick: [Function: bound tick] },
                               _readJsonStorage:
                                Storage {
                                  duration: 60000,
                                  running:
                                   Map {
                                     'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                  data:
                                   Map {
                                     'C:\\temp\\au-ionic\\package.json' => [ null,
                                       { name: 'au-ionic',
                                         description: 'An Aurelia client application.',
                                         version: '0.1.0',
                                         repository: { type: '???', url: '???' },
                                         scripts: {},
                                         license: 'MIT',
                                         dependencies:
                                          { '@ionic/core': '^4.1.1',
                                            'aurelia-animator-css': '^1.0.4',
                                            'aurelia-bootstrapper': '^2.3.0',
                                            'aurelia-polyfills': '^1.3.0',
                                            bluebird: '^3.5.2' },
                                         peerDependencies: {},
                                         devDependencies:
                                          { '@stencil/webpack': '0.0.6',
                                            '@types/bluebird': '^3.5.24',
                                            '@types/lodash': '^4.14.117',
                                            '@types/node': '^10.11.6',
                                            '@types/webpack': '^4.4.15',
                                            'aurelia-cli': '^1.0.0-beta.13',
                                            'aurelia-testing': '^1.0.0',
                                            'aurelia-tools': '^2.0.0',
                                            'aurelia-webpack-plugin': '^3.0.0',
                                            'copy-webpack-plugin': '^4.5.2',
                                            'css-loader': '^1.0.0',
                                            del: '^3.0.0',
                                            'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                            'expose-loader': '^0.7.5',
                                            'file-loader': '^2.0.0',
                                            gulp: '^4.0.0',
                                            'gulp-rename': '^1.4.0',
                                            'html-loader': '^0.5.5',
                                            'html-webpack-plugin': '^3.2.0',
                                            'istanbul-instrumenter-loader': '^3.0.1',
                                            'json-loader': '^0.5.7',
                                            less: 'latest',
                                            'less-loader': 'latest',
                                            'mini-css-extract-plugin': '^0.4.3',
                                            minimatch: '^3.0.4',
                                            opn: '^5.4.0',
                                            'style-loader': '^0.23.1',
                                            through2: '^2.0.3',
                                            'ts-loader': '^5.2.1',
                                            'ts-node': '^7.0.1',
                                            typescript: '^3.1.2',
                                            'url-loader': '^1.1.1',
                                            'vinyl-fs': '^3.0.3',
                                            webpack: '^4.27.0',
                                            'webpack-bundle-analyzer': 'latest',
                                            'webpack-cli': '^3.1.2',
                                            'webpack-dev-server': '^3.1.9' },
                                         engines: { node: '>= 6.0.0' },
                                         main: 'dist/app.bundle.js' } ] },
                                  levels:
                                   [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 1,
                                  interval:
                                   Timeout {
                                     _idleTimeout: 530,
                                     _idlePrev: [TimersList],
                                     _idleNext: [Timeout],
                                     _idleStart: 2545,
                                     _onTimeout: [Function: bound tick],
                                     _timerArgs: undefined,
                                     _repeat: 530,
                                     _destroyed: false,
                                     domain: [Domain],
                                     [Symbol(refed)]: true,
                                     [Symbol(asyncId)]: 129,
                                     [Symbol(triggerId)]: 127 },
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: false,
                                  tick: [Function: bound tick] },
                               _readlinkStorage:
                                Storage {
                                  duration: 60000,
                                  running: Map {},
                                  data: Map {},
                                  levels:
                                   [ Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 0,
                                  interval: null,
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: true,
                                  tick: [Function: bound tick] },
                               _stat: [Function: bound bound ],
                               _statSync: [Function: bound bound ],
                               _readdir: [Function: bound readdir],
                               _readdirSync: [Function: bound readdirSync],
                               _readFile: [Function: bound bound readFile],
                               _readFileSync: [Function: bound bound readFileSync],
                               _readJson: [Function],
                               _readJsonSync: [Function],
                               _readlink: [Function: bound bound readlink],
                               _readlinkSync: [Function: bound bound readlinkSync] },
                            recordsInputPath: undefined,
                            recordsOutputPath: undefined,
                            records: {},
                            removedFiles: Set {},
                            fileTimestamps: Map {},
                            contextTimestamps: Map {},
                            resolverFactory:
                             ResolverFactory {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { resolveOptions:
                                   HookMap {
                                     _map:
                                      Map {
                                        'normal' => SyncWaterfallHook {
                                          _args: [ 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                          interceptors: [],
                                          call: [Function: anonymous],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: [ [Function] ] },
                                        'context' => SyncWaterfallHook {
                                          _args: [ 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                        'loader' => SyncWaterfallHook {
                                          _args: [ 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined } },
                                     _factory: [Function],
                                     _interceptors: [] },
                                  resolver:
                                   HookMap {
                                     _map:
                                      Map {
                                        'normal' => SyncHook {
                                          _args: [ 'resolver', 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                          interceptors: [],
                                          call: [Function: anonymous],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x:
                                           [ [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function] ] } },
                                     _factory: [Function],
                                     _interceptors: [] } },
                               cache1: WeakMap { <items unknown> },
                               cache2:
                                Map {
                                  'normal|{}' => Resolver {
                                    _pluginCompat:
                                     SyncBailHook {
                                       _args: [ 'options' ],
                                       taps:
                                        [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                          { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                          { type: 'sync',
                                            fn: [Function],
                                            name: 'Tapable camelCase',
                                            stage: 100 },
                                          { type: 'sync',
                                            fn: [Function],
                                            name: 'Tapable this.hooks',
                                            stage: 200 } ],
                                       interceptors: [],
                                       call: [Function: lazyCompileHook],
                                       promise: [Function: lazyCompileHook],
                                       callAsync: [Function: lazyCompileHook],
                                       _x: undefined },
                                    fileSystem:
                                     CachedInputFileSystem {
                                       fileSystem: NodeJsInputFileSystem {},
                                       _statStorage:
                                        Storage {
                                          duration: 60000,
                                          running: Map {},
                                          data: Map {},
                                          levels:
                                           [ Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 0,
                                          interval: null,
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: true,
                                          tick: [Function: bound tick] },
                                       _readdirStorage:
                                        Storage {
                                          duration: 60000,
                                          running: Map {},
                                          data: Map {},
                                          levels:
                                           [ Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 0,
                                          interval: null,
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: true,
                                          tick: [Function: bound tick] },
                                       _readFileStorage:
                                        Storage {
                                          duration: 60000,
                                          running:
                                           Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                          data:
                                           Map {
                                             'C:\\temp\\au-ionic\\package.json' => [ null,
                                               <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                          levels:
                                           [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 1,
                                          interval:
                                           Timeout {
                                             _idleTimeout: 530,
                                             _idlePrev: [Timeout],
                                             _idleNext: [TimersList],
                                             _idleStart: 2545,
                                             _onTimeout: [Function: bound tick],
                                             _timerArgs: undefined,
                                             _repeat: 530,
                                             _destroyed: false,
                                             domain: [Domain],
                                             [Symbol(refed)]: true,
                                             [Symbol(asyncId)]: 128,
                                             [Symbol(triggerId)]: 127 },
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: false,
                                          tick: [Function: bound tick] },
                                       _readJsonStorage:
                                        Storage {
                                          duration: 60000,
                                          running:
                                           Map {
                                             'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                          data:
                                           Map {
                                             'C:\\temp\\au-ionic\\package.json' => [ null,
                                               { name: 'au-ionic',
                                                 description: 'An Aurelia client application.',
                                                 version: '0.1.0',
                                                 repository: { type: '???', url: '???' },
                                                 scripts: {},
                                                 license: 'MIT',
                                                 dependencies:
                                                  { '@ionic/core': '^4.1.1',
                                                    'aurelia-animator-css': '^1.0.4',
                                                    'aurelia-bootstrapper': '^2.3.0',
                                                    'aurelia-polyfills': '^1.3.0',
                                                    bluebird: '^3.5.2' },
                                                 peerDependencies: {},
                                                 devDependencies:
                                                  { '@stencil/webpack': '0.0.6',
                                                    '@types/bluebird': '^3.5.24',
                                                    '@types/lodash': '^4.14.117',
                                                    '@types/node': '^10.11.6',
                                                    '@types/webpack': '^4.4.15',
                                                    'aurelia-cli': '^1.0.0-beta.13',
                                                    'aurelia-testing': '^1.0.0',
                                                    'aurelia-tools': '^2.0.0',
                                                    'aurelia-webpack-plugin': '^3.0.0',
                                                    'copy-webpack-plugin': '^4.5.2',
                                                    'css-loader': '^1.0.0',
                                                    del: '^3.0.0',
                                                    'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                    'expose-loader': '^0.7.5',
                                                    'file-loader': '^2.0.0',
                                                    gulp: '^4.0.0',
                                                    'gulp-rename': '^1.4.0',
                                                    'html-loader': '^0.5.5',
                                                    'html-webpack-plugin': '^3.2.0',
                                                    'istanbul-instrumenter-loader': '^3.0.1',
                                                    'json-loader': '^0.5.7',
                                                    less: 'latest',
                                                    'less-loader': 'latest',
                                                    'mini-css-extract-plugin': '^0.4.3',
                                                    minimatch: '^3.0.4',
                                                    opn: '^5.4.0',
                                                    'style-loader': '^0.23.1',
                                                    through2: '^2.0.3',
                                                    'ts-loader': '^5.2.1',
                                                    'ts-node': '^7.0.1',
                                                    typescript: '^3.1.2',
                                                    'url-loader': '^1.1.1',
                                                    'vinyl-fs': '^3.0.3',
                                                    webpack: '^4.27.0',
                                                    'webpack-bundle-analyzer': 'latest',
                                                    'webpack-cli': '^3.1.2',
                                                    'webpack-dev-server': '^3.1.9' },
                                                 engines: { node: '>= 6.0.0' },
                                                 main: 'dist/app.bundle.js' } ] },
                                          levels:
                                           [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 1,
                                          interval:
                                           Timeout {
                                             _idleTimeout: 530,
                                             _idlePrev: [TimersList],
                                             _idleNext: [Timeout],
                                             _idleStart: 2545,
                                             _onTimeout: [Function: bound tick],
                                             _timerArgs: undefined,
                                             _repeat: 530,
                                             _destroyed: false,
                                             domain: [Domain],
                                             [Symbol(refed)]: true,
                                             [Symbol(asyncId)]: 129,
                                             [Symbol(triggerId)]: 127 },
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: false,
                                          tick: [Function: bound tick] },
                                       _readlinkStorage:
                                        Storage {
                                          duration: 60000,
                                          running: Map {},
                                          data: Map {},
                                          levels:
                                           [ Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 0,
                                          interval: null,
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: true,
                                          tick: [Function: bound tick] },
                                       _stat: [Function: bound bound ],
                                       _statSync: [Function: bound bound ],
                                       _readdir: [Function: bound readdir],
                                       _readdirSync: [Function: bound readdirSync],
                                       _readFile: [Function: bound bound readFile],
                                       _readFileSync: [Function: bound bound readFileSync],
                                       _readJson: [Function],
                                       _readJsonSync: [Function],
                                       _readlink: [Function: bound bound readlink],
                                       _readlinkSync: [Function: bound bound readlinkSync] },
                                    hooks:
                                     { resolveStep:
                                        SyncHook {
                                          _args: [ 'hook', 'request' ],
                                          taps: [],
                                          interceptors: [],
                                          call: [Function: anonymous],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: [],
                                          name: 'resolveStep' },
                                       noResolve:
                                        SyncHook {
                                          _args: [ 'request', 'error' ],
                                          taps: [],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'noResolve' },
                                       resolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               stage: 10,
                                               name: 'Aurelia:SubFolder' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function], [Function] ],
                                          name: 'resolve' },
                                       result:
                                        AsyncSeriesHook {
                                          _args: [ 'result', 'resolveContext' ],
                                          taps: [],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       parsedResolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                             { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function], [Function] ],
                                          name: 'parsedResolve' },
                                       describedResolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async',
                                               fn: [Function],
                                               stage: -10,
                                               name: 'Aurelia:Dist' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               stage: 10,
                                               name: 'ModuleKindPlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               stage: 10,
                                               name: 'JoinRequestPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x:
                                           [ [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function] ],
                                          name: 'describedResolve' },
                                       rawModule:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function] ],
                                          name: 'rawModule' },
                                       module:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function], [Function] ],
                                          name: 'module' },
                                       relative:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                             { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'relative' },
                                       describedRelative:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                             { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'describedRelative' },
                                       directory:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'directory' },
                                       existingDirectory:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'existingDirectory' },
                                       undescribedRawFile:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                             { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'undescribedRawFile' },
                                       rawFile:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                             { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                             { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'rawFile' },
                                       file:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                             { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'file' },
                                       existingFile:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'existingFile' },
                                       resolved:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'resolved' },
                                       newResolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function] ],
                                          name: 'newResolve' } },
                                    withOptions: [Function] } } },
                            resolvers:
                             { normal:
                                { plugins: [Function: deprecated],
                                  apply: [Function: deprecated] },
                               loader:
                                { plugins: [Function: deprecated],
                                  apply: [Function: deprecated] },
                               context:
                                { plugins: [Function: deprecated],
                                  apply: [Function: deprecated] } },
                            options:
                             { resolve:
                                { extensions: [ '.ts', '.js' ],
                                  modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                  alias:
                                   { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                  unsafeCache: true,
                                  mainFiles: [ 'index' ],
                                  aliasFields: [ 'browser' ],
                                  mainFields: [ 'browser', 'module', 'main' ],
                                  cacheWithContext: false,
                                  plugins:
                                   [ DistPlugin { dist: '/dist/native-modules/' },
                                     SubFolderPlugin {} ] },
                               entry:
                                { app:
                                   [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                     'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                     'webpack-dev-server/client',
                                     'aurelia-webpack-plugin/runtime/empty-entry',
                                     'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                     'aurelia-bootstrapper' ] },
                               mode: 'development',
                               output:
                                { path: 'C:\\temp\\au-ionic\\dist',
                                  publicPath: '/',
                                  filename: '[name].[hash].bundle.js',
                                  sourceMapFilename: '[name].[hash].bundle.map',
                                  chunkFilename: '[name].[hash].chunk.js',
                                  webassemblyModuleFilename: '[modulehash].module.wasm',
                                  library: '',
                                  hotUpdateFunction: 'webpackHotUpdate',
                                  jsonpFunction: 'webpackJsonp',
                                  chunkCallbackName: 'webpackChunk',
                                  globalObject: 'window',
                                  devtoolNamespace: '',
                                  libraryTarget: 'var',
                                  pathinfo: true,
                                  hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                  hotUpdateMainFilename: '[hash].hot-update.json',
                                  crossOriginLoading: false,
                                  jsonpScriptType: false,
                                  chunkLoadTimeout: 120000,
                                  hashFunction: 'md4',
                                  hashDigest: 'hex',
                                  hashDigestLength: 20,
                                  devtoolLineToLine: false,
                                  strictModuleExceptionHandling: false },
                               optimization:
                                { runtimeChunk: { name: [Function: name] },
                                  moduleIds: 'hashed',
                                  splitChunks:
                                   { hidePathInfo: true,
                                     chunks: 'initial',
                                     maxSize: 200000,
                                     cacheGroups:
                                      { default: false,
                                        vendors:
                                         { test: /[\\\/]node_modules[\\\/]/,
                                           name: 'vendors',
                                           priority: 19,
                                           enforce: true,
                                           minSize: 30000 },
                                        vendorsAsync:
                                         { test: /[\\\/]node_modules[\\\/]/,
                                           name: 'vendors.async',
                                           chunks: 'async',
                                           priority: 9,
                                           reuseExistingChunk: true,
                                           minSize: 10000 },
                                        commonsAsync:
                                         { name: 'commons.async',
                                           minChunks: 2,
                                           chunks: 'async',
                                           priority: 0,
                                           reuseExistingChunk: true,
                                           minSize: 10000 } },
                                     minSize: 10000,
                                     minChunks: 1,
                                     maxAsyncRequests: Infinity,
                                     automaticNameDelimiter: '~',
                                     maxInitialRequests: Infinity,
                                     name: true },
                                  removeAvailableModules: true,
                                  removeEmptyChunks: true,
                                  mergeDuplicateChunks: true,
                                  flagIncludedChunks: false,
                                  occurrenceOrder: false,
                                  sideEffects: false,
                                  providedExports: true,
                                  usedExports: false,
                                  concatenateModules: false,
                                  noEmitOnErrors: false,
                                  checkWasmTypes: false,
                                  mangleWasmImports: false,
                                  namedModules: true,
                                  hashedModuleIds: false,
                                  namedChunks: true,
                                  portableRecords: false,
                                  minimize: false,
                                  minimizer: [ { apply: [Function: apply] } ],
                                  nodeEnv: 'development' },
                               performance:
                                { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                               devServer:
                                { contentBase: 'C:\\temp\\au-ionic\\dist',
                                  historyApiFallback: true },
                               devtool: 'cheap-module-eval-source-map',
                               module:
                                { rules:
                                   [ { test: /\.css$/i,
                                       issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                       use: [ 'style-loader', { loader: 'css-loader' } ] },
                                     { test: /\.css$/i,
                                       issuer: [ { test: /\.html$/i } ],
                                       use: [ { loader: 'css-loader' } ] },
                                     { test: /\.less$/i,
                                       use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                       issuer: /\.[tj]s$/i },
                                     { test: /\.less$/i,
                                       use: [ 'css-loader', 'less-loader' ],
                                       issuer: /\.html?$/i },
                                     { test: /\.html$/i, loader: 'html-loader' },
                                     { test: /\.ts$/, loader: 'ts-loader' },
                                     { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                       loader: 'expose-loader?Promise' },
                                     { test: /\.(png|gif|jpg|cur)$/i,
                                       loader: 'url-loader',
                                       options: { limit: 8192 } },
                                     { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                       loader: 'url-loader',
                                       options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                     { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                       loader: 'url-loader',
                                       options: { limit: 10000, mimetype: 'application/font-woff' } },
                                     { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                       loader: 'file-loader' },
                                     { test: /\.html?$/i,
                                       use: 'aurelia-webpack-plugin/html-requires-loader' },
                                     { test: /\.html?$/i,
                                       use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                  unknownContextRequest: '.',
                                  unknownContextRegExp: false,
                                  unknownContextRecursive: true,
                                  unknownContextCritical: true,
                                  exprContextRequest: '.',
                                  exprContextRegExp: false,
                                  exprContextRecursive: true,
                                  exprContextCritical: true,
                                  wrappedContextRegExp: /.*/,
                                  wrappedContextRecursive: true,
                                  wrappedContextCritical: false,
                                  strictExportPresence: false,
                                  strictThisContextOnImports: false,
                                  unsafeCache: true,
                                  defaultRules:
                                   [ { type: 'javascript/auto', resolve: {} },
                                     { test: /\.mjs$/i,
                                       type: 'javascript/esm',
                                       resolve: { mainFields: [ 'browser', 'main' ] } },
                                     { test: /\.json$/i, type: 'json' },
                                     { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                               plugins:
                                [ DuplicatePackageCheckerPlugin {
                                    options:
                                     { verbose: false,
                                       showHelp: true,
                                       emitError: false,
                                       exclude: null,
                                       strict: true } },
                                  AureliaPlugin {
                                    options:
                                     { includeAll: false,
                                       aureliaConfig:
                                        [ 'defaultBindingLanguage',
                                          'defaultResources',
                                          'eventAggregator',
                                          'history',
                                          'router',
                                          'developmentLogging' ],
                                       dist: 'native-modules',
                                       features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                       moduleMethods: [],
                                       noHtmlLoader: false,
                                       noInlineView: false,
                                       noModulePathResolve: false,
                                       noWebpackLoader: false,
                                       viewsFor: '**/!(tslib)*.{ts,js}',
                                       viewsExtensions: '.html',
                                       aureliaApp: 'main' } },
                                  ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                  ModuleDependenciesPlugin {
                                    root: 'C:\\temp\\au-ionic',
                                    hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                  HtmlWebpackPlugin {
                                    options:
                                     { template:
                                        'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                       templateParameters: [Function: templateParametersGenerator],
                                       filename: 'index.html',
                                       hash: false,
                                       inject: true,
                                       compile: true,
                                       favicon: false,
                                       minify: undefined,
                                       cache: true,
                                       showErrors: true,
                                       chunks: 'all',
                                       excludeChunks: [],
                                       chunksSortMode: 'auto',
                                       meta: {},
                                       title: 'Webpack App',
                                       xhtml: false,
                                       metadata:
                                        { title: 'Aurelia Navigation Skeleton',
                                          server: true,
                                          baseUrl: '/' } } },
                                  { apply: [Function: apply] } ],
                               cache: true,
                               context: 'C:\\temp\\au-ionic',
                               target: 'web',
                               node:
                                { console: false,
                                  process: true,
                                  global: true,
                                  Buffer: true,
                                  setImmediate: true,
                                  __filename: 'mock',
                                  __dirname: 'mock' },
                               resolveLoader:
                                { unsafeCache: true,
                                  mainFields: [ 'loader', 'main' ],
                                  extensions: [ '.js', '.json' ],
                                  mainFiles: [ 'index' ],
                                  cacheWithContext: false,
                                  alias:
                                   { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                     async: 'bundle-loader' } } },
                            context: 'C:\\temp\\au-ionic',
                            requestShortener:
                             RequestShortener {
                               currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                               parentDirectoryRegExp: /(^|!)C:\/temp/g,
                               buildinsAsModule: true,
                               buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                               cache: Map {} },
                            running: true,
                            watchMode: true,
                            _assetEmittingSourceCache: WeakMap { <items unknown> },
                            _assetEmittingWrittenFiles: Map {},
                            watchFileSystem:
                             NodeWatchFileSystem {
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               watcherOptions: { aggregateTimeout: 200 },
                               watcher:
                                EventEmitter {
                                  domain:
                                   Domain {
                                     domain: null,
                                     _events:
                                      [Object: null prototype] {
                                        removeListener: [Function: updateExceptionCapture],
                                        newListener: [Function: updateExceptionCapture] },
                                     _eventsCount: 2,
                                     _maxListeners: undefined,
                                     members: [] },
                                  _events: [Object: null prototype] {},
                                  _eventsCount: 0,
                                  _maxListeners: undefined,
                                  options: { aggregateTimeout: 200 },
                                  watcherOptions: { ignored: undefined, poll: undefined },
                                  fileWatchers: [],
                                  dirWatchers: [],
                                  mtimes: [Object: null prototype] {},
                                  paused: false,
                                  aggregatedChanges: [],
                                  aggregatedRemovals: [],
                                  aggregateTimeout: 0,
                                  _onTimeout: [Function: bound _onTimeout] } },
                            dependencies: undefined },
                         watching:
                          Watching {
                            startTime: 1552894199049,
                            invalid: false,
                            handler: [Function],
                            callbacks: [],
                            closed: false,
                            watchOptions: { aggregateTimeout: 200 },
                            compiler:
                             Compiler {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { shouldEmit:
                                   SyncBailHook {
                                     _args: [ 'compilation' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  done:
                                   AsyncSeriesHook {
                                     _args: [ 'stats' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: done],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  additionalPass:
                                   AsyncSeriesHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  beforeRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  run:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  emit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async',
                                          fn: [Function],
                                          name: 'DuplicatePackageCheckerPlugin' },
                                        { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterEmit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  thisCompilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FetchCompileWasmTemplatePlugin' },
                                        { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  compilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Aurelia:PreserveModuleName' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                        { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                        { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EvalSourceMapDevToolPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WebAssemblyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                        { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EnsureChunkConditionsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'RemoveParentModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'MergeDuplicateChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FlagDependencyExportsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'OccurrenceOrderChunkIdsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WarnCaseSensitiveModulesPlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  normalModuleFactory:
                                   SyncHook {
                                     _args: [ 'normalModuleFactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  contextModuleFactory:
                                   SyncHook {
                                     _args: [ 'contextModulefactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  beforeCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' },
                                        { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  compile:
                                   SyncHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  make:
                                   AsyncParallelHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  failed:
                                   SyncHook {
                                     _args: [ 'error' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  invalid:
                                   SyncHook {
                                     _args: [ 'filename', 'changeTime' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchClose:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  environment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterEnvironment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterPlugins:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterResolvers:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function], [Function] ] },
                                  entryOption:
                                   SyncBailHook {
                                     _args: [ 'context', 'entry' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function] ] } },
                               name: undefined,
                               parentCompilation: undefined,
                               outputPath: 'C:\\temp\\au-ionic\\dist',
                               outputFileSystem: MemoryFileSystem { data: {} },
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               recordsInputPath: undefined,
                               recordsOutputPath: undefined,
                               records: {},
                               removedFiles: Set {},
                               fileTimestamps: Map {},
                               contextTimestamps: Map {},
                               resolverFactory:
                                ResolverFactory {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { resolveOptions:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [ [Function] ] },
                                           'context' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                           'loader' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined } },
                                        _factory: [Function],
                                        _interceptors: [] },
                                     resolver:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncHook {
                                             _args: [ 'resolver', 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ] } },
                                        _factory: [Function],
                                        _interceptors: [] } },
                                  cache1: WeakMap { <items unknown> },
                                  cache2:
                                   Map {
                                     'normal|{}' => Resolver {
                                       _pluginCompat:
                                        SyncBailHook {
                                          _args: [ 'options' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                             { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable camelCase',
                                               stage: 100 },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable this.hooks',
                                               stage: 200 } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       fileSystem:
                                        CachedInputFileSystem {
                                          fileSystem: NodeJsInputFileSystem {},
                                          _statStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readdirStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readFileStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [Timeout],
                                                _idleNext: [TimersList],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 128,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readJsonStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map {
                                                'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  { name: 'au-ionic',
                                                    description: 'An Aurelia client application.',
                                                    version: '0.1.0',
                                                    repository: { type: '???', url: '???' },
                                                    scripts: {},
                                                    license: 'MIT',
                                                    dependencies:
                                                     { '@ionic/core': '^4.1.1',
                                                       'aurelia-animator-css': '^1.0.4',
                                                       'aurelia-bootstrapper': '^2.3.0',
                                                       'aurelia-polyfills': '^1.3.0',
                                                       bluebird: '^3.5.2' },
                                                    peerDependencies: {},
                                                    devDependencies:
                                                     { '@stencil/webpack': '0.0.6',
                                                       '@types/bluebird': '^3.5.24',
                                                       '@types/lodash': '^4.14.117',
                                                       '@types/node': '^10.11.6',
                                                       '@types/webpack': '^4.4.15',
                                                       'aurelia-cli': '^1.0.0-beta.13',
                                                       'aurelia-testing': '^1.0.0',
                                                       'aurelia-tools': '^2.0.0',
                                                       'aurelia-webpack-plugin': '^3.0.0',
                                                       'copy-webpack-plugin': '^4.5.2',
                                                       'css-loader': '^1.0.0',
                                                       del: '^3.0.0',
                                                       'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                       'expose-loader': '^0.7.5',
                                                       'file-loader': '^2.0.0',
                                                       gulp: '^4.0.0',
                                                       'gulp-rename': '^1.4.0',
                                                       'html-loader': '^0.5.5',
                                                       'html-webpack-plugin': '^3.2.0',
                                                       'istanbul-instrumenter-loader': '^3.0.1',
                                                       'json-loader': '^0.5.7',
                                                       less: 'latest',
                                                       'less-loader': 'latest',
                                                       'mini-css-extract-plugin': '^0.4.3',
                                                       minimatch: '^3.0.4',
                                                       opn: '^5.4.0',
                                                       'style-loader': '^0.23.1',
                                                       through2: '^2.0.3',
                                                       'ts-loader': '^5.2.1',
                                                       'ts-node': '^7.0.1',
                                                       typescript: '^3.1.2',
                                                       'url-loader': '^1.1.1',
                                                       'vinyl-fs': '^3.0.3',
                                                       webpack: '^4.27.0',
                                                       'webpack-bundle-analyzer': 'latest',
                                                       'webpack-cli': '^3.1.2',
                                                       'webpack-dev-server': '^3.1.9' },
                                                    engines: { node: '>= 6.0.0' },
                                                    main: 'dist/app.bundle.js' } ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [TimersList],
                                                _idleNext: [Timeout],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 129,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readlinkStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _stat: [Function: bound bound ],
                                          _statSync: [Function: bound bound ],
                                          _readdir: [Function: bound readdir],
                                          _readdirSync: [Function: bound readdirSync],
                                          _readFile: [Function: bound bound readFile],
                                          _readFileSync: [Function: bound bound readFileSync],
                                          _readJson: [Function],
                                          _readJsonSync: [Function],
                                          _readlink: [Function: bound bound readlink],
                                          _readlinkSync: [Function: bound bound readlinkSync] },
                                       hooks:
                                        { resolveStep:
                                           SyncHook {
                                             _args: [ 'hook', 'request' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [],
                                             name: 'resolveStep' },
                                          noResolve:
                                           SyncHook {
                                             _args: [ 'request', 'error' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'noResolve' },
                                          resolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'Aurelia:SubFolder' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'resolve' },
                                          result:
                                           AsyncSeriesHook {
                                             _args: [ 'result', 'resolveContext' ],
                                             taps: [],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          parsedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'parsedResolve' },
                                          describedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async',
                                                  fn: [Function],
                                                  stage: -10,
                                                  name: 'Aurelia:Dist' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'ModuleKindPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'JoinRequestPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ],
                                             name: 'describedResolve' },
                                          rawModule:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'rawModule' },
                                          module:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'module' },
                                          relative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'relative' },
                                          describedRelative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'describedRelative' },
                                          directory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'directory' },
                                          existingDirectory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingDirectory' },
                                          undescribedRawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'undescribedRawFile' },
                                          rawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'rawFile' },
                                          file:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'file' },
                                          existingFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingFile' },
                                          resolved:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'resolved' },
                                          newResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'newResolve' } },
                                       withOptions: [Function] } } },
                               resolvers:
                                { normal:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  loader:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  context:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] } },
                               options:
                                { resolve:
                                   { extensions: [ '.ts', '.js' ],
                                     modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                     alias:
                                      { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                     unsafeCache: true,
                                     mainFiles: [ 'index' ],
                                     aliasFields: [ 'browser' ],
                                     mainFields: [ 'browser', 'module', 'main' ],
                                     cacheWithContext: false,
                                     plugins:
                                      [ DistPlugin { dist: '/dist/native-modules/' },
                                        SubFolderPlugin {} ] },
                                  entry:
                                   { app:
                                      [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'webpack-dev-server/client',
                                        'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'aurelia-bootstrapper' ] },
                                  mode: 'development',
                                  output:
                                   { path: 'C:\\temp\\au-ionic\\dist',
                                     publicPath: '/',
                                     filename: '[name].[hash].bundle.js',
                                     sourceMapFilename: '[name].[hash].bundle.map',
                                     chunkFilename: '[name].[hash].chunk.js',
                                     webassemblyModuleFilename: '[modulehash].module.wasm',
                                     library: '',
                                     hotUpdateFunction: 'webpackHotUpdate',
                                     jsonpFunction: 'webpackJsonp',
                                     chunkCallbackName: 'webpackChunk',
                                     globalObject: 'window',
                                     devtoolNamespace: '',
                                     libraryTarget: 'var',
                                     pathinfo: true,
                                     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                     hotUpdateMainFilename: '[hash].hot-update.json',
                                     crossOriginLoading: false,
                                     jsonpScriptType: false,
                                     chunkLoadTimeout: 120000,
                                     hashFunction: 'md4',
                                     hashDigest: 'hex',
                                     hashDigestLength: 20,
                                     devtoolLineToLine: false,
                                     strictModuleExceptionHandling: false },
                                  optimization:
                                   { runtimeChunk: { name: [Function: name] },
                                     moduleIds: 'hashed',
                                     splitChunks:
                                      { hidePathInfo: true,
                                        chunks: 'initial',
                                        maxSize: 200000,
                                        cacheGroups:
                                         { default: false,
                                           vendors:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors',
                                              priority: 19,
                                              enforce: true,
                                              minSize: 30000 },
                                           vendorsAsync:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors.async',
                                              chunks: 'async',
                                              priority: 9,
                                              reuseExistingChunk: true,
                                              minSize: 10000 },
                                           commonsAsync:
                                            { name: 'commons.async',
                                              minChunks: 2,
                                              chunks: 'async',
                                              priority: 0,
                                              reuseExistingChunk: true,
                                              minSize: 10000 } },
                                        minSize: 10000,
                                        minChunks: 1,
                                        maxAsyncRequests: Infinity,
                                        automaticNameDelimiter: '~',
                                        maxInitialRequests: Infinity,
                                        name: true },
                                     removeAvailableModules: true,
                                     removeEmptyChunks: true,
                                     mergeDuplicateChunks: true,
                                     flagIncludedChunks: false,
                                     occurrenceOrder: false,
                                     sideEffects: false,
                                     providedExports: true,
                                     usedExports: false,
                                     concatenateModules: false,
                                     noEmitOnErrors: false,
                                     checkWasmTypes: false,
                                     mangleWasmImports: false,
                                     namedModules: true,
                                     hashedModuleIds: false,
                                     namedChunks: true,
                                     portableRecords: false,
                                     minimize: false,
                                     minimizer: [ { apply: [Function: apply] } ],
                                     nodeEnv: 'development' },
                                  performance:
                                   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                  devServer:
                                   { contentBase: 'C:\\temp\\au-ionic\\dist',
                                     historyApiFallback: true },
                                  devtool: 'cheap-module-eval-source-map',
                                  module:
                                   { rules:
                                      [ { test: /\.css$/i,
                                          issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                          use: [ 'style-loader', { loader: 'css-loader' } ] },
                                        { test: /\.css$/i,
                                          issuer: [ { test: /\.html$/i } ],
                                          use: [ { loader: 'css-loader' } ] },
                                        { test: /\.less$/i,
                                          use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                          issuer: /\.[tj]s$/i },
                                        { test: /\.less$/i,
                                          use: [ 'css-loader', 'less-loader' ],
                                          issuer: /\.html?$/i },
                                        { test: /\.html$/i, loader: 'html-loader' },
                                        { test: /\.ts$/, loader: 'ts-loader' },
                                        { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                          loader: 'expose-loader?Promise' },
                                        { test: /\.(png|gif|jpg|cur)$/i,
                                          loader: 'url-loader',
                                          options: { limit: 8192 } },
                                        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff' } },
                                        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'file-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                     unknownContextRequest: '.',
                                     unknownContextRegExp: false,
                                     unknownContextRecursive: true,
                                     unknownContextCritical: true,
                                     exprContextRequest: '.',
                                     exprContextRegExp: false,
                                     exprContextRecursive: true,
                                     exprContextCritical: true,
                                     wrappedContextRegExp: /.*/,
                                     wrappedContextRecursive: true,
                                     wrappedContextCritical: false,
                                     strictExportPresence: false,
                                     strictThisContextOnImports: false,
                                     unsafeCache: true,
                                     defaultRules:
                                      [ { type: 'javascript/auto', resolve: {} },
                                        { test: /\.mjs$/i,
                                          type: 'javascript/esm',
                                          resolve: { mainFields: [ 'browser', 'main' ] } },
                                        { test: /\.json$/i, type: 'json' },
                                        { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                  plugins:
                                   [ DuplicatePackageCheckerPlugin {
                                       options:
                                        { verbose: false,
                                          showHelp: true,
                                          emitError: false,
                                          exclude: null,
                                          strict: true } },
                                     AureliaPlugin {
                                       options:
                                        { includeAll: false,
                                          aureliaConfig:
                                           [ 'defaultBindingLanguage',
                                             'defaultResources',
                                             'eventAggregator',
                                             'history',
                                             'router',
                                             'developmentLogging' ],
                                          dist: 'native-modules',
                                          features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                          moduleMethods: [],
                                          noHtmlLoader: false,
                                          noInlineView: false,
                                          noModulePathResolve: false,
                                          noWebpackLoader: false,
                                          viewsFor: '**/!(tslib)*.{ts,js}',
                                          viewsExtensions: '.html',
                                          aureliaApp: 'main' } },
                                     ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                     ModuleDependenciesPlugin {
                                       root: 'C:\\temp\\au-ionic',
                                       hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                     HtmlWebpackPlugin {
                                       options:
                                        { template:
                                           'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                          templateParameters: [Function: templateParametersGenerator],
                                          filename: 'index.html',
                                          hash: false,
                                          inject: true,
                                          compile: true,
                                          favicon: false,
                                          minify: undefined,
                                          cache: true,
                                          showErrors: true,
                                          chunks: 'all',
                                          excludeChunks: [],
                                          chunksSortMode: 'auto',
                                          meta: {},
                                          title: 'Webpack App',
                                          xhtml: false,
                                          metadata:
                                           { title: 'Aurelia Navigation Skeleton',
                                             server: true,
                                             baseUrl: '/' } } },
                                     { apply: [Function: apply] } ],
                                  cache: true,
                                  context: 'C:\\temp\\au-ionic',
                                  target: 'web',
                                  node:
                                   { console: false,
                                     process: true,
                                     global: true,
                                     Buffer: true,
                                     setImmediate: true,
                                     __filename: 'mock',
                                     __dirname: 'mock' },
                                  resolveLoader:
                                   { unsafeCache: true,
                                     mainFields: [ 'loader', 'main' ],
                                     extensions: [ '.js', '.json' ],
                                     mainFiles: [ 'index' ],
                                     cacheWithContext: false,
                                     alias:
                                      { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                        async: 'bundle-loader' } } },
                               context: 'C:\\temp\\au-ionic',
                               requestShortener:
                                RequestShortener {
                                  currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                  parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                  buildinsAsModule: true,
                                  buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                  cache: Map {} },
                               running: true,
                               watchMode: true,
                               _assetEmittingSourceCache: WeakMap { <items unknown> },
                               _assetEmittingWrittenFiles: Map {},
                               watchFileSystem:
                                NodeWatchFileSystem {
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  watcherOptions: { aggregateTimeout: 200 },
                                  watcher:
                                   EventEmitter {
                                     domain:
                                      Domain {
                                        domain: null,
                                        _events:
                                         [Object: null prototype] {
                                           removeListener: [Function: updateExceptionCapture],
                                           newListener: [Function: updateExceptionCapture] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        members: [] },
                                     _events: [Object: null prototype] {},
                                     _eventsCount: 0,
                                     _maxListeners: undefined,
                                     options: { aggregateTimeout: 200 },
                                     watcherOptions: { ignored: undefined, poll: undefined },
                                     fileWatchers: [],
                                     dirWatchers: [],
                                     mtimes: [Object: null prototype] {},
                                     paused: false,
                                     aggregatedChanges: [],
                                     aggregatedRemovals: [],
                                     aggregateTimeout: 0,
                                     _onTimeout: [Function: bound _onTimeout] } },
                               dependencies: undefined },
                            running: true },
                         forceRebuild: false,
                         log:
                          LogLevel {
                            type: 'LogLevel',
                            options:
                             { name: 'wdm',
                               level: 'info',
                               prefix:
                                { level: [Function: level],
                                  template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                               factory: null,
                               unique: true,
                               timestamp: false },
                            methodFactory:
                             PrefixFactory {
                               options:
                                { name: [Function: name],
                                  time: [Function: time],
                                  level: [Function: level],
                                  template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                               [Symbol(levels)]:
                                { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
                               [Symbol(instance)]: [Circular] },
                            name: 'wdm',
                            currentLevel: 2,
                            trace: [Function: noop],
                            debug: [Function: noop],
                            info: [Function],
                            warn: [Function],
                            error: [Function],
                            log: [Function: noop] },
                         rebuild: [Function: rebuild],
                         fs: MemoryFileSystem { data: {} } },
                      fileSystem: MemoryFileSystem { data: {} },
                      getFilenameFromUrl: [Function: bound getFilenameFromUrl],
                      invalidate: [Function: invalidate],
                      waitUntilValid: [Function: waitUntilValid] },
                   name: 'middleware',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 1 } ],
                   regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                   route:
                    Route {
                      path: '*',
                      stack:
                       [ Layer {
                           handle: [Function: serveStatic],
                           name: 'serveStatic',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function],
                   name: '<anonymous>',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                   route: undefined },
                 Layer {
                   handle:
                    { [Function: middleware]
                      close: [Function: close],
                      context:
                       { state: false,
                         webpackStats: null,
                         callbacks: [],
                         options:
                          { logLevel: 'info',
                            logTime: false,
                            logger: null,
                            mimeTypes: null,
                            reporter: [Function: reporter],
                            stats:
                             { colors:
                                { supportsColor: [Function: getSupportLevel],
                                  stdout: false,
                                  stderr: { level: 3, hasBasic: true, has256: true, has16m: true } } },
                            watchOptions: { aggregateTimeout: 200 },
                            writeToDisk: false,
                            host: 'localhost',
                            publicPath: '/',
                            filename: '[name].[hash].bundle.js',
                            hot: false,
                            port: 8080,
                            contentBase: 'C:\\temp\\au-ionic\\dist',
                            historyApiFallback: true,
                            open: false,
                            https: undefined },
                         compiler:
                          Compiler {
                            _pluginCompat:
                             SyncBailHook {
                               _args: [ 'options' ],
                               taps:
                                [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                  { type: 'sync',
                                    fn: [Function],
                                    name: 'Tapable camelCase',
                                    stage: 100 },
                                  { type: 'sync',
                                    fn: [Function],
                                    name: 'Tapable this.hooks',
                                    stage: 200 } ],
                               interceptors: [],
                               call: [Function: lazyCompileHook],
                               promise: [Function: lazyCompileHook],
                               callAsync: [Function: lazyCompileHook],
                               _x: undefined },
                            hooks:
                             { shouldEmit:
                                SyncBailHook {
                                  _args: [ 'compilation' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               done:
                                AsyncSeriesHook {
                                  _args: [ 'stats' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                     { type: 'sync',
                                       fn: [Function: done],
                                       name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               additionalPass:
                                AsyncSeriesHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               beforeRun:
                                AsyncSeriesHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               run:
                                AsyncSeriesHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                     { type: 'sync',
                                       fn: [Function: invalid],
                                       name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               emit:
                                AsyncSeriesHook {
                                  _args: [ 'compilation' ],
                                  taps:
                                   [ { type: 'async',
                                       fn: [Function],
                                       name: 'DuplicatePackageCheckerPlugin' },
                                     { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                     { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               afterEmit:
                                AsyncSeriesHook {
                                  _args: [ 'compilation' ],
                                  taps:
                                   [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                     { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               thisCompilation:
                                SyncHook {
                                  _args: [ 'compilation', 'params' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'FetchCompileWasmTemplatePlugin' },
                                     { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                     { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               compilation:
                                SyncHook {
                                  _args: [ 'compilation', 'params' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Aurelia:PreserveModuleName' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                     { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                     { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                     { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                     { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                     { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                     { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'EvalSourceMapDevToolPlugin' },
                                     { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'WebAssemblyModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                     { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                     { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                     { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                     { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                     { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                     { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                     { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                     { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                     { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                     { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                     { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                     { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'EnsureChunkConditionsPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'RemoveParentModulesPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'MergeDuplicateChunksPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'FlagDependencyExportsPlugin' },
                                     { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'OccurrenceOrderChunkIdsPlugin' },
                                     { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                     { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                     { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                     { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'WarnCaseSensitiveModulesPlugin' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               normalModuleFactory:
                                SyncHook {
                                  _args: [ 'normalModuleFactory' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               contextModuleFactory:
                                SyncHook {
                                  _args: [ 'contextModulefactory' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               beforeCompile:
                                AsyncSeriesHook {
                                  _args: [ 'params' ],
                                  taps:
                                   [ { type: 'promise',
                                       fn: [Function],
                                       name: 'Aurelia:ModuleDependencies' },
                                     { type: 'promise',
                                       fn: [Function],
                                       name: 'Aurelia:ModuleDependencies' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: anonymous],
                                  _x: [ [Function], [Function] ] },
                               compile:
                                SyncHook {
                                  _args: [ 'params' ],
                                  taps:
                                   [ { type: 'sync',
                                       fn: [Function: invalidPlugin],
                                       name: 'webpack-dev-server' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               make:
                                AsyncParallelHook {
                                  _args: [ 'compilation' ],
                                  taps:
                                   [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                     { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               afterCompile:
                                AsyncSeriesHook {
                                  _args: [ 'compilation' ],
                                  taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               watchRun:
                                AsyncSeriesHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                     { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: undefined,
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: anonymous],
                                  _x: [ [Function], [Function] ] },
                               failed:
                                SyncHook {
                                  _args: [ 'error' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               invalid:
                                SyncHook {
                                  _args: [ 'filename', 'changeTime' ],
                                  taps:
                                   [ { type: 'sync',
                                       fn: [Function: invalidPlugin],
                                       name: 'webpack-dev-server' },
                                     { type: 'sync',
                                       fn: [Function: invalid],
                                       name: 'WebpackDevMiddleware' } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               watchClose:
                                SyncHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               environment:
                                SyncHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               afterEnvironment:
                                SyncHook {
                                  _args: [],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               afterPlugins:
                                SyncHook {
                                  _args: [ 'compiler' ],
                                  taps: [],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [] },
                               afterResolvers:
                                SyncHook {
                                  _args: [ 'compiler' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                     { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [ [Function], [Function] ] },
                               entryOption:
                                SyncBailHook {
                                  _args: [ 'context', 'entry' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                  interceptors: [],
                                  call: [Function: anonymous],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: [ [Function] ] } },
                            name: undefined,
                            parentCompilation: undefined,
                            outputPath: 'C:\\temp\\au-ionic\\dist',
                            outputFileSystem: MemoryFileSystem { data: {} },
                            inputFileSystem:
                             CachedInputFileSystem {
                               fileSystem: NodeJsInputFileSystem {},
                               _statStorage:
                                Storage {
                                  duration: 60000,
                                  running: Map {},
                                  data: Map {},
                                  levels:
                                   [ Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 0,
                                  interval: null,
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: true,
                                  tick: [Function: bound tick] },
                               _readdirStorage:
                                Storage {
                                  duration: 60000,
                                  running: Map {},
                                  data: Map {},
                                  levels:
                                   [ Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 0,
                                  interval: null,
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: true,
                                  tick: [Function: bound tick] },
                               _readFileStorage:
                                Storage {
                                  duration: 60000,
                                  running:
                                   Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                  data:
                                   Map {
                                     'C:\\temp\\au-ionic\\package.json' => [ null,
                                       <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                  levels:
                                   [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 1,
                                  interval:
                                   Timeout {
                                     _idleTimeout: 530,
                                     _idlePrev: [Timeout],
                                     _idleNext: [TimersList],
                                     _idleStart: 2545,
                                     _onTimeout: [Function: bound tick],
                                     _timerArgs: undefined,
                                     _repeat: 530,
                                     _destroyed: false,
                                     domain: [Domain],
                                     [Symbol(refed)]: true,
                                     [Symbol(asyncId)]: 128,
                                     [Symbol(triggerId)]: 127 },
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: false,
                                  tick: [Function: bound tick] },
                               _readJsonStorage:
                                Storage {
                                  duration: 60000,
                                  running:
                                   Map {
                                     'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                  data:
                                   Map {
                                     'C:\\temp\\au-ionic\\package.json' => [ null,
                                       { name: 'au-ionic',
                                         description: 'An Aurelia client application.',
                                         version: '0.1.0',
                                         repository: { type: '???', url: '???' },
                                         scripts: {},
                                         license: 'MIT',
                                         dependencies:
                                          { '@ionic/core': '^4.1.1',
                                            'aurelia-animator-css': '^1.0.4',
                                            'aurelia-bootstrapper': '^2.3.0',
                                            'aurelia-polyfills': '^1.3.0',
                                            bluebird: '^3.5.2' },
                                         peerDependencies: {},
                                         devDependencies:
                                          { '@stencil/webpack': '0.0.6',
                                            '@types/bluebird': '^3.5.24',
                                            '@types/lodash': '^4.14.117',
                                            '@types/node': '^10.11.6',
                                            '@types/webpack': '^4.4.15',
                                            'aurelia-cli': '^1.0.0-beta.13',
                                            'aurelia-testing': '^1.0.0',
                                            'aurelia-tools': '^2.0.0',
                                            'aurelia-webpack-plugin': '^3.0.0',
                                            'copy-webpack-plugin': '^4.5.2',
                                            'css-loader': '^1.0.0',
                                            del: '^3.0.0',
                                            'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                            'expose-loader': '^0.7.5',
                                            'file-loader': '^2.0.0',
                                            gulp: '^4.0.0',
                                            'gulp-rename': '^1.4.0',
                                            'html-loader': '^0.5.5',
                                            'html-webpack-plugin': '^3.2.0',
                                            'istanbul-instrumenter-loader': '^3.0.1',
                                            'json-loader': '^0.5.7',
                                            less: 'latest',
                                            'less-loader': 'latest',
                                            'mini-css-extract-plugin': '^0.4.3',
                                            minimatch: '^3.0.4',
                                            opn: '^5.4.0',
                                            'style-loader': '^0.23.1',
                                            through2: '^2.0.3',
                                            'ts-loader': '^5.2.1',
                                            'ts-node': '^7.0.1',
                                            typescript: '^3.1.2',
                                            'url-loader': '^1.1.1',
                                            'vinyl-fs': '^3.0.3',
                                            webpack: '^4.27.0',
                                            'webpack-bundle-analyzer': 'latest',
                                            'webpack-cli': '^3.1.2',
                                            'webpack-dev-server': '^3.1.9' },
                                         engines: { node: '>= 6.0.0' },
                                         main: 'dist/app.bundle.js' } ] },
                                  levels:
                                   [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 1,
                                  interval:
                                   Timeout {
                                     _idleTimeout: 530,
                                     _idlePrev: [TimersList],
                                     _idleNext: [Timeout],
                                     _idleStart: 2545,
                                     _onTimeout: [Function: bound tick],
                                     _timerArgs: undefined,
                                     _repeat: 530,
                                     _destroyed: false,
                                     domain: [Domain],
                                     [Symbol(refed)]: true,
                                     [Symbol(asyncId)]: 129,
                                     [Symbol(triggerId)]: 127 },
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: false,
                                  tick: [Function: bound tick] },
                               _readlinkStorage:
                                Storage {
                                  duration: 60000,
                                  running: Map {},
                                  data: Map {},
                                  levels:
                                   [ Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     Set {},
                                     ... 13 more items ],
                                  count: 0,
                                  interval: null,
                                  needTickCheck: false,
                                  nextTick: null,
                                  passive: true,
                                  tick: [Function: bound tick] },
                               _stat: [Function: bound bound ],
                               _statSync: [Function: bound bound ],
                               _readdir: [Function: bound readdir],
                               _readdirSync: [Function: bound readdirSync],
                               _readFile: [Function: bound bound readFile],
                               _readFileSync: [Function: bound bound readFileSync],
                               _readJson: [Function],
                               _readJsonSync: [Function],
                               _readlink: [Function: bound bound readlink],
                               _readlinkSync: [Function: bound bound readlinkSync] },
                            recordsInputPath: undefined,
                            recordsOutputPath: undefined,
                            records: {},
                            removedFiles: Set {},
                            fileTimestamps: Map {},
                            contextTimestamps: Map {},
                            resolverFactory:
                             ResolverFactory {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { resolveOptions:
                                   HookMap {
                                     _map:
                                      Map {
                                        'normal' => SyncWaterfallHook {
                                          _args: [ 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                          interceptors: [],
                                          call: [Function: anonymous],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: [ [Function] ] },
                                        'context' => SyncWaterfallHook {
                                          _args: [ 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                        'loader' => SyncWaterfallHook {
                                          _args: [ 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined } },
                                     _factory: [Function],
                                     _interceptors: [] },
                                  resolver:
                                   HookMap {
                                     _map:
                                      Map {
                                        'normal' => SyncHook {
                                          _args: [ 'resolver', 'resolveOptions' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                             { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                          interceptors: [],
                                          call: [Function: anonymous],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x:
                                           [ [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function] ] } },
                                     _factory: [Function],
                                     _interceptors: [] } },
                               cache1: WeakMap { <items unknown> },
                               cache2:
                                Map {
                                  'normal|{}' => Resolver {
                                    _pluginCompat:
                                     SyncBailHook {
                                       _args: [ 'options' ],
                                       taps:
                                        [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                          { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                          { type: 'sync',
                                            fn: [Function],
                                            name: 'Tapable camelCase',
                                            stage: 100 },
                                          { type: 'sync',
                                            fn: [Function],
                                            name: 'Tapable this.hooks',
                                            stage: 200 } ],
                                       interceptors: [],
                                       call: [Function: lazyCompileHook],
                                       promise: [Function: lazyCompileHook],
                                       callAsync: [Function: lazyCompileHook],
                                       _x: undefined },
                                    fileSystem:
                                     CachedInputFileSystem {
                                       fileSystem: NodeJsInputFileSystem {},
                                       _statStorage:
                                        Storage {
                                          duration: 60000,
                                          running: Map {},
                                          data: Map {},
                                          levels:
                                           [ Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 0,
                                          interval: null,
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: true,
                                          tick: [Function: bound tick] },
                                       _readdirStorage:
                                        Storage {
                                          duration: 60000,
                                          running: Map {},
                                          data: Map {},
                                          levels:
                                           [ Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 0,
                                          interval: null,
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: true,
                                          tick: [Function: bound tick] },
                                       _readFileStorage:
                                        Storage {
                                          duration: 60000,
                                          running:
                                           Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                          data:
                                           Map {
                                             'C:\\temp\\au-ionic\\package.json' => [ null,
                                               <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                          levels:
                                           [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 1,
                                          interval:
                                           Timeout {
                                             _idleTimeout: 530,
                                             _idlePrev: [Timeout],
                                             _idleNext: [TimersList],
                                             _idleStart: 2545,
                                             _onTimeout: [Function: bound tick],
                                             _timerArgs: undefined,
                                             _repeat: 530,
                                             _destroyed: false,
                                             domain: [Domain],
                                             [Symbol(refed)]: true,
                                             [Symbol(asyncId)]: 128,
                                             [Symbol(triggerId)]: 127 },
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: false,
                                          tick: [Function: bound tick] },
                                       _readJsonStorage:
                                        Storage {
                                          duration: 60000,
                                          running:
                                           Map {
                                             'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                          data:
                                           Map {
                                             'C:\\temp\\au-ionic\\package.json' => [ null,
                                               { name: 'au-ionic',
                                                 description: 'An Aurelia client application.',
                                                 version: '0.1.0',
                                                 repository: { type: '???', url: '???' },
                                                 scripts: {},
                                                 license: 'MIT',
                                                 dependencies:
                                                  { '@ionic/core': '^4.1.1',
                                                    'aurelia-animator-css': '^1.0.4',
                                                    'aurelia-bootstrapper': '^2.3.0',
                                                    'aurelia-polyfills': '^1.3.0',
                                                    bluebird: '^3.5.2' },
                                                 peerDependencies: {},
                                                 devDependencies:
                                                  { '@stencil/webpack': '0.0.6',
                                                    '@types/bluebird': '^3.5.24',
                                                    '@types/lodash': '^4.14.117',
                                                    '@types/node': '^10.11.6',
                                                    '@types/webpack': '^4.4.15',
                                                    'aurelia-cli': '^1.0.0-beta.13',
                                                    'aurelia-testing': '^1.0.0',
                                                    'aurelia-tools': '^2.0.0',
                                                    'aurelia-webpack-plugin': '^3.0.0',
                                                    'copy-webpack-plugin': '^4.5.2',
                                                    'css-loader': '^1.0.0',
                                                    del: '^3.0.0',
                                                    'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                    'expose-loader': '^0.7.5',
                                                    'file-loader': '^2.0.0',
                                                    gulp: '^4.0.0',
                                                    'gulp-rename': '^1.4.0',
                                                    'html-loader': '^0.5.5',
                                                    'html-webpack-plugin': '^3.2.0',
                                                    'istanbul-instrumenter-loader': '^3.0.1',
                                                    'json-loader': '^0.5.7',
                                                    less: 'latest',
                                                    'less-loader': 'latest',
                                                    'mini-css-extract-plugin': '^0.4.3',
                                                    minimatch: '^3.0.4',
                                                    opn: '^5.4.0',
                                                    'style-loader': '^0.23.1',
                                                    through2: '^2.0.3',
                                                    'ts-loader': '^5.2.1',
                                                    'ts-node': '^7.0.1',
                                                    typescript: '^3.1.2',
                                                    'url-loader': '^1.1.1',
                                                    'vinyl-fs': '^3.0.3',
                                                    webpack: '^4.27.0',
                                                    'webpack-bundle-analyzer': 'latest',
                                                    'webpack-cli': '^3.1.2',
                                                    'webpack-dev-server': '^3.1.9' },
                                                 engines: { node: '>= 6.0.0' },
                                                 main: 'dist/app.bundle.js' } ] },
                                          levels:
                                           [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 1,
                                          interval:
                                           Timeout {
                                             _idleTimeout: 530,
                                             _idlePrev: [TimersList],
                                             _idleNext: [Timeout],
                                             _idleStart: 2545,
                                             _onTimeout: [Function: bound tick],
                                             _timerArgs: undefined,
                                             _repeat: 530,
                                             _destroyed: false,
                                             domain: [Domain],
                                             [Symbol(refed)]: true,
                                             [Symbol(asyncId)]: 129,
                                             [Symbol(triggerId)]: 127 },
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: false,
                                          tick: [Function: bound tick] },
                                       _readlinkStorage:
                                        Storage {
                                          duration: 60000,
                                          running: Map {},
                                          data: Map {},
                                          levels:
                                           [ Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             Set {},
                                             ... 13 more items ],
                                          count: 0,
                                          interval: null,
                                          needTickCheck: false,
                                          nextTick: null,
                                          passive: true,
                                          tick: [Function: bound tick] },
                                       _stat: [Function: bound bound ],
                                       _statSync: [Function: bound bound ],
                                       _readdir: [Function: bound readdir],
                                       _readdirSync: [Function: bound readdirSync],
                                       _readFile: [Function: bound bound readFile],
                                       _readFileSync: [Function: bound bound readFileSync],
                                       _readJson: [Function],
                                       _readJsonSync: [Function],
                                       _readlink: [Function: bound bound readlink],
                                       _readlinkSync: [Function: bound bound readlinkSync] },
                                    hooks:
                                     { resolveStep:
                                        SyncHook {
                                          _args: [ 'hook', 'request' ],
                                          taps: [],
                                          interceptors: [],
                                          call: [Function: anonymous],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: [],
                                          name: 'resolveStep' },
                                       noResolve:
                                        SyncHook {
                                          _args: [ 'request', 'error' ],
                                          taps: [],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'noResolve' },
                                       resolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               stage: 10,
                                               name: 'Aurelia:SubFolder' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function], [Function] ],
                                          name: 'resolve' },
                                       result:
                                        AsyncSeriesHook {
                                          _args: [ 'result', 'resolveContext' ],
                                          taps: [],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       parsedResolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                             { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function], [Function] ],
                                          name: 'parsedResolve' },
                                       describedResolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async',
                                               fn: [Function],
                                               stage: -10,
                                               name: 'Aurelia:Dist' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               stage: 10,
                                               name: 'ModuleKindPlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               stage: 10,
                                               name: 'JoinRequestPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x:
                                           [ [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function],
                                             [Function] ],
                                          name: 'describedResolve' },
                                       rawModule:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function] ],
                                          name: 'rawModule' },
                                       module:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                             { type: 'async',
                                               fn: [Function],
                                               name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function], [Function] ],
                                          name: 'module' },
                                       relative:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                             { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'relative' },
                                       describedRelative:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                             { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'describedRelative' },
                                       directory:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'directory' },
                                       existingDirectory:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'existingDirectory' },
                                       undescribedRawFile:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                             { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'undescribedRawFile' },
                                       rawFile:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                             { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                             { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'rawFile' },
                                       file:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps:
                                           [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                             { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                             { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                             { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'file' },
                                       existingFile:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'existingFile' },
                                       resolved:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined,
                                          name: 'resolved' },
                                       newResolve:
                                        AsyncSeriesBailHook {
                                          _args: [ 'request', 'resolveContext' ],
                                          taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                          interceptors: [],
                                          call: undefined,
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: anonymous],
                                          _x: [ [Function] ],
                                          name: 'newResolve' } },
                                    withOptions: [Function] } } },
                            resolvers:
                             { normal:
                                { plugins: [Function: deprecated],
                                  apply: [Function: deprecated] },
                               loader:
                                { plugins: [Function: deprecated],
                                  apply: [Function: deprecated] },
                               context:
                                { plugins: [Function: deprecated],
                                  apply: [Function: deprecated] } },
                            options:
                             { resolve:
                                { extensions: [ '.ts', '.js' ],
                                  modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                  alias:
                                   { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                  unsafeCache: true,
                                  mainFiles: [ 'index' ],
                                  aliasFields: [ 'browser' ],
                                  mainFields: [ 'browser', 'module', 'main' ],
                                  cacheWithContext: false,
                                  plugins:
                                   [ DistPlugin { dist: '/dist/native-modules/' },
                                     SubFolderPlugin {} ] },
                               entry:
                                { app:
                                   [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                     'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                     'webpack-dev-server/client',
                                     'aurelia-webpack-plugin/runtime/empty-entry',
                                     'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                     'aurelia-bootstrapper' ] },
                               mode: 'development',
                               output:
                                { path: 'C:\\temp\\au-ionic\\dist',
                                  publicPath: '/',
                                  filename: '[name].[hash].bundle.js',
                                  sourceMapFilename: '[name].[hash].bundle.map',
                                  chunkFilename: '[name].[hash].chunk.js',
                                  webassemblyModuleFilename: '[modulehash].module.wasm',
                                  library: '',
                                  hotUpdateFunction: 'webpackHotUpdate',
                                  jsonpFunction: 'webpackJsonp',
                                  chunkCallbackName: 'webpackChunk',
                                  globalObject: 'window',
                                  devtoolNamespace: '',
                                  libraryTarget: 'var',
                                  pathinfo: true,
                                  hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                  hotUpdateMainFilename: '[hash].hot-update.json',
                                  crossOriginLoading: false,
                                  jsonpScriptType: false,
                                  chunkLoadTimeout: 120000,
                                  hashFunction: 'md4',
                                  hashDigest: 'hex',
                                  hashDigestLength: 20,
                                  devtoolLineToLine: false,
                                  strictModuleExceptionHandling: false },
                               optimization:
                                { runtimeChunk: { name: [Function: name] },
                                  moduleIds: 'hashed',
                                  splitChunks:
                                   { hidePathInfo: true,
                                     chunks: 'initial',
                                     maxSize: 200000,
                                     cacheGroups:
                                      { default: false,
                                        vendors:
                                         { test: /[\\\/]node_modules[\\\/]/,
                                           name: 'vendors',
                                           priority: 19,
                                           enforce: true,
                                           minSize: 30000 },
                                        vendorsAsync:
                                         { test: /[\\\/]node_modules[\\\/]/,
                                           name: 'vendors.async',
                                           chunks: 'async',
                                           priority: 9,
                                           reuseExistingChunk: true,
                                           minSize: 10000 },
                                        commonsAsync:
                                         { name: 'commons.async',
                                           minChunks: 2,
                                           chunks: 'async',
                                           priority: 0,
                                           reuseExistingChunk: true,
                                           minSize: 10000 } },
                                     minSize: 10000,
                                     minChunks: 1,
                                     maxAsyncRequests: Infinity,
                                     automaticNameDelimiter: '~',
                                     maxInitialRequests: Infinity,
                                     name: true },
                                  removeAvailableModules: true,
                                  removeEmptyChunks: true,
                                  mergeDuplicateChunks: true,
                                  flagIncludedChunks: false,
                                  occurrenceOrder: false,
                                  sideEffects: false,
                                  providedExports: true,
                                  usedExports: false,
                                  concatenateModules: false,
                                  noEmitOnErrors: false,
                                  checkWasmTypes: false,
                                  mangleWasmImports: false,
                                  namedModules: true,
                                  hashedModuleIds: false,
                                  namedChunks: true,
                                  portableRecords: false,
                                  minimize: false,
                                  minimizer: [ { apply: [Function: apply] } ],
                                  nodeEnv: 'development' },
                               performance:
                                { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                               devServer:
                                { contentBase: 'C:\\temp\\au-ionic\\dist',
                                  historyApiFallback: true },
                               devtool: 'cheap-module-eval-source-map',
                               module:
                                { rules:
                                   [ { test: /\.css$/i,
                                       issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                       use: [ 'style-loader', { loader: 'css-loader' } ] },
                                     { test: /\.css$/i,
                                       issuer: [ { test: /\.html$/i } ],
                                       use: [ { loader: 'css-loader' } ] },
                                     { test: /\.less$/i,
                                       use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                       issuer: /\.[tj]s$/i },
                                     { test: /\.less$/i,
                                       use: [ 'css-loader', 'less-loader' ],
                                       issuer: /\.html?$/i },
                                     { test: /\.html$/i, loader: 'html-loader' },
                                     { test: /\.ts$/, loader: 'ts-loader' },
                                     { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                       loader: 'expose-loader?Promise' },
                                     { test: /\.(png|gif|jpg|cur)$/i,
                                       loader: 'url-loader',
                                       options: { limit: 8192 } },
                                     { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                       loader: 'url-loader',
                                       options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                     { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                       loader: 'url-loader',
                                       options: { limit: 10000, mimetype: 'application/font-woff' } },
                                     { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                       loader: 'file-loader' },
                                     { test: /\.html?$/i,
                                       use: 'aurelia-webpack-plugin/html-requires-loader' },
                                     { test: /\.html?$/i,
                                       use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                  unknownContextRequest: '.',
                                  unknownContextRegExp: false,
                                  unknownContextRecursive: true,
                                  unknownContextCritical: true,
                                  exprContextRequest: '.',
                                  exprContextRegExp: false,
                                  exprContextRecursive: true,
                                  exprContextCritical: true,
                                  wrappedContextRegExp: /.*/,
                                  wrappedContextRecursive: true,
                                  wrappedContextCritical: false,
                                  strictExportPresence: false,
                                  strictThisContextOnImports: false,
                                  unsafeCache: true,
                                  defaultRules:
                                   [ { type: 'javascript/auto', resolve: {} },
                                     { test: /\.mjs$/i,
                                       type: 'javascript/esm',
                                       resolve: { mainFields: [ 'browser', 'main' ] } },
                                     { test: /\.json$/i, type: 'json' },
                                     { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                               plugins:
                                [ DuplicatePackageCheckerPlugin {
                                    options:
                                     { verbose: false,
                                       showHelp: true,
                                       emitError: false,
                                       exclude: null,
                                       strict: true } },
                                  AureliaPlugin {
                                    options:
                                     { includeAll: false,
                                       aureliaConfig:
                                        [ 'defaultBindingLanguage',
                                          'defaultResources',
                                          'eventAggregator',
                                          'history',
                                          'router',
                                          'developmentLogging' ],
                                       dist: 'native-modules',
                                       features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                       moduleMethods: [],
                                       noHtmlLoader: false,
                                       noInlineView: false,
                                       noModulePathResolve: false,
                                       noWebpackLoader: false,
                                       viewsFor: '**/!(tslib)*.{ts,js}',
                                       viewsExtensions: '.html',
                                       aureliaApp: 'main' } },
                                  ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                  ModuleDependenciesPlugin {
                                    root: 'C:\\temp\\au-ionic',
                                    hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                  HtmlWebpackPlugin {
                                    options:
                                     { template:
                                        'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                       templateParameters: [Function: templateParametersGenerator],
                                       filename: 'index.html',
                                       hash: false,
                                       inject: true,
                                       compile: true,
                                       favicon: false,
                                       minify: undefined,
                                       cache: true,
                                       showErrors: true,
                                       chunks: 'all',
                                       excludeChunks: [],
                                       chunksSortMode: 'auto',
                                       meta: {},
                                       title: 'Webpack App',
                                       xhtml: false,
                                       metadata:
                                        { title: 'Aurelia Navigation Skeleton',
                                          server: true,
                                          baseUrl: '/' } } },
                                  { apply: [Function: apply] } ],
                               cache: true,
                               context: 'C:\\temp\\au-ionic',
                               target: 'web',
                               node:
                                { console: false,
                                  process: true,
                                  global: true,
                                  Buffer: true,
                                  setImmediate: true,
                                  __filename: 'mock',
                                  __dirname: 'mock' },
                               resolveLoader:
                                { unsafeCache: true,
                                  mainFields: [ 'loader', 'main' ],
                                  extensions: [ '.js', '.json' ],
                                  mainFiles: [ 'index' ],
                                  cacheWithContext: false,
                                  alias:
                                   { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                     async: 'bundle-loader' } } },
                            context: 'C:\\temp\\au-ionic',
                            requestShortener:
                             RequestShortener {
                               currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                               parentDirectoryRegExp: /(^|!)C:\/temp/g,
                               buildinsAsModule: true,
                               buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                               cache: Map {} },
                            running: true,
                            watchMode: true,
                            _assetEmittingSourceCache: WeakMap { <items unknown> },
                            _assetEmittingWrittenFiles: Map {},
                            watchFileSystem:
                             NodeWatchFileSystem {
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               watcherOptions: { aggregateTimeout: 200 },
                               watcher:
                                EventEmitter {
                                  domain:
                                   Domain {
                                     domain: null,
                                     _events:
                                      [Object: null prototype] {
                                        removeListener: [Function: updateExceptionCapture],
                                        newListener: [Function: updateExceptionCapture] },
                                     _eventsCount: 2,
                                     _maxListeners: undefined,
                                     members: [] },
                                  _events: [Object: null prototype] {},
                                  _eventsCount: 0,
                                  _maxListeners: undefined,
                                  options: { aggregateTimeout: 200 },
                                  watcherOptions: { ignored: undefined, poll: undefined },
                                  fileWatchers: [],
                                  dirWatchers: [],
                                  mtimes: [Object: null prototype] {},
                                  paused: false,
                                  aggregatedChanges: [],
                                  aggregatedRemovals: [],
                                  aggregateTimeout: 0,
                                  _onTimeout: [Function: bound _onTimeout] } },
                            dependencies: undefined },
                         watching:
                          Watching {
                            startTime: 1552894199049,
                            invalid: false,
                            handler: [Function],
                            callbacks: [],
                            closed: false,
                            watchOptions: { aggregateTimeout: 200 },
                            compiler:
                             Compiler {
                               _pluginCompat:
                                SyncBailHook {
                                  _args: [ 'options' ],
                                  taps:
                                   [ { type: 'sync', fn: [Function], name: 'Compiler' },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable camelCase',
                                       stage: 100 },
                                     { type: 'sync',
                                       fn: [Function],
                                       name: 'Tapable this.hooks',
                                       stage: 200 } ],
                                  interceptors: [],
                                  call: [Function: lazyCompileHook],
                                  promise: [Function: lazyCompileHook],
                                  callAsync: [Function: lazyCompileHook],
                                  _x: undefined },
                               hooks:
                                { shouldEmit:
                                   SyncBailHook {
                                     _args: [ 'compilation' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  done:
                                   AsyncSeriesHook {
                                     _args: [ 'stats' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: done],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  additionalPass:
                                   AsyncSeriesHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  beforeRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeEnvironmentPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  run:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  emit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async',
                                          fn: [Function],
                                          name: 'DuplicatePackageCheckerPlugin' },
                                        { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function: emit], name: 'CopyPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterEmit:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function: afterEmit], name: 'CopyPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SizeLimitsPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  thisCompilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'JsonpTemplatePlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FetchCompileWasmTemplatePlugin' },
                                        { type: 'sync', fn: [Function], name: 'SplitChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RuntimeChunkPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  compilation:
                                   SyncHook {
                                     _args: [ 'compilation', 'params' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:Dependencies' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Aurelia:PreserveModuleName' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:PreserveExports' },
                                        { type: 'sync', fn: [Function], name: 'ProvidePlugin' },
                                        { type: 'sync', fn: [Function], name: 'Aurelia:BaseInclude' },
                                        { type: 'sync', fn: [Function], name: 'HtmlWebpackPluginHooks' },
                                        { type: 'sync', fn: [Function], name: 'FunctionModulePlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderTargetPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EvalSourceMapDevToolPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JavascriptModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'JsonModulesPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WebAssemblyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'MultiEntryPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CompatibilityPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HarmonyModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' },
                                        { type: 'sync', fn: [Function], name: 'CommonJsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'LoaderPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NodeStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireJsStuffPlugin' },
                                        { type: 'sync', fn: [Function], name: 'APIPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ConstPlugin' },
                                        { type: 'sync', fn: [Function], name: 'UseStrictPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireIncludePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireEnsurePlugin' },
                                        { type: 'sync', fn: [Function], name: 'RequireContextPlugin' },
                                        { type: 'sync', fn: [Function], name: 'ImportPlugin' },
                                        { type: 'sync', fn: [Function], name: 'SystemPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'EnsureChunkConditionsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'RemoveParentModulesPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RemoveEmptyChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'MergeDuplicateChunksPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'FlagDependencyExportsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'HashedModuleIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'OccurrenceOrderChunkIdsPlugin' },
                                        { type: 'sync', fn: [Function], name: 'NamedChunksPlugin' },
                                        { type: 'sync', fn: [Function], name: 'DefinePlugin' },
                                        { type: 'sync', fn: [Function], name: 'TemplatedPathPlugin' },
                                        { type: 'sync', fn: [Function], name: 'RecordIdsPlugin' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'WarnCaseSensitiveModulesPlugin' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  normalModuleFactory:
                                   SyncHook {
                                     _args: [ 'normalModuleFactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  contextModuleFactory:
                                   SyncHook {
                                     _args: [ 'contextModulefactory' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  beforeCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' },
                                        { type: 'promise',
                                          fn: [Function],
                                          name: 'Aurelia:ModuleDependencies' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  compile:
                                   SyncHook {
                                     _args: [ 'params' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  make:
                                   AsyncParallelHook {
                                     _args: [ 'compilation' ],
                                     taps:
                                      [ { type: 'async', fn: [Function], name: 'HtmlWebpackPlugin' },
                                        { type: 'async', fn: [Function], name: 'MultiEntryPlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  afterCompile:
                                   AsyncSeriesHook {
                                     _args: [ 'compilation' ],
                                     taps: [ { type: 'sync', fn: [Function], name: 'CachePlugin' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchRun:
                                   AsyncSeriesHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'CachePlugin' },
                                        { type: 'sync', fn: [Function], name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: undefined,
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: anonymous],
                                     _x: [ [Function], [Function] ] },
                                  failed:
                                   SyncHook {
                                     _args: [ 'error' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  invalid:
                                   SyncHook {
                                     _args: [ 'filename', 'changeTime' ],
                                     taps:
                                      [ { type: 'sync',
                                          fn: [Function: invalidPlugin],
                                          name: 'webpack-dev-server' },
                                        { type: 'sync',
                                          fn: [Function: invalid],
                                          name: 'WebpackDevMiddleware' } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  watchClose:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  environment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterEnvironment:
                                   SyncHook {
                                     _args: [],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterPlugins:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps: [],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [] },
                                  afterResolvers:
                                   SyncHook {
                                     _args: [ 'compiler' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                        { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function], [Function] ] },
                                  entryOption:
                                   SyncBailHook {
                                     _args: [ 'context', 'entry' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'EntryOptionPlugin' } ],
                                     interceptors: [],
                                     call: [Function: anonymous],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: [ [Function] ] } },
                               name: undefined,
                               parentCompilation: undefined,
                               outputPath: 'C:\\temp\\au-ionic\\dist',
                               outputFileSystem: MemoryFileSystem { data: {} },
                               inputFileSystem:
                                CachedInputFileSystem {
                                  fileSystem: NodeJsInputFileSystem {},
                                  _statStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readdirStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _readFileStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [Timeout],
                                        _idleNext: [TimersList],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 128,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readJsonStorage:
                                   Storage {
                                     duration: 60000,
                                     running:
                                      Map {
                                        'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                     data:
                                      Map {
                                        'C:\\temp\\au-ionic\\package.json' => [ null,
                                          { name: 'au-ionic',
                                            description: 'An Aurelia client application.',
                                            version: '0.1.0',
                                            repository: { type: '???', url: '???' },
                                            scripts: {},
                                            license: 'MIT',
                                            dependencies:
                                             { '@ionic/core': '^4.1.1',
                                               'aurelia-animator-css': '^1.0.4',
                                               'aurelia-bootstrapper': '^2.3.0',
                                               'aurelia-polyfills': '^1.3.0',
                                               bluebird: '^3.5.2' },
                                            peerDependencies: {},
                                            devDependencies:
                                             { '@stencil/webpack': '0.0.6',
                                               '@types/bluebird': '^3.5.24',
                                               '@types/lodash': '^4.14.117',
                                               '@types/node': '^10.11.6',
                                               '@types/webpack': '^4.4.15',
                                               'aurelia-cli': '^1.0.0-beta.13',
                                               'aurelia-testing': '^1.0.0',
                                               'aurelia-tools': '^2.0.0',
                                               'aurelia-webpack-plugin': '^3.0.0',
                                               'copy-webpack-plugin': '^4.5.2',
                                               'css-loader': '^1.0.0',
                                               del: '^3.0.0',
                                               'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                               'expose-loader': '^0.7.5',
                                               'file-loader': '^2.0.0',
                                               gulp: '^4.0.0',
                                               'gulp-rename': '^1.4.0',
                                               'html-loader': '^0.5.5',
                                               'html-webpack-plugin': '^3.2.0',
                                               'istanbul-instrumenter-loader': '^3.0.1',
                                               'json-loader': '^0.5.7',
                                               less: 'latest',
                                               'less-loader': 'latest',
                                               'mini-css-extract-plugin': '^0.4.3',
                                               minimatch: '^3.0.4',
                                               opn: '^5.4.0',
                                               'style-loader': '^0.23.1',
                                               through2: '^2.0.3',
                                               'ts-loader': '^5.2.1',
                                               'ts-node': '^7.0.1',
                                               typescript: '^3.1.2',
                                               'url-loader': '^1.1.1',
                                               'vinyl-fs': '^3.0.3',
                                               webpack: '^4.27.0',
                                               'webpack-bundle-analyzer': 'latest',
                                               'webpack-cli': '^3.1.2',
                                               'webpack-dev-server': '^3.1.9' },
                                            engines: { node: '>= 6.0.0' },
                                            main: 'dist/app.bundle.js' } ] },
                                     levels:
                                      [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 1,
                                     interval:
                                      Timeout {
                                        _idleTimeout: 530,
                                        _idlePrev: [TimersList],
                                        _idleNext: [Timeout],
                                        _idleStart: 2545,
                                        _onTimeout: [Function: bound tick],
                                        _timerArgs: undefined,
                                        _repeat: 530,
                                        _destroyed: false,
                                        domain: [Domain],
                                        [Symbol(refed)]: true,
                                        [Symbol(asyncId)]: 129,
                                        [Symbol(triggerId)]: 127 },
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: false,
                                     tick: [Function: bound tick] },
                                  _readlinkStorage:
                                   Storage {
                                     duration: 60000,
                                     running: Map {},
                                     data: Map {},
                                     levels:
                                      [ Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        Set {},
                                        ... 13 more items ],
                                     count: 0,
                                     interval: null,
                                     needTickCheck: false,
                                     nextTick: null,
                                     passive: true,
                                     tick: [Function: bound tick] },
                                  _stat: [Function: bound bound ],
                                  _statSync: [Function: bound bound ],
                                  _readdir: [Function: bound readdir],
                                  _readdirSync: [Function: bound readdirSync],
                                  _readFile: [Function: bound bound readFile],
                                  _readFileSync: [Function: bound bound readFileSync],
                                  _readJson: [Function],
                                  _readJsonSync: [Function],
                                  _readlink: [Function: bound bound readlink],
                                  _readlinkSync: [Function: bound bound readlinkSync] },
                               recordsInputPath: undefined,
                               recordsOutputPath: undefined,
                               records: {},
                               removedFiles: Set {},
                               fileTimestamps: Map {},
                               contextTimestamps: Map {},
                               resolverFactory:
                                ResolverFactory {
                                  _pluginCompat:
                                   SyncBailHook {
                                     _args: [ 'options' ],
                                     taps:
                                      [ { type: 'sync', fn: [Function], name: 'ResolverFactory' },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable camelCase',
                                          stage: 100 },
                                        { type: 'sync',
                                          fn: [Function],
                                          name: 'Tapable this.hooks',
                                          stage: 200 } ],
                                     interceptors: [],
                                     call: [Function: lazyCompileHook],
                                     promise: [Function: lazyCompileHook],
                                     callAsync: [Function: lazyCompileHook],
                                     _x: undefined },
                                  hooks:
                                   { resolveOptions:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [ [Function] ] },
                                           'context' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                           'loader' => SyncWaterfallHook {
                                             _args: [ 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'WebpackOptionsApply' } ],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined } },
                                        _factory: [Function],
                                        _interceptors: [] },
                                     resolver:
                                      HookMap {
                                        _map:
                                         Map {
                                           'normal' => SyncHook {
                                             _args: [ 'resolver', 'resolveOptions' ],
                                             taps:
                                              [ { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'NodeSourcePlugin' },
                                                { type: 'sync', fn: [Function], name: 'AMDPlugin' } ],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ] } },
                                        _factory: [Function],
                                        _interceptors: [] } },
                                  cache1: WeakMap { <items unknown> },
                                  cache2:
                                   Map {
                                     'normal|{}' => Resolver {
                                       _pluginCompat:
                                        SyncBailHook {
                                          _args: [ 'options' ],
                                          taps:
                                           [ { type: 'sync', fn: [Function], name: 'Resolver: before/after' },
                                             { type: 'sync', fn: [Function], name: 'Resolver: step hooks' },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable camelCase',
                                               stage: 100 },
                                             { type: 'sync',
                                               fn: [Function],
                                               name: 'Tapable this.hooks',
                                               stage: 200 } ],
                                          interceptors: [],
                                          call: [Function: lazyCompileHook],
                                          promise: [Function: lazyCompileHook],
                                          callAsync: [Function: lazyCompileHook],
                                          _x: undefined },
                                       fileSystem:
                                        CachedInputFileSystem {
                                          fileSystem: NodeJsInputFileSystem {},
                                          _statStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readdirStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _readFileStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [Timeout],
                                                _idleNext: [TimersList],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 128,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readJsonStorage:
                                           Storage {
                                             duration: 60000,
                                             running:
                                              Map {
                                                'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                             data:
                                              Map {
                                                'C:\\temp\\au-ionic\\package.json' => [ null,
                                                  { name: 'au-ionic',
                                                    description: 'An Aurelia client application.',
                                                    version: '0.1.0',
                                                    repository: { type: '???', url: '???' },
                                                    scripts: {},
                                                    license: 'MIT',
                                                    dependencies:
                                                     { '@ionic/core': '^4.1.1',
                                                       'aurelia-animator-css': '^1.0.4',
                                                       'aurelia-bootstrapper': '^2.3.0',
                                                       'aurelia-polyfills': '^1.3.0',
                                                       bluebird: '^3.5.2' },
                                                    peerDependencies: {},
                                                    devDependencies:
                                                     { '@stencil/webpack': '0.0.6',
                                                       '@types/bluebird': '^3.5.24',
                                                       '@types/lodash': '^4.14.117',
                                                       '@types/node': '^10.11.6',
                                                       '@types/webpack': '^4.4.15',
                                                       'aurelia-cli': '^1.0.0-beta.13',
                                                       'aurelia-testing': '^1.0.0',
                                                       'aurelia-tools': '^2.0.0',
                                                       'aurelia-webpack-plugin': '^3.0.0',
                                                       'copy-webpack-plugin': '^4.5.2',
                                                       'css-loader': '^1.0.0',
                                                       del: '^3.0.0',
                                                       'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                       'expose-loader': '^0.7.5',
                                                       'file-loader': '^2.0.0',
                                                       gulp: '^4.0.0',
                                                       'gulp-rename': '^1.4.0',
                                                       'html-loader': '^0.5.5',
                                                       'html-webpack-plugin': '^3.2.0',
                                                       'istanbul-instrumenter-loader': '^3.0.1',
                                                       'json-loader': '^0.5.7',
                                                       less: 'latest',
                                                       'less-loader': 'latest',
                                                       'mini-css-extract-plugin': '^0.4.3',
                                                       minimatch: '^3.0.4',
                                                       opn: '^5.4.0',
                                                       'style-loader': '^0.23.1',
                                                       through2: '^2.0.3',
                                                       'ts-loader': '^5.2.1',
                                                       'ts-node': '^7.0.1',
                                                       typescript: '^3.1.2',
                                                       'url-loader': '^1.1.1',
                                                       'vinyl-fs': '^3.0.3',
                                                       webpack: '^4.27.0',
                                                       'webpack-bundle-analyzer': 'latest',
                                                       'webpack-cli': '^3.1.2',
                                                       'webpack-dev-server': '^3.1.9' },
                                                    engines: { node: '>= 6.0.0' },
                                                    main: 'dist/app.bundle.js' } ] },
                                             levels:
                                              [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 1,
                                             interval:
                                              Timeout {
                                                _idleTimeout: 530,
                                                _idlePrev: [TimersList],
                                                _idleNext: [Timeout],
                                                _idleStart: 2545,
                                                _onTimeout: [Function: bound tick],
                                                _timerArgs: undefined,
                                                _repeat: 530,
                                                _destroyed: false,
                                                domain: [Domain],
                                                [Symbol(refed)]: true,
                                                [Symbol(asyncId)]: 129,
                                                [Symbol(triggerId)]: 127 },
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: false,
                                             tick: [Function: bound tick] },
                                          _readlinkStorage:
                                           Storage {
                                             duration: 60000,
                                             running: Map {},
                                             data: Map {},
                                             levels:
                                              [ Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                Set {},
                                                ... 13 more items ],
                                             count: 0,
                                             interval: null,
                                             needTickCheck: false,
                                             nextTick: null,
                                             passive: true,
                                             tick: [Function: bound tick] },
                                          _stat: [Function: bound bound ],
                                          _statSync: [Function: bound bound ],
                                          _readdir: [Function: bound readdir],
                                          _readdirSync: [Function: bound readdirSync],
                                          _readFile: [Function: bound bound readFile],
                                          _readFileSync: [Function: bound bound readFileSync],
                                          _readJson: [Function],
                                          _readJsonSync: [Function],
                                          _readlink: [Function: bound bound readlink],
                                          _readlinkSync: [Function: bound bound readlinkSync] },
                                       hooks:
                                        { resolveStep:
                                           SyncHook {
                                             _args: [ 'hook', 'request' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: anonymous],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: [],
                                             name: 'resolveStep' },
                                          noResolve:
                                           SyncHook {
                                             _args: [ 'request', 'error' ],
                                             taps: [],
                                             interceptors: [],
                                             call: [Function: lazyCompileHook],
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'noResolve' },
                                          resolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'UnsafeCachePlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'Aurelia:SubFolder' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'resolve' },
                                          result:
                                           AsyncSeriesHook {
                                             _args: [ 'result', 'resolveContext' ],
                                             taps: [],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined },
                                          parsedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'parsedResolve' },
                                          describedResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async',
                                                  fn: [Function],
                                                  stage: -10,
                                                  name: 'Aurelia:Dist' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'ModuleKindPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  stage: 10,
                                                  name: 'JoinRequestPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x:
                                              [ [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function] ],
                                             name: 'describedResolve' },
                                          rawModule:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'rawModule' },
                                          module:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'ModulesInRootPlugin' },
                                                { type: 'async',
                                                  fn: [Function],
                                                  name: 'ModulesInHierachicDirectoriesPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function], [Function] ],
                                             name: 'module' },
                                          relative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'relative' },
                                          describedRelative:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'FileKindPlugin' },
                                                { type: 'async', fn: [Function], name: 'TryNextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'describedRelative' },
                                          directory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DirectoryExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'directory' },
                                          existingDirectory:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'MainFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'UseFilePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingDirectory' },
                                          undescribedRawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'DescriptionFilePlugin' },
                                                { type: 'async', fn: [Function], stage: 10, name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'undescribedRawFile' },
                                          rawFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'TryNextPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' },
                                                { type: 'async', fn: [Function], name: 'AppendPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'rawFile' },
                                          file:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps:
                                              [ { type: 'async', fn: [Function], name: 'AliasPlugin' },
                                                { type: 'async', fn: [Function], name: 'AliasFieldPlugin' },
                                                { type: 'async', fn: [Function], name: 'SymlinkPlugin' },
                                                { type: 'async', fn: [Function], name: 'FileExistsPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'file' },
                                          existingFile:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'NextPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'existingFile' },
                                          resolved:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ResultPlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: lazyCompileHook],
                                             _x: undefined,
                                             name: 'resolved' },
                                          newResolve:
                                           AsyncSeriesBailHook {
                                             _args: [ 'request', 'resolveContext' ],
                                             taps: [ { type: 'async', fn: [Function], name: 'ParsePlugin' } ],
                                             interceptors: [],
                                             call: undefined,
                                             promise: [Function: lazyCompileHook],
                                             callAsync: [Function: anonymous],
                                             _x: [ [Function] ],
                                             name: 'newResolve' } },
                                       withOptions: [Function] } } },
                               resolvers:
                                { normal:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  loader:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] },
                                  context:
                                   { plugins: [Function: deprecated],
                                     apply: [Function: deprecated] } },
                               options:
                                { resolve:
                                   { extensions: [ '.ts', '.js' ],
                                     modules: [ 'C:\\temp\\au-ionic\\src', 'node_modules' ],
                                     alias:
                                      { 'aurelia-binding': 'C:\\temp\\au-ionic\\node_modules\\aurelia-binding' },
                                     unsafeCache: true,
                                     mainFiles: [ 'index' ],
                                     aliasFields: [ 'browser' ],
                                     mainFields: [ 'browser', 'module', 'main' ],
                                     cacheWithContext: false,
                                     plugins:
                                      [ DistPlugin { dist: '/dist/native-modules/' },
                                        SubFolderPlugin {} ] },
                                  entry:
                                   { app:
                                      [ 'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'webpack-dev-server/client',
                                        'aurelia-webpack-plugin/runtime/empty-entry',
                                        'aurelia-webpack-plugin/runtime/pal-loader-entry',
                                        'aurelia-bootstrapper' ] },
                                  mode: 'development',
                                  output:
                                   { path: 'C:\\temp\\au-ionic\\dist',
                                     publicPath: '/',
                                     filename: '[name].[hash].bundle.js',
                                     sourceMapFilename: '[name].[hash].bundle.map',
                                     chunkFilename: '[name].[hash].chunk.js',
                                     webassemblyModuleFilename: '[modulehash].module.wasm',
                                     library: '',
                                     hotUpdateFunction: 'webpackHotUpdate',
                                     jsonpFunction: 'webpackJsonp',
                                     chunkCallbackName: 'webpackChunk',
                                     globalObject: 'window',
                                     devtoolNamespace: '',
                                     libraryTarget: 'var',
                                     pathinfo: true,
                                     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
                                     hotUpdateMainFilename: '[hash].hot-update.json',
                                     crossOriginLoading: false,
                                     jsonpScriptType: false,
                                     chunkLoadTimeout: 120000,
                                     hashFunction: 'md4',
                                     hashDigest: 'hex',
                                     hashDigestLength: 20,
                                     devtoolLineToLine: false,
                                     strictModuleExceptionHandling: false },
                                  optimization:
                                   { runtimeChunk: { name: [Function: name] },
                                     moduleIds: 'hashed',
                                     splitChunks:
                                      { hidePathInfo: true,
                                        chunks: 'initial',
                                        maxSize: 200000,
                                        cacheGroups:
                                         { default: false,
                                           vendors:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors',
                                              priority: 19,
                                              enforce: true,
                                              minSize: 30000 },
                                           vendorsAsync:
                                            { test: /[\\\/]node_modules[\\\/]/,
                                              name: 'vendors.async',
                                              chunks: 'async',
                                              priority: 9,
                                              reuseExistingChunk: true,
                                              minSize: 10000 },
                                           commonsAsync:
                                            { name: 'commons.async',
                                              minChunks: 2,
                                              chunks: 'async',
                                              priority: 0,
                                              reuseExistingChunk: true,
                                              minSize: 10000 } },
                                        minSize: 10000,
                                        minChunks: 1,
                                        maxAsyncRequests: Infinity,
                                        automaticNameDelimiter: '~',
                                        maxInitialRequests: Infinity,
                                        name: true },
                                     removeAvailableModules: true,
                                     removeEmptyChunks: true,
                                     mergeDuplicateChunks: true,
                                     flagIncludedChunks: false,
                                     occurrenceOrder: false,
                                     sideEffects: false,
                                     providedExports: true,
                                     usedExports: false,
                                     concatenateModules: false,
                                     noEmitOnErrors: false,
                                     checkWasmTypes: false,
                                     mangleWasmImports: false,
                                     namedModules: true,
                                     hashedModuleIds: false,
                                     namedChunks: true,
                                     portableRecords: false,
                                     minimize: false,
                                     minimizer: [ { apply: [Function: apply] } ],
                                     nodeEnv: 'development' },
                                  performance:
                                   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
                                  devServer:
                                   { contentBase: 'C:\\temp\\au-ionic\\dist',
                                     historyApiFallback: true },
                                  devtool: 'cheap-module-eval-source-map',
                                  module:
                                   { rules:
                                      [ { test: /\.css$/i,
                                          issuer: [ { not: [ { test: /\.html$/i } ] } ],
                                          use: [ 'style-loader', { loader: 'css-loader' } ] },
                                        { test: /\.css$/i,
                                          issuer: [ { test: /\.html$/i } ],
                                          use: [ { loader: 'css-loader' } ] },
                                        { test: /\.less$/i,
                                          use: [ 'style-loader', 'css-loader', 'less-loader' ],
                                          issuer: /\.[tj]s$/i },
                                        { test: /\.less$/i,
                                          use: [ 'css-loader', 'less-loader' ],
                                          issuer: /\.html?$/i },
                                        { test: /\.html$/i, loader: 'html-loader' },
                                        { test: /\.ts$/, loader: 'ts-loader' },
                                        { test: /[\/\\]node_modules[\/\\]bluebird[\/\\].+\.js$/,
                                          loader: 'expose-loader?Promise' },
                                        { test: /\.(png|gif|jpg|cur)$/i,
                                          loader: 'url-loader',
                                          options: { limit: 8192 } },
                                        { test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff2' } },
                                        { test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'url-loader',
                                          options: { limit: 10000, mimetype: 'application/font-woff' } },
                                        { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
                                          loader: 'file-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' },
                                        { test: /\.html?$/i,
                                          use: 'aurelia-webpack-plugin/html-requires-loader' } ],
                                     unknownContextRequest: '.',
                                     unknownContextRegExp: false,
                                     unknownContextRecursive: true,
                                     unknownContextCritical: true,
                                     exprContextRequest: '.',
                                     exprContextRegExp: false,
                                     exprContextRecursive: true,
                                     exprContextCritical: true,
                                     wrappedContextRegExp: /.*/,
                                     wrappedContextRecursive: true,
                                     wrappedContextCritical: false,
                                     strictExportPresence: false,
                                     strictThisContextOnImports: false,
                                     unsafeCache: true,
                                     defaultRules:
                                      [ { type: 'javascript/auto', resolve: {} },
                                        { test: /\.mjs$/i,
                                          type: 'javascript/esm',
                                          resolve: { mainFields: [ 'browser', 'main' ] } },
                                        { test: /\.json$/i, type: 'json' },
                                        { test: /\.wasm$/i, type: 'webassembly/experimental' } ] },
                                  plugins:
                                   [ DuplicatePackageCheckerPlugin {
                                       options:
                                        { verbose: false,
                                          showHelp: true,
                                          emitError: false,
                                          exclude: null,
                                          strict: true } },
                                     AureliaPlugin {
                                       options:
                                        { includeAll: false,
                                          aureliaConfig:
                                           [ 'defaultBindingLanguage',
                                             'defaultResources',
                                             'eventAggregator',
                                             'history',
                                             'router',
                                             'developmentLogging' ],
                                          dist: 'native-modules',
                                          features: { ie: true, svg: true, unparser: true, polyfills: 'es2015' },
                                          moduleMethods: [],
                                          noHtmlLoader: false,
                                          noInlineView: false,
                                          noModulePathResolve: false,
                                          noWebpackLoader: false,
                                          viewsFor: '**/!(tslib)*.{ts,js}',
                                          viewsExtensions: '.html',
                                          aureliaApp: 'main' } },
                                     ProvidePlugin { definitions: { Promise: 'bluebird' } },
                                     ModuleDependenciesPlugin {
                                       root: 'C:\\temp\\au-ionic',
                                       hash: { 'aurelia-testing': [ './compile-spy', './view-spy' ] } },
                                     HtmlWebpackPlugin {
                                       options:
                                        { template:
                                           'C:\\temp\\au-ionic\\node_modules\\html-webpack-plugin\\lib\\loader.js!C:\\temp\\au-ionic\\index.ejs',
                                          templateParameters: [Function: templateParametersGenerator],
                                          filename: 'index.html',
                                          hash: false,
                                          inject: true,
                                          compile: true,
                                          favicon: false,
                                          minify: undefined,
                                          cache: true,
                                          showErrors: true,
                                          chunks: 'all',
                                          excludeChunks: [],
                                          chunksSortMode: 'auto',
                                          meta: {},
                                          title: 'Webpack App',
                                          xhtml: false,
                                          metadata:
                                           { title: 'Aurelia Navigation Skeleton',
                                             server: true,
                                             baseUrl: '/' } } },
                                     { apply: [Function: apply] } ],
                                  cache: true,
                                  context: 'C:\\temp\\au-ionic',
                                  target: 'web',
                                  node:
                                   { console: false,
                                     process: true,
                                     global: true,
                                     Buffer: true,
                                     setImmediate: true,
                                     __filename: 'mock',
                                     __dirname: 'mock' },
                                  resolveLoader:
                                   { unsafeCache: true,
                                     mainFields: [ 'loader', 'main' ],
                                     extensions: [ '.js', '.json' ],
                                     mainFiles: [ 'index' ],
                                     cacheWithContext: false,
                                     alias:
                                      { 'aurelia-webpack-plugin': 'aurelia-webpack-plugin/dist',
                                        async: 'bundle-loader' } } },
                               context: 'C:\\temp\\au-ionic',
                               requestShortener:
                                RequestShortener {
                                  currentDirectoryRegExp: /(^|!)C:\/temp\/au\-ionic/g,
                                  parentDirectoryRegExp: /(^|!)C:\/temp/g,
                                  buildinsAsModule: true,
                                  buildinsRegExp: /(^|!)C:\/temp\/au\-ionic\/node_modules\/webpack/g,
                                  cache: Map {} },
                               running: true,
                               watchMode: true,
                               _assetEmittingSourceCache: WeakMap { <items unknown> },
                               _assetEmittingWrittenFiles: Map {},
                               watchFileSystem:
                                NodeWatchFileSystem {
                                  inputFileSystem:
                                   CachedInputFileSystem {
                                     fileSystem: NodeJsInputFileSystem {},
                                     _statStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readdirStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _readFileStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map { 'C:\\temp\\au-ionic\\src\\package.json' => [ [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             <Buffer 7b 0a 20 20 22 6e 61 6d 65 22 3a 20 22 61 75 2d 69 6f 6e 69 63 22 2c 0a 20 20 22 64 65 73 63 72 69 70 74 69 6f 6e 22 3a 20 22 41 6e 20 41 75 72 65 6c ... 1627 more bytes> ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [Timeout],
                                           _idleNext: [TimersList],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 128,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readJsonStorage:
                                      Storage {
                                        duration: 60000,
                                        running:
                                         Map {
                                           'C:\\temp\\au-ionic\\src\\package.json' => [ [Function], [Function], [Function] ] },
                                        data:
                                         Map {
                                           'C:\\temp\\au-ionic\\package.json' => [ null,
                                             { name: 'au-ionic',
                                               description: 'An Aurelia client application.',
                                               version: '0.1.0',
                                               repository: { type: '???', url: '???' },
                                               scripts: {},
                                               license: 'MIT',
                                               dependencies:
                                                { '@ionic/core': '^4.1.1',
                                                  'aurelia-animator-css': '^1.0.4',
                                                  'aurelia-bootstrapper': '^2.3.0',
                                                  'aurelia-polyfills': '^1.3.0',
                                                  bluebird: '^3.5.2' },
                                               peerDependencies: {},
                                               devDependencies:
                                                { '@stencil/webpack': '0.0.6',
                                                  '@types/bluebird': '^3.5.24',
                                                  '@types/lodash': '^4.14.117',
                                                  '@types/node': '^10.11.6',
                                                  '@types/webpack': '^4.4.15',
                                                  'aurelia-cli': '^1.0.0-beta.13',
                                                  'aurelia-testing': '^1.0.0',
                                                  'aurelia-tools': '^2.0.0',
                                                  'aurelia-webpack-plugin': '^3.0.0',
                                                  'copy-webpack-plugin': '^4.5.2',
                                                  'css-loader': '^1.0.0',
                                                  del: '^3.0.0',
                                                  'duplicate-package-checker-webpack-plugin': '^3.0.0',
                                                  'expose-loader': '^0.7.5',
                                                  'file-loader': '^2.0.0',
                                                  gulp: '^4.0.0',
                                                  'gulp-rename': '^1.4.0',
                                                  'html-loader': '^0.5.5',
                                                  'html-webpack-plugin': '^3.2.0',
                                                  'istanbul-instrumenter-loader': '^3.0.1',
                                                  'json-loader': '^0.5.7',
                                                  less: 'latest',
                                                  'less-loader': 'latest',
                                                  'mini-css-extract-plugin': '^0.4.3',
                                                  minimatch: '^3.0.4',
                                                  opn: '^5.4.0',
                                                  'style-loader': '^0.23.1',
                                                  through2: '^2.0.3',
                                                  'ts-loader': '^5.2.1',
                                                  'ts-node': '^7.0.1',
                                                  typescript: '^3.1.2',
                                                  'url-loader': '^1.1.1',
                                                  'vinyl-fs': '^3.0.3',
                                                  webpack: '^4.27.0',
                                                  'webpack-bundle-analyzer': 'latest',
                                                  'webpack-cli': '^3.1.2',
                                                  'webpack-dev-server': '^3.1.9' },
                                               engines: { node: '>= 6.0.0' },
                                               main: 'dist/app.bundle.js' } ] },
                                        levels:
                                         [ Set { 'C:\\temp\\au-ionic\\package.json' },
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 1,
                                        interval:
                                         Timeout {
                                           _idleTimeout: 530,
                                           _idlePrev: [TimersList],
                                           _idleNext: [Timeout],
                                           _idleStart: 2545,
                                           _onTimeout: [Function: bound tick],
                                           _timerArgs: undefined,
                                           _repeat: 530,
                                           _destroyed: false,
                                           domain: [Domain],
                                           [Symbol(refed)]: true,
                                           [Symbol(asyncId)]: 129,
                                           [Symbol(triggerId)]: 127 },
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: false,
                                        tick: [Function: bound tick] },
                                     _readlinkStorage:
                                      Storage {
                                        duration: 60000,
                                        running: Map {},
                                        data: Map {},
                                        levels:
                                         [ Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           Set {},
                                           ... 13 more items ],
                                        count: 0,
                                        interval: null,
                                        needTickCheck: false,
                                        nextTick: null,
                                        passive: true,
                                        tick: [Function: bound tick] },
                                     _stat: [Function: bound bound ],
                                     _statSync: [Function: bound bound ],
                                     _readdir: [Function: bound readdir],
                                     _readdirSync: [Function: bound readdirSync],
                                     _readFile: [Function: bound bound readFile],
                                     _readFileSync: [Function: bound bound readFileSync],
                                     _readJson: [Function],
                                     _readJsonSync: [Function],
                                     _readlink: [Function: bound bound readlink],
                                     _readlinkSync: [Function: bound bound readlinkSync] },
                                  watcherOptions: { aggregateTimeout: 200 },
                                  watcher:
                                   EventEmitter {
                                     domain:
                                      Domain {
                                        domain: null,
                                        _events:
                                         [Object: null prototype] {
                                           removeListener: [Function: updateExceptionCapture],
                                           newListener: [Function: updateExceptionCapture] },
                                        _eventsCount: 2,
                                        _maxListeners: undefined,
                                        members: [] },
                                     _events: [Object: null prototype] {},
                                     _eventsCount: 0,
                                     _maxListeners: undefined,
                                     options: { aggregateTimeout: 200 },
                                     watcherOptions: { ignored: undefined, poll: undefined },
                                     fileWatchers: [],
                                     dirWatchers: [],
                                     mtimes: [Object: null prototype] {},
                                     paused: false,
                                     aggregatedChanges: [],
                                     aggregatedRemovals: [],
                                     aggregateTimeout: 0,
                                     _onTimeout: [Function: bound _onTimeout] } },
                               dependencies: undefined },
                            running: true },
                         forceRebuild: false,
                         log:
                          LogLevel {
                            type: 'LogLevel',
                            options:
                             { name: 'wdm',
                               level: 'info',
                               prefix:
                                { level: [Function: level],
                                  template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                               factory: null,
                               unique: true,
                               timestamp: false },
                            methodFactory:
                             PrefixFactory {
                               options:
                                { name: [Function: name],
                                  time: [Function: time],
                                  level: [Function: level],
                                  template: '{{level}} \u001b[90m｢{{name}}｣\u001b[39m: ' },
                               [Symbol(levels)]:
                                { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 },
                               [Symbol(instance)]: [Circular] },
                            name: 'wdm',
                            currentLevel: 2,
                            trace: [Function: noop],
                            debug: [Function: noop],
                            info: [Function],
                            warn: [Function],
                            error: [Function],
                            log: [Function: noop] },
                         rebuild: [Function: rebuild],
                         fs: MemoryFileSystem { data: {} } },
                      fileSystem: MemoryFileSystem { data: {} },
                      getFilenameFromUrl: [Function: bound getFilenameFromUrl],
                      invalidate: [Function: invalidate],
                      waitUntilValid: [Function: waitUntilValid] },
                   name: 'middleware',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 1 } ],
                   regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                   route:
                    Route {
                      path: '*',
                      stack:
                       [ Layer {
                           handle: [Function: serveStatic],
                           name: 'serveStatic',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 1 } ],
                   regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                   route:
                    Route {
                      path: '*',
                      stack:
                       [ Layer {
                           handle: [Function: bound serveMagicHtml],
                           name: 'bound serveMagicHtml',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [ { name: 0, optional: false, offset: 1 } ],
                   regexp: { /^(.*)\/?$/i fast_star: true, fast_slash: false },
                   route:
                    Route {
                      path: '*',
                      stack:
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [ [Function: connectionListener], [Function] ],
        listening: { [Function: bound onceWrapper] listener: [Function] } },
     _eventsCount: 3,
     _maxListeners: undefined,
     _connections: 0,
     _handle: null,
     _usingWorkers: false,
     _workers: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     keepAliveTimeout: 5000,
     _pendingResponseData: 0,
     maxHeadersCount: null,
     headersTimeout: 40000,
     kill: [Function],
     [Symbol(IncomingMessage)]: [Function: IncomingMessage],
     [Symbol(ServerResponse)]: [Function: ServerResponse],
     [Symbol(asyncId)]: 131 },
  domain:
   Domain {
     domain: null,
     _events:
      [Object: null prototype] {
        removeListener: [Function: updateExceptionCapture],
        newListener: [Function: updateExceptionCapture] },
     _eventsCount: 2,
     _maxListeners: undefined,
     members: [] },
  domainThrown: false }
Local aurelia-cli v1.0.0-beta.13
Batchvorgang abbrechen (J/N)? 